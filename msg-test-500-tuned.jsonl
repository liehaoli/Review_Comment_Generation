{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>* @see com.fsck.k9.mail.store.StoreConfig#getTransportUri()<keep>*/<keep>public class ServerSettings {<add><add>public enum Type { IMAP, SMTP, WebDAV, POP3 }<add><keep>/**<del>* Name of the store or transport type (e.g. \"IMAP\").<add>* Name of the store or transport type (e.g. IMAP).<keep>*/<del>public final String type;<add>public final Type type;<keep>/**<keep>* The host name of the server.", "output": "Converting this to an enum makes it obvious that I combined things that don't really belong together. It would probably be better to create two enums `StoreType` and `TransportType` (in more appropriate locations). That also makes it necessary to have (at least) two `ServerSettings` classes. `IncomingServerSettings` and `OutgoingServerSettings`. Also, the naming is inconsistent. Maybe it would be better to make the string that is used for import/export explicit, e.g. WEBDAV(\"WebDAV\")."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>outreq.Write(backendConn)<add>errCh := make(chan error, 1)<keep>go func() {<del>io.Copy(backendConn, conn) // write tcp stream to backend.<add>_, err := io.Copy(backendConn, conn) // write tcp stream to backend.<add>errCh <- err<keep>}()<del>io.Copy(conn, backendConn) // read tcp stream from backend.<add>go func() {<add>_, err := io.Copy(conn, backendConn) // read tcp stream from backend.<add>errCh <- err<add>}()<add><-errCh<keep>} else {<keep>defer res.Body.Close()<keep>for _, h := range hopHeaders {", "output": "This looks like you're not collecting everything from the error channel."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return w.wf.GetSerialConsoleOutputValue(key)<keep>}<add>func (w workflowLoggable) GetValueAsBool(key string) bool {<add>v, err := strconv.ParseBool(w.wf.GetSerialConsoleOutputValue(key))<add>if err != nil {<add>return false<add>}<add>return v<add>}<add><keep>func (w workflowLoggable) GetValueAsInt64Slice(key string) []int64 {<keep>return getInt64Values(w.wf.GetSerialConsoleOutputValue(key))<keep>}", "output": "Can we propagate this error up the stack?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>func = lambda arg=arg: arg * arg # [undefined-variable]<keep>arg2 = 0<del>func2 = lambda arg2=arg2: arg2 * arg2<add>func3 = lambda arg2=arg2: arg2 * arg2<keep># Don't emit if the code is protected by NameError<keep>try:", "output": "change of name is not needed"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>def cmd_line host, cmd = @command, env = @environment, pc = @prepend_cmds<keep>env_string = host.environment_string( env )<keep>prepend_commands = host.prepend_commands( cmd, pc, :cmd_exe => @cmdexe )<add>if host[:platform] =~ /cisco_nexus/ && host[:user] != 'root'<add>append_command = '\"'<add>cmd = cmd.gsub('\"') { '\\\\\"' }<add>end<keep># This will cause things like `puppet -t -v agent` which is maybe bad.<del>cmd_line_array = [env_string, prepend_commands, cmd, options_string, args_string]<add>cmd_line_array = [env_string, prepend_commands, cmd, options_string, args_string, append_command]<keep>cmd_line_array.compact.reject( &:empty? ).join( ' ' )<keep>end", "output": "Doesn't this go in the opposite direction of #1051 / #1062 by putting platform-specific logic back into this module?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>appEnvOptionNone      = \"None (run in default VPC)\"<keep>defaultDockerfilePath = \"Dockerfile\"<keep>imageTagLatest        = \"latest\"<add>taskGroupNameDefault  = \"copilot-task\"<keep>)<keep>const (", "output": "nit: What do you think of `copilot-task-group`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>prodEnvFlag           = \"prod\"<keep>deployFlag            = \"deploy\"<keep>resourcesFlag         = \"resources\"<del>githubURLFlag         = \"github-url\"<add>repoURLFlag           = \"url\"<keep>githubAccessTokenFlag = \"github-access-token\"<keep>gitBranchFlag         = \"git-branch\"<keep>envsFlag              = \"environments\"", "output": "We can't unfortunately change any of our old flags :( it'd be a breaking change. Instead, we can keep both `githubURLFlag` and `repoURLFlag` and make the description of `githubURLFlagDescription` as \"(Deprecated) Use --url instead. GitHub respository URL for your service.\" It would be even better if we can make `githubURLFlag` as hidden but keep in the command. This way old commands will still work with `--github-url` but it won't appear anymore in the help menu."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if(spells[spell_id].timer_id > 0 && spells[spell_id].timer_id < MAX_DISCIPLINE_TIMERS)<keep>SetDisciplineRecastTimer(spells[spell_id].timer_id, spell.recast_time);<keep>} else {<del>uint32 remain = (GetDisciplineRemainingTime(this, spells[spell_id].timer_id) / 1000);<del>GetOwner()->Message(Chat::White, \"%s can use this discipline in %d minutes %d seconds.\", GetCleanName(), (remain / 60), (remain % 60));<add>uint32 remaining_time = (GetDisciplineRemainingTime(this, spells[spell_id].timer_id) / 1000);<add>GetOwner()->Message(<add>Chat::White,<add>fmt::format(<add>\"{} can use this Discipline in {}.\",<add>GetCleanName(),<add>ConvertSecondsToTime(remaining_time)<add>).c_str()<add>);<keep>return false;<keep>}<keep>}", "output": "discipline vs. Discipline? Not sure of which is correct. Also not sure if there is already an existing string const."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>mediaAdapter.notifyItemChanged(toggleSelectPhoto(m));<keep>editMode = true;<keep>}<add>else<add>{<add>selectAllPhotosUpToFav(getImagePosition(m.getPath()));<add>}<keep>} else selectAllPhotosUpTo(getImagePosition(m.getPath()), mediaAdapter);<keep>return true;<keep>}", "output": "@angmas1 move the else up, next to the closing bracket of the if block. Also, there is no need for the braces as your else statement contains only a single line. Make your if-else block similar to the block in lines 277-280."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>sortFiles(configuration, files);<add>// Make sure the cache is listening for analysis results<add>ctx.getReport().addListener(configuration.getAnalysisCache());<add><keep>/*<keep>* Check if multithreaded support is available. ExecutorService can also<keep>* be disabled if threadCount is not positive, e.g. using the", "output": "Report listeners are synchronized, even 'though the cache is thread-safe... I've not profiled it, but it may be a cause of contingency. Any better way around this? Also, do listeners **really** need to be synchronized? Can't we just make them thread-safe?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>->from($entityClass, 'entity')<keep>;<add>$wildcards = $this->getDoctrine()->getConnection()->getDatabasePlatform()->getWildcards();<add>$searchQuery = addcslashes($searchQuery, implode('', $wildcards));<add><keep>foreach ($searchableFields as $name => $metadata) {<del>$wildcards = $this->getDoctrine()->getConnection()->getDatabasePlatform()->getWildcards();<del>$searchQuery = addcslashes($searchQuery, implode('', $wildcards));<del>$query->orWhere('entity.'.$name.' LIKE :query')->setParameter('query', '%'.$searchQuery.'%');<add>if (in_array($metadata['fieldType'], array('text', 'string'))) {<add>$query->orWhere('entity.'.$name.' LIKE :fuzzy_value')->setParameter('fuzzy_value', '%'.$searchQuery.'%');<add>} else {<add>$query->orWhere('entity.'.$name.' = :exact_value')->setParameter('exact_value', $searchQuery);<add>}<keep>}<keep>$paginator = new Pagerfanta(new DoctrineORMAdapter($query, false));", "output": "Wouldn't it be better to use a sql `IN ( :exact_value )` ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return filepath.Join(dataDir, \"server\"), err<keep>}<del>func StartServer(ctx context.Context, config *Config) error {<add>func StartServer(ctx context.Context, config *Config, cfg *cmds.Server) error {<keep>if err := setupDataDirAndChdir(&config.ControlConfig); err != nil {<keep>return err<keep>}", "output": "At some point we need to condense down and refactor our \"configs\" as we have too many in too many places and we're starting to get more illegible code. No change necessary but calling out for future reference."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import com.google.common.collect.Maps;<add>import com.sun.org.glassfish.gmbal.ManagedObject;<add><keep>import org.openqa.grid.internal.Registry;<keep>import org.openqa.grid.internal.utils.GridHubConfiguration;<keep>import org.openqa.grid.web.servlet.DisplayHelpServlet;", "output": "And again. The reason it's bad is that if someone uses a JDK not produced by Oracle they won't have this class."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>refreshFromMetadataLocation(metadataLocation);<add>LOG.debug(\"Refreshed [{}]\", fullName);<keep>}<keep>@Override", "output": "There is already a log in `BaseMetastoreTableOperations` for this. It has the location, but not the table name. Maybe just add table name to that one."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import (<keep>\"fmt\"<add><keep>\"sigs.k8s.io/cluster-api/util/conditions\"<keep>errlist \"k8s.io/apimachinery/pkg/util/errors\"", "output": "similar here for imports, these should be consolidated (and also consolidated with the grouping below)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add># frozen_string_literal: true<add># encoding: utf-8<add><add>class StringifiedSymbol<add>include Mongoid::Document<add>store_in collection: \"stringified_symbols\", client: :other<add>field :stringified_symbol, type: StringifiedSymbol<add>end", "output": "Can you please change the name of this class to be something else?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"grpcio-tools==1.32.0\",<keep>\"isort>=4.3.21,<5\",<keep>\"mock==3.0.5\",<add>\"pandera<0.8.0\",<keep>\"protobuf==3.13.0\",  # without this, pip will install the most up-to-date protobuf<keep>\"pylint==2.6.0\",<keep>\"pytest-cov==2.10.1\",", "output": "We should avoid adding a pandera dependency to Dagster itself."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>MintNewSecretBlock(gomock.Any(), gomock.Any(), gomock.Any()).Return(secretBlkToMint, nil).AnyTimes()<keep>blockchain.EXPECT().<keep>Nonce(gomock.Any()).Return(uint64(0), nil).AnyTimes()<add>blockchain.EXPECT().<add>MintNewBlockWithActionIterator(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).Return(blkToMint, nil).AnyTimes()<keep>if mockChain == nil {<keep>candidates := make([]*state.Candidate, 0)<keep>for _, delegate := range delegates {", "output": "line is 138 characters"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>/// <summary><keep>/// The severity of this message (ie, debug/info/warning/error/fatal, etc)<keep>/// </summary><del>public override Category Severity => Category.Error;<add>public override Category Severity => Category.Warning;<keep>///// <summary><keep>///// Validates whether property names are camelCase in body parameters.", "output": "why are we turning this one into a Warning?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>LoggingOptions loggingOptions = new LoggingOptions(config);<keep>loggingOptions.configureLogging();<del>LOG.info(\"Logging configured.\");<add>LOG.finest(\"Logging configured.\");<keep>DistributedTracer tracer = loggingOptions.getTracer();<del>LOG.info(\"Using tracer: \" + tracer);<add>LOG.finest(\"Using tracer: \" + tracer);<keep>GlobalDistributedTracer.setInstance(tracer);<keep>EventBusConfig events = new EventBusConfig(config);", "output": "Again. This is part of the start up of the server, and the diagnostics are helpful."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>assert.NoError(t, err)<keep>destroySender := &fakeDestroySender{}<del>err = RequestSessionDestroy(destroySender, sid)<add>err = RequestSessionDestroy(destroySender, sid.ID)<keep>assert.NoError(t, err)<keep>}", "output": "I guess `sid` was for `sessionID`, but now it looks strange: `sid.ID`."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>using System.Collections.Generic;<keep>using System.Globalization;<keep>using System.IO;<add>using System.Linq;<keep>using System.Net;<keep>using System.Net.Http;<keep>using System.Text;<keep>using System.Threading;<add>using System.Threading.Tasks;<keep>using Task = System.Threading.Tasks.Task;<keep>namespace Microsoft.DotNet.Build.CloudTestTasks", "output": "In general I'm a trying to understand the reason behind this PR. Looks like if a blob (name) already exists we check if the contents are identical? In what scenarios this is not the case? When we want to publish a package/asset that has changed but still we want to use the same version?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>*/<keep>@SuppressWarnings(\"unchecked\")<keep>default N setJavadocComment(String comment) {<del>return setJavadocComment(new JavadocComment(comment));<add>return setJavadocComment(new JavadocComment(\" \" + comment));<keep>}<keep>default N setJavadocComment(JavadocComment comment) {", "output": "Why the space?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>});<keep>}<keep>if (typeof module === 'object' && module.exports && typeof axeFunction.toString === 'function') {<del>axe.source = '(' + axeFunction.toString() + ')(this, this.document);';<add>axe.source = '(' + axeFunction.toString() + ')(typeof window === \"object\" ? window : this);';<keep>module.exports = axe;<keep>}<keep>if (typeof window.getComputedStyle === 'function') {", "output": "hey, aren't we supposed to be passing in two parameters here?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// CborStore is a temporary interface for interacting with IPLD objects.<keep>CborStore *hamt.CborIpldStore<add><add>pool *core.MessagePool<keep>}<keep>// Config is a helper to aid in the construction of a filecoin node.", "output": "why is this here? We already have a message pool in the node."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return \"UNKNOWN\"<keep>}<add>// Mapping task status in the agent to that in the backend<add>func BackEndStatus(ts *TaskStatus) string {<add>switch *ts {<add>case TaskRunning:<add>return \"RUNNING\"<add>case TaskStopped:<add>return \"STOPPED\"<add>case TaskDead:<add>return \"STOPPED\"<add>}<add>return \"PENDING\"<add>}<add><keep>var containerStatusMap = map[string]ContainerStatus{<keep>\"NONE\":    ContainerStatusNone,<keep>\"UNKNOWN\": ContainerStatusUnknown,", "output": "I think it makes more sense to have this be a method on TaskStatus. Also, nit, Backend, not BackEnd."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>from dagster.grpc.types import ExecuteRunArgs<keep>from dagster.serdes import ConfigurableClass, serialize_dagster_namedtuple<keep>from dagster.utils.backcompat import experimental<add>from dagster.utils.backoff import backoff<add><add><add># The ECS API is eventually consistent:<add># https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html<add># describe_tasks might initially return nothing even if a task exists.<add>class EcsEventualConsistencyTimeout(Exception):<add>pass<add><add><add># 9 retries polls for up to 51.1 seconds with exponential backoff.<add>BACKOFF_RETRIES = 9<keep>@dataclass", "output": "Should we bite the bullet and poll for the full 5 minutes that AWS recommends? If we do that, we'll probably want to leave some kind of breadcrumb in the event log to let users know why it's taking so long to launch."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>assert morphSep > 0;<keep>assert morphSep > flagSep;<keep>int sep = flagSep < 0 ? morphSep : flagSep;<add>if (sep == 0) return 0;<keep>CharSequence toWrite;<keep>String beforeSep = line.substring(0, sep);", "output": "We don't store empty dictionary entries anymore: they bring no benefits, only trouble."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>$view = $galleryController->postGalleryMediaGalleryhasmediaAction(1, 2, new Request());<keep>$this->assertInstanceOf('FOS\\RestBundle\\View\\View', $view);<del>$this->assertSame(200, $view->getStatusCode(), 'Should return 200');<add>$this->assertSame(200, $view->getResponse()->getStatusCode(), 'Should return 200');<keep>}<keep>public function testPostGalleryMediaGalleryhasmediaInvalidAction()", "output": "Why this is needed?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>0.0<keep>end<keep>end<add><add># may be replaced with paper-trail or similar at some point<add>def version<add>self.updated_at.to_i<add>end<keep>end", "output": "Since this may be the case, wondering if we should call the param `updated_at_i` or something so that we don't run into a problem distinguishing them down the road?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>* Reference: https://en.wikipedia.org/wiki/Supplemental_Punctuation<keep>* -> \\u2E00-\\u2E7F Reference<keep>*/<del>return /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,\\-.\\/:;<=>?@\\[\\]^_`{|}~]/g;<add>return /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&£¢¥§€()*+,\\-.\\/:;<=>?@\\[\\]^_`{|}~±]/g;<keep>}<keep>/**", "output": "Why are currency signs considered punctuation? They technically fall under the BMP range for Currency Symbols `\\u20A0-\\u20CF` (covered in `getUnicodeNonBmpRegExp`, which is itself a misnomer)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return access(path.c_str(), F_OK) == 0;<keep>}<add>// static<add>bool FileUtils::rename(const std::string& src, const std::string& dst) {<add>auto status = ::rename(src.c_str(), dst.c_str());<add>LOG_IF(WARNING, status < 0) << \"Rename \" << src << \" to \" << dst << \" failed, the errno: \"<add><< ::strerror(errno);<add>return status == 0;<add>}<add><keep>std::vector<std::string> FileUtils::listAllTypedEntitiesInDir(<keep>const char* dirpath,<keep>FileType type,", "output": "Is betterLOG_IF(ERROR, status != 0) ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>newInst := &Instance{serverType: newCaddyfile.ServerType(), wg: i.wg}<keep>// attempt to start new instance<del>err := startWithListenerFds(newCaddyfile, newInst, restartFds)<add>err := startWithListenerFds(newCaddyfile, newInst, restartFds, false)<keep>if err != nil {<keep>return i, err<keep>}", "output": "I assume there will never be a scenario where justValidate is expected to be true on a restart"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>class to each underlying element.<keep>\"\"\"<keep>if isinstance(data, DynamicMap):<add>class_name = cls.__name__<add>repr_kdims = 'kdims=%r' % kdims if kdims else None<add>repr_vdims = 'vdims=%r' % vdims if vdims else None<add>repr_kwargs = (', '.join('%s=%r' % (k,v) for k,v in kwargs.items())<add>if kwargs else None)<add>extras = ', '.join([el for el in [repr_kdims, repr_vdims, repr_kwargs]<add>if el is not None])<add>extras = ', ' + extras if extras else ''<add>apply_args= 'hv.{class_name}{extras}'.format(class_name=class_name,<add>extras=extras)<add>msg = \"Cannot construct a {class_name} from the supplied object of type DynamicMap. Implicitly creating a DynamicMap of {class_name} objects, but instead please explicitly call .apply({apply_args}) on the supplied DynamicMap.\"<add>cls.warning(cls, msg.format(class_name=class_name, apply_args=apply_args))<keep>return data.apply(cls, per_element=True, kdims=kdims, vdims=vdims, **kwargs)<keep>else:<keep>return super(Dataset, cls).__new__(cls)", "output": "Shouldn't this be `cls.param.warning`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>config.roadie.url_options = config.action_mailer.default_url_options<del>config.exceptions_app = self.routes<keep>config.autoload_paths << Rails.root.join('lib')<keep>config.assets.precompile << 'common/communicarts.css'", "output": "This is the actual fix."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>const indexInformationDb = require('./db_ops').indexInformation;<keep>const isObject = require('../utils').isObject;<keep>const Long = require('mongodb-core').BSON.Long;<add>const makeLazyLoader = require('../utils').makeLazyLoader;<keep>const MongoError = require('mongodb-core').MongoError;<keep>const ReadPreference = require('mongodb-core').ReadPreference;<keep>const toError = require('../utils').toError;<add>const collLoader = makeLazyLoader(`${__dirname}/../collection`);<add>const dbLoader = makeLazyLoader(`${__dirname}/../db`);<add><keep>/**<keep>* Group function helper<keep>* @ignore", "output": "nit: maybe call these `loadCollection()/loadDb()`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if (sgv.getMills() > latestDateInReceivedData)<keep>latestDateInReceivedData = sgv.getMills();<keep>}<del>BroadcastSgvs.handleNewSgv(sgvs, MainApp.instance().getApplicationContext(), isDelta);<add>// Was that sgv more than 15 mins ago ?<add>boolean moreThan15MinAgo = false;<add>if((System.currentTimeMillis()-latestDateInReceivedData)/(60 * 1000L) < 15L )<add>moreThan15MinAgo = true;<add>if(Notification.isAlarmForStaleData() && moreThan15MinAgo){<add>MainApp.bus().post(new EventDismissNotification(Notification.NSALARM));<add>}<add>BroadcastSgvs.handleNewSgv(sgvs, MainApp.instance().getApplicationContext(), isDelta);<keep>}<keep>MainApp.bus().post(new EventNSClientNewLog(\"LAST\", DateUtil.dateAndTimeString(latestDateInReceivedData)));<keep>} catch (JSONException e) {", "output": "should not be this lessThan15MinAgo ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<del>ResultCode NebulaStore::multiGet(GraphSpaceID spaceId,<del>PartitionID partId,<del>const std::vector<std::string>& keys,<del>std::vector<std::string>* values) {<add>ErrorOr<ResultCode, std::vector<Status>> NebulaStore::multiGet(<add>GraphSpaceID spaceId,<add>PartitionID partId,<add>const std::vector<std::string>& keys,<add>std::vector<std::string>* values,<add>bool returnPartly) {<keep>auto ret = part(spaceId, partId);<keep>if (!ok(ret)) {<keep>return error(ret);", "output": "Do we really need the param here? If only partial results returned, we could return ResultCode::PARTIAL_RESULTS;"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>try:<keep>userscripts.run_async(tab, cmd, *args, win_id=self._win_id,<keep>env=env, verbose=verbose)<del>except userscripts.UnsupportedError as e:<add>except (userscripts.UnsupportedError, userscripts.NotFoundError) as e:<keep>raise cmdexc.CommandError(e)<keep>@cmdutils.register(instance='command-dispatcher', scope='window')", "output": "@The-Compiler Is this style okay or would you prefer a common userscript exception base?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return;<keep>}<del>registry.dispatch( STORE_NAME ).setPropertyID( propertyID );<del><keep>if ( PROPERTY_CREATE === propertyID ) {<del>registry.dispatch( STORE_NAME ).setProfileID( PROFILE_CREATE );<add>registry.dispatch( STORE_NAME ).setSettings( {<add>propertyID,<add>profileID: PROFILE_CREATE,<add>} );<add><keep>return;<keep>}", "output": "I think it would make sense to also set `internalWebPropertyID` to `''` here. Otherwise, it might keep its previous value (let's say a property was selected before, but then the user chooses \"Create new property\"), but since it always should depend on `propertyID`, that would be incorrect."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>type Headers struct {<keep>// This representation allows us to make zero-value valid<keep>items map[string]string<add>// map from canonicalized key to original key<add>keyMapping map[string]string<keep>}<keep>// NewHeaders builds a new Headers object.", "output": "nit: \"*mapping\" for a map is unnecessary. Consider calling this `originalNames` or similar."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>muted_changed = pyqtSignal(bool)<keep>recently_audible_changed = pyqtSignal(bool)<del>def __init__(self, parent=None):<add>def __init__(self, tab, parent=None):<keep>super().__init__(parent)<keep>self._widget = None<add>self._tab = tab<keep>def set_muted(self, muted: bool):<keep>\"\"\"Set this tab as muted or not.\"\"\"", "output": "You'll also need to adjust `FakeWebTabAudio` in `tests/helpers/stubs.py`."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if (typeof type != 'function') {<keep>// Apply defaultValue to value<keep>if (props.defaultValue) {<del>if (!props.value && props.value !== 0) {<add>if (props.value == null && props.value !== 0) {<keep>props.value = props.defaultValue;<keep>}<del>delete props.defaultValue;<keep>}<keep>// Add support for array select values: <select value={[]} />", "output": "Okay sorry about this I was really confused on how to support uncontrolled in this case, so what we want to do is apply `defaultValue` when `props.value` is falsy but not undefined, right? In the case of us seeing it is controlled (value & onChange present) we apply defaultValue to `props.value` (and delete props.defaultValue) In the case of uncontrolled we shouldn't enter this branch at all and go for full native dom behavior"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># Move the review cursor so others can't access its previous position.<keep>self._oldReviewPos = api.getReviewPosition()<keep>self._oldReviewObj = self._oldReviewPos.obj<del>api.setNavigatorObject(eventHandler.lastQueuedFocusObject)<add>api.setNavigatorObject(eventHandler.lastQueuedFocusObject, isFocus=True)<keep>def event_appModule_loseFocus(self):<keep>if not config.conf[\"reviewCursor\"][\"followFocus\"]:<del>api.setReviewPosition(self._oldReviewPos)<add>api.setReviewPosition(self._oldReviewPos, isCaret=False)<keep>del self._oldReviewPos, self._oldReviewObj<keep>inputCore.manager._captureFunc = None", "output": "As isCaret is False by default, explicitly specifying isCaret=False here is not needed, and is perhaps a little confusing. I'd prefer that anywhere in the codebase that isCaret is only ever specified if it needs to be set to true. Mirroring that of isFocus for setNavigatorObject."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>const { diff: rolesTable, notes: rolesFootnotes } = getDiff(<keep>roles,<del>axe.commons.aria.lookupTable.role,<add>axe.utils.getStandards().ariaRoles,<keep>listType<keep>);<keep>const ariaQueryAriaAttributes = getAriaQueryAttributes();<keep>const { diff: attributesTable, notes: attributesFootnotes } = getDiff(<keep>ariaQueryAriaAttributes,<del>axe.commons.aria.lookupTable.attributes,<add>axe.utils.getStandards().ariaAttrs,<keep>listType<keep>);<keep>const attributesTableMarkdown = mdTable([", "output": "I agree with Stephen it's better to invoke getStandards() only once."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># ----------------------------------------------------------------------<keep>\"\"\"<del>Template file used by the OPF Experiment Generator to generate the actual<del>description.py file by replacing $XXXXXXXX tokens with desired values.<del><del>This description.py file was generated by:<del>'~/nupic/eng/lib/python2.6/site-packages/nupic/frameworks/opf/expGenerator/ExpGenerator.py'<add>Anomaly hotgym example<keep>\"\"\"<add>from nupic.algorithms.anomaly import Anomaly<add><keep>from nupic.frameworks.opf.expdescriptionapi import ExperimentDescriptionAPI<keep>from nupic.frameworks.opf.expdescriptionhelpers import (", "output": "`Anomaly` imported here, but not used. Please run the changed files through pylint with nupic pylint config and fix pylint findings related to your changes."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>DEFINE_int32(default_parts_num, 100, \"The default number of parts when a space is created\");<keep>DEFINE_int32(default_replica_factor, 1, \"The default replica factor when a space is created\");<add>DEFINE_int32(default_space_sum, 100, \"The default number of space can be created\");<add>DEFINE_int32(default_max_replica_factor, 1, \"The default max replica factor that a space can take\");<keep>namespace nebula {<keep>namespace meta {", "output": "Please revise the naming of these two flags. _**default**_ is the value we take when user doesn't provide. You could infer from the fact how `default_parts_num` are used."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>$url = Request::path();<keep>}<del>if (!strlen($url)) {<add>if ('' === $url) {<keep>$url = '/';<keep>}", "output": "Who invited yoda?   In all seriousness though, wouldn't an `if (empty())` be better here?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>version = [analyzer_bin, u' --version']<keep>try:<keep>output = subprocess.check_output(shlex.split(' '.join(version)),<del>env=check_env)<add>env=check_env,<add>universal_newlines=True)<keep>versions[analyzer_bin] = output<keep>except (subprocess.CalledProcessError, OSError) as oerr:<keep>LOG.warning(\"Failed to get analyzer version: %s\",", "output": "The name of this argument is not too intuitive. The point is, these kind of subprocess calls will return `str`s in Python2 and 'byte`s in Python3. It would be a lot of work to make CodeChecker handle both `str` and `byte` everywhere. Using the `universal_newlines` argument, we can force Python3 to return text rather then bytes."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>package api<keep>import (<add>\"github.com/aws/aws-sdk-go/aws\"<keep>\"fmt\"<add>\"encoding/json\"<keep>\"reflect\"<keep>\"sort\"<keep>\"strings\"", "output": "Nit should be using `goimports` to format the import statements with standard libary imports first, new line, followed by non-standard library imports."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>len(rule.DstPorts) == 0 &&<keep>len(rule.DstNamedPortIpSetIds) == 0 &&<keep>len(rule.DstIpSetIds) == 0 &&<add>len(rule.DstIpPortSetIds) == 0 &&<keep>len(rule.NotDstNet) == 0 &&<keep>len(rule.NotDstPorts) == 0 &&<keep>len(rule.NotDstIpSetIds) == 0 &&", "output": "Yep, looks right; your new selector _should_ disqualify the rule from being XDP accelerated."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>oldDom,<keep>isHydrating<keep>) {<del>let i, j, oldVNode, childVNode, newDom, firstChildDom, refs;<add>let i, j, oldVNode, childVNode, newDom, firstChildDom;<add>let refs = [];<keep>// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR<keep>// as EMPTY_OBJ._children should be `undefined`.", "output": "@developit I vaguely remember you mentioning something about some JS engines having an escape analysis feature that makes objects (and arrays?) locally declared that never leave the function essentially free from a GC perspective or something. Do you think we could benefit from that here? Or should we leave this as it is?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>def character<keep>fetch('aqua_teen_hunger_force.character')<keep>end<add><add>##<add># Produces a perl of great AHTF wisdom<add>#<add># @return [String]<add>#<add># @example<add>#   Faker::TvShows::AquaTeenHungerForce.quote #=> \"Friendship ain't about trust. Friendship's about nunchucks.\"<add>#<add># @faker.version 1.8.5<add>def quote<add>fetch('aqua_teen_hunger_force.quote')<add>end<keep>end<keep>end<keep>end", "output": "New generators should have version `next`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>PKG_CHECK_MODULES([LIBSYSTEMD], [libsystemd], [have_libsystemd=yes], [have_libsystemd=no])<keep>AM_CONDITIONAL(BUILDOPT_LIBSYSTEMD, test x$have_libsystemd = xyes)<keep>AM_COND_IF(BUILDOPT_LIBSYSTEMD,<del>AC_DEFINE([HAVE_LIBSYSTEMD], 1, [Define if we have libsystemd]))<add>AC_DEFINE([HAVE_LIBSYSTEMD], 1, [Define if we have libsystemd])<add>systemdsystemgeneratordir=$($PKG_CONFIG --variable=systemdsystemgeneratordir systemd)<add>AC_SUBST(systemdsystemgeneratordir)<add>)<keep>AS_IF([test \"x$have_libsystemd\" = \"xyes\"], [<keep>with_systemd=yes", "output": "Can you provide a `--with-systemdsystemgeneratordir` option here? So that I can do unprivileged installs without completely turning off systemd. I can add it as a follow-up PR too."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>def __mul__(self, other):<keep>if type(other).__name__ == 'DynamicMap':<del>from ..util import Dynamic<del>def dynamic_mul(element):<add>from .spaces import Callable<add>def dynamic_mul(*args, **kwargs):<add>element = other[args]<keep>return self * element<del>return Dynamic(other, operation=dynamic_mul)<add>callback = Callable(callable_function=dynamic_mul,<add>inputs=[self, other])<add>return other.clone(shared_data=False, callback=callback,<add>streams=[])<keep>if isinstance(other, UniformNdMapping) and not isinstance(other, CompositeOverlay):<keep>items = [(k, self * v) for (k, v) in other.items()]<keep>return other.clone(items)", "output": "Wondering whether it should be `self.clone`, or `other.clone` or maybe a new `DynamicMap` declaration entirely. I see this is in the condition where `other` is a `DynamicMap`but is this definitely right in terms of `kdims`? I need to think about it more..."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// to top-level chains.<keep>insertMode string<add>// Record when we did our most recent updates and refreshes of the table.  We use these to<add>// calculate the next time we should force a refresh.<add>lastUpdateTime  time.Time<add>lastRefreshTime time.Time<add>refreshInterval time.Duration<add><keep>logCxt *log.Entry<keep>gaugeNumChains        prometheus.Gauge", "output": "Can we rename 'refresh' to 'read' and 'update' to 'write'? Until I had read more of the code below, I couldn't tell the difference between 'update' and 'refresh'."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>func (uq *uniQueue) dequeAll() []*peerBlock {<del>if len(uq.blocks) == 0 {<del>return nil<del>}<keep>blks := uq.blocks<keep>uq.blocks = []*peerBlock{}<keep>uq.hashes = map[hash.Hash256]bool{}", "output": "i think it's OK to leave this?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># Authorization header<keep>headers[\"Authorization\"] = \"Basic %s\" % auth<del>self._conn.request(method, parsed_url.path, data, headers)<del>resp = self._conn.getresponse()<add>if body and method != 'POST' and method != 'PUT':<add>body = None<add>try:<add>self._conn.request(method, parsed_url.path, body, headers)<add>resp = self._conn.getresponse()<add>except httplib.HTTPException:<add>self._conn.close()<add>raise<add><keep>statuscode = resp.status<keep>statusmessage = resp.msg<keep>LOGGER.debug('%s %s' % (statuscode, statusmessage))", "output": "body is being used here for the first time without every being populated. This will error. To run tests do `./go clean test_py` and that will run the Firefox tests"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>class CreatePgSearchDocuments < ActiveRecord::Migration<add>def self.up<add>say_with_time(\"Creating table for pg_search multisearch\") do<add>create_table :pg_search_documents do |t|<add>t.text :content<add>t.belongs_to :searchable, :polymorphic => true, :index => true<add>t.timestamps null: false<add>end<add>end<add>end<add><add>def self.down<add>say_with_time(\"Dropping table for pg_search multisearch\") do<add>drop_table :pg_search_documents<add>end<add>end<add>end", "output": "Use the new Ruby 1.9 hash syntax."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>cmd = runners.last_command[mode_manager.mode]<keep>commandrunner = runners.CommandRunner(win_id)<keep>commandrunner.run(cmd[0], count if count is not None else cmd[1])<add><add>@cmdutils.register(debug=True,name='debug-log-capacity')<add>def log_capacity(capacity: int):<add>\"\"\"Choose number of lines for your log.<add><add>Args:<add>capacity: Number of lines for the log.<add>\"\"\"<add>if capacity < 0:<add>raise cmdexc.CommandError(\"Please choose log capacity above 0.\")<add>else:<add>log.ram_handler.change_log_capacity(capacity)<add><add>", "output": "Please add a space after the comma here (generally, with arguments there's always a space after commas)."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>continue<keep>keyList=[]<keep># We assume alt  if there are no modifiers at all and its not a menu item as this is clearly a nmonic<del>if (binding.modifiers&JABHandler.ACCESSIBLE_ALT_KEYSTROKE) or (not binding.modifiers and self.role!=controlTypes.ROLE_MENUITEM):<add>altModifier = binding.modifiers&JABHandler.ACCESSIBLE_ALT_KEYSTROKE<add>if not altModifier:<add>if not binding.modifiers and self.role!=controlTypes.ROLE_MENUITEM:<add>parent=self.parent<add>altModifier=isinstance(parent,JAB) and parent.role==controlTypes.ROLE_MENUBAR<add>if altModifier:<keep>keyList.append(keyLabels.localizedKeyLabels['alt'])<keep>if binding.modifiers&JABHandler.ACCESSIBLE_CONTROL_KEYSTROKE:<keep>keyList.append(keyLabels.localizedKeyLabels['control'])", "output": "Can this just be an else?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># this callback is used to prevent an auto-migration from being generated<keep># when there are no changes to the schema<del># reference: http://alembic.readthedocs.org/en/latest/cookbook.html<add># reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html<keep>def process_revision_directives(context, revision, directives):<keep>if getattr(config.cmd_opts, 'autogenerate', False):<keep>script = directives[0]", "output": "sorry, why this change?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># Authorization header<keep>headers[\"Authorization\"] = \"Basic %s\" % auth<del>self._conn.request(method, parsed_url.path, data, headers)<del>resp = self._conn.getresponse()<add>if body and method != 'POST' and method != 'PUT':<add>body = None<add>try:<add>self._conn.request(method, parsed_url.path, body, headers)<add>resp = self._conn.getresponse()<add>except httplib.HTTPException:<add>self._conn.close()<add>raise<add><keep>statuscode = resp.status<keep>statusmessage = resp.msg<keep>LOGGER.debug('%s %s' % (statuscode, statusmessage))", "output": "body is being used here for the first time without every being populated. This will error. To run tests do `./go clean test_py` and that will run the Firefox tests"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>config := config.Config{<keep>NodeType: config.DelegateType,<keep>Network: config.Network{<del>Host:                    host,<del>Port:                    port,<add>Host: host,<add>Port: port,<keep>MsgLogsCleaningInterval: 2 * time.Second,<keep>MsgLogRetention:         10 * time.Second,<keep>HealthCheckInterval:     time.Second,", "output": "File is not `goimports`-ed"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>opts_parser = OptionParser.new do |opts|<keep>opts.banner = <<-EOS<keep>Usage: asciidoctor [OPTION]... [FILE]<del>Translate the AsciiDoc source FILE into the backend output format (e.g., HTML 5, DocBook 4.5, etc.)<add>Translate the AsciiDoc source FILE, or multiple FILE(s) into the backend output format (e.g., HTML 5, DocBook 4.5, etc.)<keep>By default, the output is written to a file with the basename of the source file and the appropriate extension.<keep>Example: asciidoctor -b html5 source.asciidoc", "output": "I have followed the convention of `cp`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>*/<keep>static deleteFile(config) { }<add>/**<add>* Checks if the Realm already exists on disk.<add>* @param {Realm~Configuration} config The configuration for the Realm.<add>* @throws {Error} if anything in the provided `config` is invalid.<add>*/<add>static exists(config) { }<add><keep>/**<keep>* Copy all bundled Realm files to app's default file folder.<keep>* This is only implemented for React Native.", "output": "does it return something?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>view_activate(view, true);<keep>seat->has_focus = true;<add>// We want to unconditionally send keyboard input to the view we are<add>// focusing here, so cancel any existing grabs.<add>struct wlr_seat_keyboard_grab *curr_grab = seat->seat->keyboard_state.grab;<add>curr_grab->interface->cancel(curr_grab);<add><keep>struct wlr_keyboard *keyboard = wlr_seat_get_keyboard(seat->seat);<keep>if (keyboard != NULL) {<keep>wlr_seat_keyboard_notify_enter(seat->seat, view->wlr_surface,", "output": "probably better to use `wlr_seat_keyboard_end_grab()`."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>final Address address = requestContext.getRequiredParameter(0, Address.class);<keep>final String privacyGroupId = requestContext.getRequiredParameter(1, String.class);<del>final long nonce = privateTransactionHandler.getSenderNonce(address, privacyGroupId);<add>final long nonce = privateTransactionHandler.determineNonce(address, privacyGroupId);<keep>return new JsonRpcSuccessResponse(requestContext.getRequest().getId(), Quantity.create(nonce));<keep>}<keep>}", "output": "nit: I can't help but think the privateTransactionHandler should be a base-class member ... every Priv Json RPC seems to need it..."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>// sync global best info<add>auto max_cat_threshold = this->config_->max_cat_threshold;<add>int splitInfoSize = SplitInfo::Size(max_cat_threshold);<add>if (input_buffer_.size() < splitInfoSize * 2) {<add>input_buffer_.resize(splitInfoSize * 2);<add>}<keep>SyncUpGlobalBestSplit(input_buffer_.data(), input_buffer_.data(), &smaller_best_split, &larger_best_split, this->config_->max_cat_threshold);<keep>// set best split", "output": "maybe we can do this in Init function?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>const (<keep>compactInterval = 2 * time.Minute<del>compactSizeMin  = 32 * 1024 * 1024<del>compactNumMin   = 4<add>compactSizeMin  = 64 * 1024 * 1024<add>compactNumMin   = 8192<keep>)<keep>t := time.NewTicker(compactInterval)", "output": "During our zoom and working on this, I said that I believe it was set to 64MB, not 32MB, but the diff shows that I was wrong. So we could change it back to 32MB."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>#include <flux/core.h><keep>#include \"heaptrace.h\"<add>static flux_msg_handler_t **handlers = NULL;<add><keep>static void start_cb (flux_t *h, flux_msg_handler_t *mh,<keep>const flux_msg_t *msg, void *arg)<keep>{", "output": "In C, file scope variables are already initialized to 0 so the \"= NULL\" is redundant. Not a big deal."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return nil<keep>}<add>// detect connection timeout to the upstream and respond with 504<add>switch e, ok := proxyErr.(net.Error); ok {<add>case e.Timeout():<add>return caddyhttp.Error(http.StatusGatewayTimeout, proxyErr)<add>}<add><keep>// if the roundtrip was successful, don't retry the request or<keep>// ding the health status of the upstream (an error can still<keep>// occur after the roundtrip if, for example, a response handler", "output": "Returning here bypasses all the health check and load balancing features."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>self.getAddonsButton = generalActions.addButton(self, label=_(\"&Get add-ons...\"))<keep>self.getAddonsButton.Bind(wx.EVT_BUTTON, self.onGetAddonsClick)<keep># Translators: The label for a button in Add-ons Manager dialog to install an add-on.<del>self.addButton = generalActions.addButton(self, label=_(\"&Install...\"))<del>self.addButton.Bind(wx.EVT_BUTTON, self.onAddClick)<add>if not globalVars.appArgs.secure:<add>self.addButton = generalActions.addButton(self, label=_(\"&Install...\"))<add>self.addButton.Bind(wx.EVT_BUTTON, self.onAddClick)<keep># Translators: The label of a button in the Add-ons Manager to open the list of incompatible add-ons.<keep>self.incompatAddonsButton = generalActions.addButton(self, label=_(\"&View incompatible add-ons...\"))<keep>self.incompatAddonsButton.Bind(wx.EVT_BUTTON, self.onIncompatAddonsShowClick)", "output": "This button should also be disabled when in secure mode since it opens a web browser from which you can easily do a lot of insecure stuff."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>#     sum  12.0  NaN<keep>#<keep># Aggregated output is usually pretty much small. So it is fine to directly use pandas API.<del>pdf = kdf.to_pandas().transpose().reset_index()<del>pdf = pdf.groupby(['level_1']).apply(<del>lambda gpdf: gpdf.drop('level_1', 1).set_index('level_0').transpose()<del>).reset_index(level=1)<del>pdf = pdf.drop(columns='level_1')<add>pdf = kdf.to_pandas().stack(level=1)<add>pdf.index = pdf.index.droplevel()<keep>pdf.columns.names = [None]<keep>pdf.index.names = [None]", "output": "We can just use `.stack()` here? Then I guess we can reuse when supporting multi-index columns."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>: base(tableView)<keep>{<keep>_cellIdentifier = new NSString(cellIdentifier);<add>tableView.RegisterNibForCellReuse(UINib.FromName(cellIdentifier, NSBundle.MainBundle), cellIdentifier);<keep>}<keep>public MvxSimpleTableViewSource(UITableView tableView, string nibName, string cellIdentifier = null,", "output": "What happens if there is no NIB/XIB with that name?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return TESTANY(DR_DISASM_INTEL | DR_DISASM_ARM, DYNAMO_OPTION(disasm_mask));<keep>}<add>static inline bool<add>opmask_with_dsts(void)<add>{<add>return TESTANY(DR_DISASM_INTEL | DR_DISASM_ATT, DYNAMO_OPTION(disasm_mask));<add>}<add><keep>static void<keep>internal_instr_disassemble(char *buf, size_t bufsz, size_t *sofar INOUT,<keep>dcontext_t *dcontext, instr_t *instr);", "output": "> k1 src0 src2 -> dst s/src2/src1/ nit: k1 is actually src0 according to instr_get_src(instr, 0) which makes this a little confusing"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>from werkzeug.utils import import_string<add><add>from .config import CFG_RELATIONSHIPS_NODE_ENGINE, CFG_RELATIONSHIPS_EDGE_ENGINE<add><add>Node = import_string(CFG_RELATIONSHIPS_NODE_ENGINE)<add>Edge = import_string(CFG_RELATIONSHIPS_EDGE_ENGINE)", "output": "I think you should use `app.config`. In the usual case, the config file is not overwritten, there is additional config file outside of the source of `Invenio`."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>var ex = Assert.Throws<TTransportException>(() => transport.Flush());<del>Assert.Equal(\"Cannot flush closed transport. message, yo\", ex.Message);<add>Assert.Equal(\"Cannot flush closed transport\", ex.Message);<keep>}<keep>[Fact]", "output": "Most of the following test changes can be avoided if need be."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// checkCaches copies a block into `block` if it's in one of our caches.<keep>func (brq *blockRetrievalQueue) checkCaches(ctx context.Context,<del>kmd KeyMetadata, ptr BlockPointer, block Block) (PrefetchStatus, error) {<add>kmd KeyMetadata, ptr BlockPointer, block Block, doSync bool) (<add>PrefetchStatus, error) {<keep>// Attempt to retrieve the block from the cache. This might be a specific<keep>// type where the request blocks are CommonBlocks, but that direction can<keep>// Set correctly. The cache will never have CommonBlocks.", "output": "Can you make this accept an action instead?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>var (<keep>peerAttempt  int<keep>peersResults int<del>resultC      = make(chan retrievalResult, maxSelects)<add>resultC      = make(chan retrievalResult, 2)<keep>)<keep>requestAttempt := 0", "output": "why is a buffered channel larger than 1 needed here? the separate goroutines can just try to write to the channel with a select-default block, and then it is not needed. i find the current implementation a bit convoluted, maybe we could simplify it a bit? not sure why it is needed for example to communicate an empty result. these patterns can be simplified using waitgroups"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>// +build !windows<add><add>// Copyright 2020 Antrea Authors<add>//<add>// Licensed under the Apache License, Version 2.0 (the \"License\");<add>// you may not use this file except in compliance with the License.<add>// You may obtain a copy of the License at<add>//<add>//     http://www.apache.org/licenses/LICENSE-2.0<add>//<add>// Unless required by applicable law or agreed to in writing, software<add>// distributed under the License is distributed on an \"AS IS\" BASIS,<add>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<add>// See the License for the specific language governing permissions and<add>// limitations under the License.<add><add>package lib", "output": "could we add this file only when we need one?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>default ExpireSnapshots expireSnapshots(Table table) {<keep>throw new UnsupportedOperationException(this.getClass().getName() + \" does not implement expireSnapshots\");<keep>}<add><add>/**<add>* Instantiates an action to remove all the files reachable from given metadata location.<add>*/<add>default RemoveReachableFiles removeReachableFiles(String metadataLocation) {<add>throw new UnsupportedOperationException(this.getClass().getName() + \" does not implement \" +<add>RemoveReachableFiles.class.toString());<add>}<keep>}", "output": "nit: the others use the method name in the api and not the class name of the api"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>};<keep>xwayland->server = wlr_xwayland_server_create(wl_display, &options);<keep>if (xwayland->server == NULL) {<del>free(xwayland->server);<add>free(xwayland);<keep>return NULL;<keep>}", "output": "Typo: this should free `xwayland` instead"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>expect(doc).to.exist;<keep>cursor.close();<keep>}<del>throw new Error('expected closing the cursor to break iteration');<add>throw new MongoError('expected closing the cursor to break iteration');<keep>} catch (e) {<keep>expect(e).to.be.an.instanceOf(MongoError);<keep>}", "output": "this change looks wrong to me. I think the test is trying to signal that something went wrong by throwing the `Error` here, otherwise the `catch` below will swallow it."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>mactex = 'BasicTeX.pkg'<keep># TODO(craigcitro): Confirm that this will route us to the<keep># nearest mirror.<del>sh.cmd 'wget http://mirror.ctan.org/systems/mac/mactex/'\\<del>\"#{mactex} -O \\\"/tmp/#{mactex}\\\"\"<add>sh.cmd 'curl -fLo \\\"/tmp/#{mactex}\\\" --retry 3 http://mirror.ctan.org/systems/mac/mactex/'\\<add>'#{mactex}'<keep>sh.echo 'Installing OS X binary package for MacTeX'<keep>sh.cmd \"sudo installer -pkg \\\"/tmp/#{mactex}\\\" -target /\"", "output": "Pretty sure the single quotes here should be double quotes, single quotes are not expanded by the shell."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>type ValueExpression struct {<keep>String  string<keep>FString *FString<del>Int     *struct {<del>Int int<del>} // Should just be *int, but https://github.com/golang/go/issues/23498 :(<add>// These are true if this represents one of the boolean singletons<add>True  bool<add>False bool<add>None  bool<add>// True if the Int field is set; this helps us distinguish values of 0.<add>IsInt    bool<add>Int      int<keep>Bool     string<keep>List     *List<keep>Dict     *Dict", "output": "Do we still need this?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>.format(\"iceberg\")<keep>.option(SparkWriteOptions.REWRITTEN_FILE_SCAN_TASK_SET_ID, groupID)<keep>.option(SparkWriteOptions.TARGET_FILE_SIZE_BYTES, writeMaxFileSize())<add>.option(SparkWriteOptions.DISTRIBUTION_MODE, \"none\")<keep>.mode(\"append\")<keep>.save(table.name());", "output": "Still request a local sort for bin-packing based on the defined table sort order."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>void Parser::Message(const std::string &msg) {<add>#ifndef FLATBUFFERS_PLATFORM_NO_FILE_SUPPORT<keep>error_ = file_being_parsed_.length() ? AbsolutePath(file_being_parsed_) : \"\";<add>#else // FLATBUFFERS_PLATFORM_NO_FILE_SUPPORT<add>error_ = file_being_parsed_.length() ? file_being_parsed_ : \"\";<add>#endif // FLATBUFFERS_PLATFORM_NO_FILE_SUPPORT<keep>// clang-format off<keep>#ifdef _WIN32<keep>error_ += \"(\" + NumToString(line_) + \")\";  // MSVC alike", "output": "Looks more appropriate to stick this in `AbsolutePath`.. actually that already has `FLATBUFFERS_NO_ABSOLUTE_PATH_RESOLUTION`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>require := require.New(t)<keep>bc, roll := makeChain(t)<keep>rc := &roundCalculator{bc, true, roll, bc.CandidatesByHeight, 0}<del>proposer, err := rc.calculateProposer(5, 1, []string{\"1\", \"2\", \"3\", \"4\", \"5\"})<add>_, err := rc.calculateProposer(5, 1, []string{\"1\", \"2\", \"3\", \"4\", \"5\"})<keep>require.Error(err)<keep>var validDelegates [24]string<keep>for i := 0; i < 24; i++ {<keep>validDelegates[i] = identityset.Address(i).String()<keep>}<del>proposer, err = rc.calculateProposer(5, 1, validDelegates[:])<add>proposer, err := rc.calculateProposer(5, 1, validDelegates[:])<keep>require.NoError(err)<keep>require.Equal(validDelegates[6], proposer)", "output": "assignments should only be cuddled with other assignments (from `wsl`)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>//           May be missing, but should be present when data is.<keep>//   - refs: The list of references to the block, encoded as a serialized<keep>//           blockRefInfo. May be missing.<add>//   - f:    Presence of this file indicates the block has been successfully<add>//           flushed to the server.  However, the data might still be<add>//           in the store.<keep>//<keep>// Future versions of the disk store might add more files to this<keep>// directory; if any code is written to move blocks around, it should", "output": "can you put this flag in `blockRefInfo` instead? It would be a shame to add one more file per block, especially since we've run into inode limits. I guess `blockRefInfo` should maybe then be renamed to `blockInfo` or something. But we're stuck with the filename."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>atp->needs_shmem = false;<keep>}<keep>}<add>if (rp->rr_sim_misses_deadline) return false;<add>// Don't schedule if the result is simulated to miss its deadline<keep>if (rp->schedule_backoff > gstate.now) return false;<keep>if (rp->uses_gpu()) {<keep>if (gpu_suspend_reason) return false;", "output": "So, such tasks that could possibly not meet the deadline will never have a chance to run? I think this is not nice behavior, especially for those projects who has sometimes some very small tasks after the big one."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>klog.V(4).Info(log(\"created path successfully [%s]\", dataDir))<add>mounter.MetricsProvider = NewMetricsCsi(volumeHandle, dir, csiDriverName(driverName))<add><keep>// persist volume info data for teardown<keep>node := string(p.host.GetNodeName())<keep>volData := map[string]string{", "output": "Is it possible to import from k8s instead of copy in? :)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return sh.RunV(cmdParts[0], cmdParts[1:]...)<keep>}<add>// SOCKS5 builds and starts SOCKS5 service with terms accepted<add>func SOCKS5() error {<add>if err := sh.RunV(\"bin/build\"); err != nil {<add>return err<add>}<add>cmd := \"build/myst/myst service --agreed-terms-and-conditions socks5\"<add>if runtime.GOOS == \"darwin\" {<add>cmd = \"sudo \" + cmd<add>}<add>cmdParts := strings.Split(cmd, \" \")<add>return sh.RunV(cmdParts[0], cmdParts[1:]...)<add>}<add><keep>// CLI builds and runs myst CLI<keep>func CLI() error {<keep>if err := sh.RunV(\"bin/build\"); err != nil {", "output": "Does `sudo` required for `darwin` only? Don't we need it for `linux` too?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>from google.cloud.forseti.services.inventory.base import crawler<keep>from google.cloud.forseti.services.inventory.base import gcp<keep>from google.cloud.forseti.services.inventory.base import resources<add>from google.cloud.forseti.common.util import log_util<add><add>LOGGER = log_util.get_logger(__name__)<keep>class CrawlerConfig(crawler.CrawlerConfig):", "output": "If the logger isn't used, it probably doesn't need to be added."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>func (s *HandlerTestSuite) TestSendResponse() {<keep>emptyUpdate := new(cache.WorkloadUpdate)<keep>s.stream.EXPECT().Send(gomock.Any()).Times(0)<del>err := s.h.sendResponse(emptyUpdate, s.stream)<add>err := s.h.sendX509SVIDResponse(emptyUpdate, s.stream)<keep>s.Assert().Error(err)<del>resp, err := s.h.composeResponse(s.workloadUpdate())<add>resp, err := s.h.composeX509SVIDResponse(s.workloadUpdate())<keep>s.Require().NoError(err)<keep>s.stream.EXPECT().Send(resp)<del>err = s.h.sendResponse(s.workloadUpdate(), s.stream)<add>err = s.h.sendX509SVIDResponse(s.workloadUpdate(), s.stream)<keep>s.Assert().NoError(err)<keep>}", "output": "Tests for JWT handler functionality?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>window.appMode = 'standalone';<add><add>import('./site');", "output": "I believe this whole file can be deleted now."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>// Startup script checking.<del>if !sourceExists(ci.StartupScript) {<add>if ci.StartupScript != \"\" && !w.sourceExists(ci.StartupScript) {<keep>return fmt.Errorf(\"cannot create instance: file not found: %s\", ci.StartupScript)<keep>}", "output": "Are you making it so startup script HAS to be in sources?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if (lane_data.back().tag == TurnLaneType::uturn)<keep>return findBestMatchForReverse(lane_data[lane_data.size() - 2].tag, intersection);<del>BOOST_ASSERT(lane_data.front().tag == TurnLaneType::uturn);<del>return findBestMatchForReverse(lane_data[1].tag, intersection);<add>// TODO(mokob): #2730 have a look please<add>// BOOST_ASSERT(lane_data.front().tag == TurnLaneType::uturn);<add>// return findBestMatchForReverse(lane_data[1].tag, intersection);<add>//<add>if (lane_data.front().tag == TurnLaneType::uturn)<add>return findBestMatchForReverse(lane_data[1].tag, intersection);<add><add>return findBestMatch(data.tag, intersection);<keep>}();<keep>std::size_t match_index = std::distance(intersection.begin(), best_match);<keep>all_simple &= (matched_indices.count(match_index) == 0);", "output": "Hm. This could be a case of left-sided driving, having u-turn lanes on the right side. Good catch, but looks good to me."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>SYCL::SYCLDevice::SYCLDevice(const sycl::device_selector& selector)<keep>: m_device(selector.select_device()) {}<add>SYCL::SYCLDevice::SYCLDevice(size_t id) {<add>std::vector<sycl::device> gpu_devices =<add>sycl::device::get_devices(sycl::info::device_type::gpu);<add>if (id >= gpu_devices.size()) {<add>std::stringstream error_message;<add>error_message << \"Requested GPU with id \" << id << \" but only \"<add><< gpu_devices.size() << \" GPU(s) available!\\n\";<add>Kokkos::abort(error_message.str().c_str());<add>}<add>m_device = gpu_devices[id];<add>}<add><keep>sycl::device SYCL::SYCLDevice::get_device() const { return m_device; }<keep>void SYCL::impl_initialize(SYCL::SYCLDevice d) {", "output": "Throw an exception instead"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>Server string `json:\"server\"`<keep>// Vault URL path to the certificate role<keep>Path string `json:\"path\"`<add>// Base64 encoded CA bundle to validate Vault server certificate. Only used<add>// if the Server URL is using HTTPS protocol. This parameter is ignored for<add>// plain HTTP protocol connection. If not set the system root certificates<add>// are used to validate the TLS connection.<add>CABundle []byte `json:\"caBundle\"`<keep>}<keep>// Vault authentication  can be configured:", "output": "Small nit, and sorry for not spotting sooner.. this should have `omitempty` on it, else when marshalling nil values into json, it will be `caBundle: null` which trips up some JSON parsers"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"hyperframe>=5.0, <6\",<keep>\"jsbeautifier>=1.6.3, <1.7\",<keep>\"kaitaistruct>=0.7, <0.8\",<add>\"ldap3>=2.2.0, <2.2.1\",<keep>\"passlib>=1.6.5, <1.8\",<keep>\"pyasn1>=0.1.9, <0.3\",<keep>\"pyOpenSSL>=16.0, <17.1\",", "output": "Is there any issue with 2.2.3? If not this should be `<2.3`.  "}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>* @return a {@link ManifestReader}<keep>*/<keep>public static ManifestReader read(ManifestFile manifest, FileIO io, Map<Integer, PartitionSpec> specsById) {<add>Preconditions.checkArgument(manifest.content() == ManifestContent.DATA,<add>\"Cannot read a delete manifest with a ManifestReader: %s\", manifest);<keep>InputFile file = io.newInputFile(manifest.path());<keep>InheritableMetadata inheritableMetadata = InheritableMetadataFactory.fromManifest(manifest);<keep>return new ManifestReader(file, specsById, inheritableMetadata);", "output": "For my understanding, the DATA manifest & DELETE manifest could share the same read / write path so I think we could use the common reader+writer. Is there any other reason that we need to make them separate paths ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>from mmdet.core import tensor2imgs<del>def single_gpu_test(model, data_loader, show=False, out_dir=None):<add>def single_gpu_test(model,<add>data_loader,<add>show=False,<add>out_dir=None,<add>score_thr=0.3):<keep>model.eval()<keep>results = []<keep>dataset = data_loader.dataset", "output": "During testing, we adopt the score threshold specified in the config file. Here the threshold is only used for visualization, and the variable name `score_thr` can be misleading. Renaming it to `show_score_thr` would be better."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>{ .name = \"label-io\", .key = 'l', .has_arg = 0,<keep>.usage = \"Label output by rank\",<keep>},<add>{ .name = \"verbose\", .key = 'v', .has_arg = 0,<add>.usage = \"Increase verbosity\" },<keep>{ .name = \"quiet\", .key = 'q', .has_arg = 0,<keep>.usage = \"Suppress warnings written to stderr from flux-job\",<keep>},", "output": "commit message, \"currently ignored\"? (-ed)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>info (message, type, duration) {<keep>const isComplexMessage = typeof message === 'object'<add>duration = typeof duration === 'undefined' ? 3000 : duration<keep>this.setState({<keep>info: {", "output": "how about a default parameter instead?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>//<keep>// URLs<keep>//<del>// For pubsub.OpenTopic/Subscription URLs, azurepubsub registers for the scheme<del>// \"azuresb\". The Service Bus Connection String defaults to the environment<del>// variable \"SERVICEBUS_CONNECTION_STRING\". For details on the format of the<del>// URL, see URLOpener.<add>// For pubsub.OpenTopic and pubsub.OpenSubscription, azurepubsub registers<add>// for the scheme \"azuresb\".<add>// The default URL opener will use a Service Bus Connection String based on<add>// the environment variable \"SERVICEBUS_CONNECTION_STRING\".<add>// To customize the URL opener, or for more details on the URL format,<add>// see URLOpener.<add>// See https://godoc.org/gocloud.dev#hdr-URLs for background information.<keep>//<keep>// As<keep>//", "output": "Probably in another PR, I think the package should be renamed to `servicebus` to be consistent."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>private final Accessor<InternalRow>[] accessors;<keep>@SuppressWarnings(\"unchecked\")<del>PartitionKey(PartitionSpec spec) {<add>PartitionKey(PartitionSpec spec, Schema inputSchema) {<keep>this.spec = spec;<keep>List<PartitionField> fields = spec.fields();", "output": "Can you add back these newlines? We try to avoid non-functional changes like this because they can cause commit conflicts."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>def post_build(self, p, pay):<keep>p += pay<keep>if self.len is None:<del>l = len(p)-4<del>p = p[:2]+chr(l&0xff)+chr((l>>8)&0xff)+p[4:]<add>p = p[:2] + struct.pack(\"<H\", len(pay)) + p[4:]<keep>return p", "output": "@p-l- Hey it seems that this was len-4 ?!"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// Disable cache always<keep>$this->storagePath = null;<add>// Prefix all assets<add>if($localPath) {<add>if (substr($localPath, -1) !== '/') {<add>$localPath = $localPath.'/';<add>}<add>$assets = array_map(function($asset) use ($localPath) {<add>if (substr($asset, 0, 1) === '@') return $asset;<add>return $localPath.$asset;<add>}, $assets);<add>}<add><keep>list($assets, $extension) = $this->prepareAssets($assets);<keep>$rewritePath = File::localToPublic(dirname($destination));", "output": "Add a space between if and opening parenthesis please (i.e. `if (`)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>rb.setQuery(new BoostQuery(elevation.includeQuery, 0f));<keep>} else {<keep>BooleanQuery.Builder queryBuilder = new BooleanQuery.Builder();<del>queryBuilder.add(rb.getQuery(), BooleanClause.Occur.SHOULD);<add>BooleanClause.Occur queryOccurrence = params.getBool(QueryElevationParams.ELEVATE_ONLY_DOCS_MATCHING_QUERY, false) ?<add>BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST;<add>queryBuilder.add(rb.getQuery(), queryOccurrence);<keep>queryBuilder.add(new BoostQuery(elevation.includeQuery, 0f), BooleanClause.Occur.SHOULD);<keep>if (elevation.excludeQueries != null) {<keep>if (params.getBool(QueryElevationParams.MARK_EXCLUDES, false)) {", "output": "@tkaessmann when I ran tests I saw this line has a bug. It inverts the SHOULD and MUST. Hopefully I fixed it and merged it without the bug."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// wait for the txids and check balances<keep>_, curRound := fixture.GetBalanceAndRound(account0)<del>confirmed := fixture.WaitForAllTxnsToConfirm(curRound+5, txids)<add>confirmed := fixture.WaitForAllTxnsToConfirm(curRound+10, txids)<keep>a.True(confirmed, \"txgroup\")<keep>for i, acct := range accts {", "output": "I can't see any reason why this would fix a failure in `a.True(confirmed, \"txgroup\")`. We might have an issue elsewhere, but increasing the wait time wouldn't help."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>Inbounds  Inbounds<keep>Outbounds Outbounds<del>// Filter and Interceptor that will be applied to all outgoing and incoming<del>// requests respectively.<del>Filter      transport.Filter<del>Interceptor transport.Interceptor<add>// Filters and Interceptors that will be applied to all outgoing and<add>// incoming requests respectively.<add>Filters      Filters<add>Interceptors Interceptors<keep>Tracer opentracing.Tracer<keep>}", "output": "What's the motivation behind switching to plural here? I think we want singular cc @abhinav"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>case FLOAT:<keep>return leaf.getLiteral();<keep>case DATE:<del>return daysFromTimestamp((Timestamp) leaf.getLiteral());<add>return daysFromDate((Date) leaf.getLiteral());<keep>case TIMESTAMP:<keep>return microsFromTimestamp((Timestamp) LITERAL_FIELD.get(leaf));<keep>case DECIMAL:", "output": "I think we should check the type returned by `getLiteral` and handle that here. Then we won't need separate code for different versions."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>if (iss.Spec.ACME != nil && iss.Spec.ACME.PrivateKey.Name == secret.Name) ||<keep>(iss.Spec.CA != nil && iss.Spec.CA.SecretName == secret.Name) ||<del>(iss.Spec.Vault != nil && iss.Spec.Vault.Auth.TokenSecretRef.Name == secret.Name) {<add>(iss.Spec.Vault != nil && iss.Spec.Vault.Auth.TokenSecretRef != nil &&<add>iss.Spec.Vault.Auth.TokenSecretRef.Name == secret.Name) ||<add>(iss.Spec.Vault != nil && iss.Spec.Vault.Auth.Kubernetes != nil &&<add>iss.Spec.Vault.Auth.Kubernetes.SecretRef.Name == secret.Name) ||<add>(iss.Spec.Vault != nil && iss.Spec.Vault.Auth.AppRole != nil &&<add>iss.Spec.Vault.Auth.AppRole.SecretRef.Name == secret.Name) {<keep>affected = append(affected, iss)<keep>continue<keep>}", "output": "Double check the issuers package too :)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>tls.log_master_secret.close()<keep>with open(logfile, \"rb\") as f:<del>assert f.read().count(b\"CLIENT_RANDOM\") >= 2<add>assert f.read().count(b\"SERVER_HANDSHAKE_TRAFFIC_SECRET\") >= 2<keep>tls.log_master_secret = _logfun", "output": "Does this mean the content changed with the new pyopenssl version? Is Wireshark already compatible with this new format?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>links.append(default_link)<keep>self.log.debug('Total mirrors: %d', len(links))<keep>return links<add><add><add>class JavaEnv(object):<add>def get_additional_classpath(self):<add>pass<add><add>def get_cp_from_files(self):<add>pass<add><add>def get_files_from_cp(self):<add>pass", "output": "If only Gatling uses it, can we skip introducing new entity for now? Looks like overkill..."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>assert_response :redirect<keep>end<add>it 'should update retry_count' do<add>login_as admin<add>job = create(:fetch_job, repository: create(:repository))<add>put admin_job_path(job), job: { retry_count: 3 }<add>job.reload.retry_count.must_equal 3<add>end<add><keep>it 'should delete job' do<keep>login_as admin<keep>job = create(:fetch_job, repository: create(:repository))", "output": "Try to use factory association declaration for default values, so it could minimal the line length. You may write in fetch_job factory like association :repository, factory: :repository."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>//  along with the Nethermind. If not, see <http://www.gnu.org/licenses/>.<keep>using Nethermind.Blockchain;<add>using Nethermind.Blockchain.Bloom;<keep>using Nethermind.Blockchain.Filters;<keep>using Nethermind.Blockchain.Receipts;<keep>using Nethermind.Blockchain.TxPools;", "output": "do not toucm NDM please - there will be lots of conflicts"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>namespace lbann {<del>lbann_comm* initialize(int& argc, char**& argv, int seed) {<add>lbann_comm_ptr initialize(int& argc, char**& argv, int seed) {<keep>// Initialize Elemental.<keep>El::Initialize(argc, argv);<keep>// Create a new comm object.<keep>// Initial creation with every process in one model.<del>auto* comm = new lbann_comm(0);<add>auto comm = lbann_comm_ptr{new lbann_comm(0), &lbann::finalize };<add><keep>#if defined(LBANN_TOPO_AWARE)<keep>// Determine the number of NUMA nodes present.<keep>hwloc_topology_t topo;", "output": "It bothers me that the user calls `initialize` without also calling `finalize`. It seems to me that we're essentially making `lbann_comm` a singleton object. Going further down this path, we would put `initialize` inside `lbann_comm`'s constructor and `finalize` in the destructor. This has it's own weirdness - the user must make sure it's lifespan matches the beginning and end of the program. We may also run into the case where someone might want multiple instances of `lbann_comm`, but this is not too important."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>KubeSharedInformerFactory: kubeSharedInformerFactory,<keep>SharedInformerFactory:     sharedInformerFactory,<keep>GWShared:                  gwSharedInformerFactory,<del>Namespace:                 opts.Namespace,<del>Clock:                     clock.RealClock{},<del>Metrics:                   metrics.New(log, clock.RealClock{}),<add>// TODO (@jakexks) / code reviewer: should this be automatically enabled or disabled based on discovering the gateway<add>// api or a flag?<add>GatewaySolverEnabled: true,<add>Namespace:            opts.Namespace,<add>Clock:                clock.RealClock{},<add>Metrics:              metrics.New(log, clock.RealClock{}),<keep>ACMEOptions: controller.ACMEOptions{<keep>HTTP01SolverImage:                 opts.ACMEHTTP01SolverImage,<keep>HTTP01SolverResourceRequestCPU:    HTTP01SolverResourceRequestCPU,", "output": "I suggest that we rely on `--controllers='*,gateway-shim'` for now, and we can then move from `--controllers='*,gateway-shim'` to automatically enabling the Gateway API support on startup using the discovery API in 1.6 or 1.7, what do you think? Note that the logic I wrote in e5436df521015057e77de3fe02c174ea8a863b93 should also use this `GatewaySolverEnabled` flag I think."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>}<keep>#    ifdef X64<del>if (num_raw >> 24 == 0x2)<add>if (num_raw & SYSCALL_NUM_MARKER_BSD)<keep>return (int)(num_raw & 0xffffff); /* Drop BSD bit */<keep>else<keep>num = (int)num_raw; /* Keep Mach and Machdep bits */", "output": "Convention is to use TEST"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>{<keep>if (ReturnType.Body != null && ReturnType.Headers != null)<keep>{<del>return $\"Microsoft.Rest.HttpOperationResponse<{ReturnType.Body.AsNullableType(HttpMethod != HttpMethod.Head)},{ReturnType.Headers.AsNullableType(HttpMethod != HttpMethod.Head)}>\";<add>return $\"Microsoft.Rest.HttpOperationResponse<{ReturnType.Body.AsNullableType(HttpMethod != HttpMethod.Head && IsXNullableReturnType)},{ReturnType.Headers.AsNullableType(HttpMethod != HttpMethod.Head)}>\";<keep>}<keep>if (ReturnType.Body != null)<keep>{<del>return $\"Microsoft.Rest.HttpOperationResponse<{ReturnType.Body.AsNullableType(HttpMethod != HttpMethod.Head)}>\";<add>return $\"Microsoft.Rest.HttpOperationResponse<{ReturnType.Body.AsNullableType(HttpMethod != HttpMethod.Head && IsXNullableReturnType)}>\";<keep>}<keep>if (ReturnType.Headers != null)<keep>{<del>return $\"Microsoft.Rest.HttpOperationHeaderResponse<{ReturnType.Headers.AsNullableType(HttpMethod != HttpMethod.Head)}>\";<add>return $\"Microsoft.Rest.HttpOperationHeaderResponse<{ReturnType.Headers.AsNullableType(HttpMethod != HttpMethod.Head && IsXNullableReturnType)}>\";<keep>}<keep>return \"Microsoft.Rest.HttpOperationResponse\";", "output": "nullability does not apply to headers type (that is always an object)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>public void displayMessageSubject(String subject) {<keep>if (mDisplayMode == DisplayMode.MESSAGE_VIEW) {<keep>mActionBarSubject.setText(subject);<add>} else {<add>mActionBarSubject.showSubjectInMessageHeader();<keep>}<keep>}", "output": "What is is subject when it's not the email subject. Why are we having to do this crap? What's calling this with an empty string?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>)<keep>const (<del>//KeyNode represents the key values used for specifying the Node Affinity<add>//KeyNodeHostname represents the key values used for specifying the Node Affinity<keep>// based on the hostname<del>KeyNode = \"kubernetes.io/hostname\"<add>KeyNodeHostname = \"kubernetes.io/hostname\"<keep>)<keep>// NewProvisioner will create a new Provisioner object and initialize", "output": "there seems to be one KeyNode in kubernetes.go of PV.. would it make sense to use it?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>package dto<add><add>type ClientPromise struct {<add>SerialNumber int<add>IssuerId int<add>BenefiterId int<add>Amount int<add>}", "output": "- Use type from `service_discovery/dto/price.go` - Rename `Price` -> `Money`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>@SuppressWarnings(\"unchecked\")<keep>Map<String, String> cseContext =<keep>JsonUtils.readValue(strCseContext.getBytes(StandardCharsets.UTF_8), Map.class);<del>invocation.setContext(cseContext);<add>invocation.addContext(cseContext);<keep>}<keep>public String getContext(String key) {", "output": "highway have the same problem we can add a new method in invocation: mergeContext 1.if new context have more items, then addAll to new context, and replace old context 2.if new context have less items, then allAll to old context directly."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>type controller struct {<keep>// the policies to use to define readiness - named here to make testing simpler<del>policyChain              policies.Chain<del>certificateLister        cmlisters.CertificateLister<del>certificateRequestLister cmlisters.CertificateRequestLister<del>secretLister             corelisters.SecretLister<del>client                   cmclient.Interface<del>gatherer                 *policies.Gatherer<add>policyChain                      policies.Chain<add>certificateLister                cmlisters.CertificateLister<add>certificateRequestLister         cmlisters.CertificateRequestLister<add>secretLister                     corelisters.SecretLister<add>client                           cmclient.Interface<add>gatherer                         *policies.Gatherer<add>defaultRenewBeforeExpiryDuration time.Duration<keep>}<keep>func NewController(", "output": "Make the flag derived default available in the readiness controller"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>.option('--disable_brave_extension', 'disable loading the Brave extension')<keep>.option('--disable_pdfjs_extension', 'disable loading the PDFJS extension')<keep>.option('--enable_brave_update', 'enable brave update')<add>.option('--channel <target_chanel>', 'target channel to start', /^(beta|dev|nightly|release)$/i, 'release')<keep>.arguments('[build_config]')<keep>.action(start)", "output": "I wonder if the default here should be nightly? I won't block on that though just a question for a follow up."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>const formPropsSet = new Set([<add>'form',<add>'formAction',<add>'formEncType',<add>'formMethod',<add>'formNoValidate',<add>'formTarget',<add>]);<add><add>export default function getFormProps(props) {<add>return Object.keys(props).reduce((prev, key) => {<add>if (formPropsSet.has(key)) {<add>// eslint-disable-next-line no-param-reassign<add>prev[key] = props[key];<add>}<add>return prev;<add>}, {});<add>}", "output": "Good call. Makes we wonder if we should do this with the ARIA props."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>import { always } from 'ramda';<add><add>/**<add>* A function that returns new empty string.<add>*<add>* @func stubString<add>* @memberOf RA<add>* @since {@link https://char0n.github.io/ramda-adjunct/2.1.0|v2.1.0}<add>* @category Function<add>* @sig ... -> ''<add>* @return {''}<add>* @example<add>*<add>* RA.stubString(); //=> ''<add>* RA.stubString(1, 2, 3); //=> ''<add>*/<add>const stubString = always('');<add><add>export default stubString;", "output": "A function that returns empty string."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<del>//snippet-sourcedescription:[UpdateAccessKey.java demonstrates how to update the status of an access key for an AWS Identity and Access Management (IAM) user.]<add>//snippet-sourcedescription:[UpdateAccessKey.java demonstrates how to update the status of an access key for an AWS Identity and Access Management (AWS IAM) user.]<keep>//snippet-keyword:[AWS SDK for Java v2]<keep>//snippet-keyword:[Code Sample]<keep>//snippet-service:[AWS IAM]", "output": "AWS Identity and Access Management (IAM)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>package feedbackmock<add><add>import (<add>\"context\"<add><add>feedbackv1 \"github.com/lyft/clutch/backend/api/feedback/v1\"<add>\"github.com/lyft/clutch/backend/service/feedback\"<add>)<add><add>type svc struct{}<add><add>func (s svc) SubmitFeedback(ctx context.Context, id string, feedback *feedbackv1.Feedback, metadata *feedbackv1.FeedbackMetadata) error {<add>return nil<add>}<add><add>func New() feedback.Service {<add>return &svc{}<add>}", "output": "do we want to register this in the mock server for testing?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># Public: Get the Reader associated with this document<keep>attr_reader :reader<add># Public: Get/Set the PathResolver instance used to resolve paths in this Document.<add>attr_reader :path_resolver<add><keep># Public: Get the Converter associated with this document<keep>attr_reader :converter", "output": "Should we expose this attribute in the Asciidoctor.js API ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>{<keep>@ConfigTitleSection(<del>keyName = \"zalcanoTitle\",<del>name = \"Zalcano\",<del>description = \"\",<del>position = 0<add>keyName = \"zalcanoTitle\",<add>name = \"Zalcano\",<add>description = \"\",<add>position = 0<keep>)<keep>default Title zalcanoTitle()<keep>{", "output": "please resolve the extra indentation"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>public static final String SPLIT_OPEN_FILE_COST = \"read.split.open-file-cost\";<keep>public static final long SPLIT_OPEN_FILE_COST_DEFAULT = 4 * 1024 * 1024; // 4MB<add>public static final String SPLIT_BY_PARTITION = \"read.split.by-partition\";<add>public static final boolean SPLIT_BY_PARTITION_DEFAULT = false;<add><keep>public static final String PARQUET_VECTORIZATION_ENABLED = \"read.parquet.vectorization.enabled\";<keep>public static final boolean PARQUET_VECTORIZATION_ENABLED_DEFAULT = false;", "output": "Why do we need this flag? can this be detected if the table is bucketed/partitioned and enabled/disabled automatically? Is this for backwards compatibility?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return m, err<keep>}<add><add>func NewEmpty () (m upstreamca.UpstreamCa) {<add>return &memoryPlugin{<add>mtx:&sync.RWMutex{},<add>}<add>}", "output": "will your editor integrate `gofmt`, `goimports`, etc...?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>use Ergonode\\SharedKernel\\Domain\\AggregateId;<keep>use Symfony\\Component\\Messenger\\Stamp\\HandledStamp;<keep>use Ergonode\\BatchAction\\Domain\\Repository\\BatchActionRepositoryInterface;<add>use Ergonode\\Core\\Application\\Security\\User\\CachedUser;<add>use Ergonode\\Account\\Domain\\Repository\\UserRepositoryInterface;<add>use Ergonode\\SharedKernel\\Domain\\Aggregate\\UserId;<add>use Ergonode\\BatchAction\\Domain\\Event\\BatchActionEndedEvent;<add>use Ergonode\\Core\\Application\\Messenger\\Stamp\\UserStamp;<keep>class BatchActionTransport implements TransportInterface<keep>{", "output": "As far as I can see you're not rollbacking transaction anywhere. This could potentially cause further issues(and very hard to debug ones) with not synchronized transactions between message handling. Is the transaction required in this place anyway? You seem only to be fetching data here. ack method is performing some updates so it makes sense"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>cast = image.astype(np.float32)<keep>assert cast.dtype == np.float32<add># Test .astype for conversion between vector-like pixel types.<add>components = 3<add>numpyImage = np.random.randint(0, 256, (12,8,components)).astype(np.uint8)<add>input_image = itk.image_from_array(numpyImage, is_vector=True)<add>if (type(input_image) == itk.Image[itk.RGBPixel[itk.UC],2] and<add>hasattr(itk.CastImageFilter, 'IRGBUC2IVF32')):<add>output_pixel_type = itk.Vector[itk.F,components]<add>output_image = input_image.astype(output_pixel_type)<add>assert type(output_image) == itk.Image[output_pixel_type, 2]<add><keep>except ImportError:<keep>print(\"NumPy not imported. Skipping BridgeNumPy tests\")<keep># Numpy is not available, do not run the Bridge NumPy tests", "output": "Unrelated to this PR, we should remove this exception. We now require `numpy`."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>export function Component(props, context) {<keep>this.props = props;<keep>this.context = context;<add>// this.constructor // When component is functional component, this is reseted to functional component<keep>// if (this.state==null) this.state = {};<keep>// this.state = {};<keep>// this._dirty = true;", "output": "Nit: Past tense of `reset` is also `reset`."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import (<keep>\"context\"<add>\"fmt\"<keep>\"github.com/ledgerwatch/turbo-geth/common\"<keep>)<del>// Etherbase is the address that mining rewards will be send to<add>// Coinbase is the address that mining rewards will be sent to<keep>func (api *APIImpl) Coinbase(_ context.Context) (common.Address, error) {<add>if api.ethBackend == nil {<add>// We're running in --chaindata mode or otherwise cannot get the backend<add>return common.Address{}, fmt.Errorf(\"eth_coinbase function is not available\")<add>}<keep>return api.ethBackend.Etherbase()<keep>}", "output": "Could you add some extra text here, so that it reads \"eth_coinbase function is not available, please use --private.api.addr option instead of --chaindata option\", so that it is clear that the function can work, but different options"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>httpHandler = &requestRecorder{}<keep>go func() {<keep>defer GinkgoRecover()<del>http.Serve(tcpListener, httpHandler)<add>// TODO: Investigate why this call sometimes returns an error.<add>_ = http.Serve(tcpListener, httpHandler)<keep>}()<keep>// Channels to send data to the UsageReporter.", "output": "You can start by logging out the error"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>ticker := time.NewTicker(config.SvcPollInterval())<keep>for {<keep>if err := config.SetConfig(); err != nil {<del>logger.Errorf(err.Error())<add>logger.Fatalf(err.Error())<keep>}<keep>// This sets up the patching system to run in the background.", "output": "This isn't a fatal error, we don't want to crash just because we can't set configs, we have sane defaults set"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>public static double MIN_DIA = 5;<add>protected static boolean fragmentEnabled = false;<add>protected static boolean fragmentVisible = false;<add><keep>long lastWarned = 0;<keep>@Override", "output": "Shouldn't this be in the child and not in the base plugin? Wouldn't having it here enable all derived plugins at once?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// If we have an error, display the DataErrorComponent.<keep>if ( error ) {<del>return ( 'string' !== typeof error ) ? error : getDataErrorComponent( moduleName, error, layoutOptions.inGrid, layoutOptions.fullWidth, layoutOptions.createGrid );<add>return ( 'string' !== typeof error ) ? error : getDataErrorComponent( moduleName, error, layoutOptions.inGrid, layoutOptions.fullWidth, layoutOptions.createGrid, data );<keep>}<keep>// If we have zeroData, display the NoDataComponent.", "output": "This function is also called in various Site Kit module components, where the error object (here `data`) also needs to be passed, otherwise the link to fix the issue won't appear."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>func NewApp(AppRoot string, provider string) (*DdevApp, error) {<keep>// Set defaults.<keep>app := &DdevApp{}<del>app.ConfigPath = filepath.Join(AppRoot, \".ddev\", \"config.yaml\")<keep>app.AppRoot = AppRoot<keep>app.ConfigPath = app.GetConfigPath(\"config.yaml\")", "output": "Good removal here for two reasons: we're redeclaring `app.ConfigPath` immediately below without having used the initial value, and `app.GetConfigPath()` will build the value using the same process as in this line anyway."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// NOTE: The $Format strings are replaced during 'git archive' thanks to the<keep>// companion .gitattributes file containing 'export-subst' in this same<keep>// directory.  See also https://git-scm.com/docs/gitattributes<del>gitVersion   = \"v0.0.0-master+$Format:%h$\"<add>gitVersion   = Default<keep>gitCommit    = \"$Format:%H$\" // sha1 from git, output of $(git rev-parse HEAD)<keep>gitTreeState = \"\"            // state of git tree, either \"clean\" or \"dirty\"<keep>buildDate = \"1970-01-01T00:00:00Z\" // build date in ISO8601 format, output of $(date -u +'%Y-%m-%dT%H:%M:%SZ')<keep>)<add><add>const Default = \"v1.9.0\"", "output": "I feel we should not fix this."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<del>import { options } from 'preact';<add>import { Component, options } from 'preact';<keep>/** @type {number} */<keep>let currentIndex;", "output": "TODO: remove this unused import"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>p2pMsgLatency.WithLabelValues(\"broadcast\", strconv.Itoa(int(broadcast.MsgType)), status).Observe(float64(latency))<keep>}()<keep>if err = proto.Unmarshal(data, &broadcast); err != nil {<del>err = errors.Wrap(err, \"error when marshaling broadcast message\")<del>return<add>return errors.Wrap(err, \"error when marshaling broadcast message\")<keep>}<keep>// Skip the broadcast message if it's from the node itself<keep>rawmsg, ok := p2p.GetBroadcastMsg(ctx)<keep>if !ok {<del>err = errors.New(\"error when asserting broadcast msg context\")<del>return<add>return errors.New(\"error when asserting broadcast msg context\")<keep>}<keep>peerID = rawmsg.GetFrom().Pretty()<keep>if p.host.HostIdentity() == peerID {", "output": "this is golang's named return, err is defined, `return` is equivalent to `return err` the current code has no problem"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>type Info struct {<keep>ID                string   `json:\"server_id\"`<keep>Version           string   `json:\"version\"`<add>GitHash           string   `json:\"git_hash\"`<keep>GoVersion         string   `json:\"go\"`<keep>Host              string   `json:\"host\"`<keep>Port              int      `json:\"port\"`", "output": "nit: how about `GitSHA`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>LOG(INFO) << \"set \" << data.size() << \" expired hosts to offline in meta rocksdb\";<keep>kvstore_->asyncMultiPut(kDefaultSpaceId, kDefaultPartId, std::move(data),<keep>[] (kvstore::ResultCode code) {<del>CHECK_EQ(code, kvstore::ResultCode::SUCCEEDED);<add>if (code != kvstore::ResultCode::SUCCEEDED) {<add>LOG(WARNING) << \"put failed, ret \" << static_cast<int32_t>(code);<add>}<keep>});<keep>}<keep>}", "output": "what to do if some failed? just logging?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>* @self: Repo<keep>* @objtype: Object type<keep>* @sha256: ASCII checksum<del>* @out_variant: (out) (transfer full): Metadata<add>* @out_variant: (out) (nullable) (transfer full): Metadata<keep>* @error: Error<keep>*<keep>* Attempt to load the metadata object @sha256 of type @objtype if it<keep>* exists, storing the result in @out_variant.  If it doesn't exist,<del>* %NULL is returned.<add>* @out_variant will be set to %NULL and the function will still<add>* return TRUE.<keep>*/<keep>gboolean<keep>ostree_repo_load_variant_if_exists (OstreeRepo       *self,", "output": "Hmm, AFAICT `*out_variant` isn't explicitly set to `NULL` in the `ENOENT` case."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>{ /* send SETTINGS and connection-level WINDOW_UPDATE */<del>h2o_iovec_t vec = h2o_buffer_reserve(&conn->_write.buf, SERVER_PREFACE.len);<add>h2o_iovec_t vec = h2o_buffer_try_reserve(&conn->_write.buf, SERVER_PREFACE.len);<add>if (vec.base == NULL) {<add>*err_desc = \"failed to allocate memory\";<add>return H2O_HTTP2_ERROR_PROTOCOL_CLOSE_IMMEDIATELY;<add>}<keep>memcpy(vec.base, SERVER_PREFACE.base, SERVER_PREFACE.len);<keep>conn->_write.buf->size += SERVER_PREFACE.len;<keep>if (conn->http2_origin_frame) {", "output": "I think you missed this."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>options[:order] = \"rand:#{seed}\"<keep>end<add>parser.on('--stress-test LIMIT', Float, 'Repeatedly run randomly selected examples for LIMIT seconds.') do |o|<add>options[:stress_test] = o.to_f<add>end<add><keep>parser.on('-d', '--debugger', 'Enable debugging.') do |o|<keep>options[:debug] = true<keep>end", "output": "I don't think this needs to be a float if its a number of seconds... :)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// The driver sessions spec mandates that we implicitly create sessions for operations<keep>// that are not explicitly provided with a session.<del>let session, opOptions;<add>let session, opOptions, owner;<keep>if (!options.skipSessions && topology.hasSessionSupport()) {<keep>opOptions = args[args.length - 2];<keep>if (opOptions == null || opOptions.session == null) {<del>session = topology.startSession();<add>owner = {};<add>session = topology.startSession({ owner });<keep>const optionsIndex = args.length - 2;<keep>args[optionsIndex] = Object.assign({}, args[optionsIndex], { session: session });<keep>} else if (opOptions.session && opOptions.session.hasEnded) {", "output": "can't this just be left undefined/null?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>Value: metadata.DefaultNetwork.AccessPolicyOracleAddress,<keep>})<add>mmnAddressFlag = altsrc.NewStringFlag(cli.StringFlag{<add>Name:  \"mmn-address\",<add>Usage: \"URL of my.mysterium.network API\",<add>Value: metadata.DefaultNetwork.MMNAddress,<add>})<add><keep>brokerAddressFlag = altsrc.NewStringFlag(cli.StringFlag{<keep>Name:  \"broker-address\",<keep>Usage: \"URI of message broker\",", "output": "This looks a bit cryptic to me, and also it contains a dash. How about `mymysterium.url`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>/// <param name=\"parent\">The parent context.</param><keep>/// <param name=\"traceContext\">The trace context.</param><keep>/// <param name=\"serviceName\">The service name to propagate to child spans.</param><del>internal SpanContext(ISpanContext parent, ITraceContext traceContext, string serviceName)<add>/// <param name=\"spanId\">The propagated span id.</param><add>internal SpanContext(ISpanContext parent, ITraceContext traceContext, string serviceName, ulong? spanId = null)<keep>: this(parent?.TraceId, serviceName)<keep>{<del>SpanId = SpanIdGenerator.ThreadInstance.CreateNew();<add>SpanId = spanId ?? SpanIdGenerator.ThreadInstance.CreateNew();<keep>Parent = parent;<keep>TraceContext = traceContext;<keep>if (parent is SpanContext spanContext)", "output": "Under what circumstance would we have a span id already? Is this for testing purposes?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>// Copyright (c) .NET Foundation. All rights reserved.<add>// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.<add><add>using System;<add><add>namespace Microsoft.AspNetCore.Connections.Features<add>{<add>public interface IConnectionHeartbeatTickFeature<add>{<add>void OnHeartbeat(Action<DateTimeOffset, object> action, object state);<add>}<add>}", "output": "cc @anurse This exists now. Kestrel currently passes the current time to all callbacks as an optimization. Just an FYI."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return c.labels<keep>}<add>// GetPorts gets the ports for a container<add>func (c *Container) GetPorts() []PortBinding {<add>c.lock.RLock()<add>defer c.lock.RUnlock()<add><add>return c.Ports<add>}<add><keep>// HealthStatusShouldBeReported returns true if the health check is defined in<keep>// the task definition<keep>func (c *Container) HealthStatusShouldBeReported() bool {", "output": "Can you rename `Ports` to `PortsUnsafe`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"\"\"Save the current page.\"\"\"<keep>self._widget.triggerPageAction(QWebEnginePage.SavePage)<del>def show_source(self):<add>def show_source(self, pygment):<add>if pygment:<add>self._show_source_pygment()<add>return<add><keep>try:<keep>self._widget.triggerPageAction(QWebEnginePage.ViewSource)<keep>except AttributeError:", "output": "This should be `pygment=False` like in `browsertab.py`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>k.wg.Add(1)<keep>go k.manage()<add>k.AddPeers(k.previouslyConnected()...)<add><keep>go func() {<keep>select {<keep>case <-k.halt:", "output": "this should happen before the `go k.manage()`, otherwise the node will always try the bootnodes first"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>// Copyright 2020 The Swarm Authors. All rights reserved.<add>// Use of this source code is governed by a BSD-style<add>// license that can be found in the LICENSE file.<add><add>package batchstore<add><add>const StateKey = stateKey<add><add>var BatchKey = batchKey", "output": "you could probably use `const` for both?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return Checksum{<keep>Value:   checksum,<keep>Version: payloadVersion,<del>Flavor:  FlavorIEEECRC32OverThriftBinary,<add>Flavor:  FlavorIEEECRC32OverProto3Binary,<keep>}, nil<keep>}", "output": "Just saw this and wasn't able to hold myself from renaming :-)."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>def destroy?<keep>@role.plan.owned_by?(@user.id)<keep>end<add><add>def archive?<add>@role.user_id = @user.id<add>end<keep>end", "output": "Again not 100% sold on the name"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>@Override<keep>public ConnectionType setNetworkConnection(<keep>ConnectionType type) {<del>Map<String, ConnectionType> mode = ImmutableMap.of(\"type\", type);<add>Map<String, Integer> mode = ImmutableMap.of(\"type\", type.getBitMask());<keep>return new ConnectionType(((Number) executeMethod.execute(DriverCommand.SET_NETWORK_CONNECTION,<keep>ImmutableMap<keep>.of(\"parameters\", mode)))", "output": "can you change this instead to just `type.toString()` and then you wouldn't have to expose the getBitMask in the enum. (Alternatively you could have used `type.hashCode()` but that doesn't feel as nice)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>'../../examples/lambdarank/rank.test.query'))<keep>gbm = lgb.LGBMRanker()<keep>gbm.fit(X_train, y_train, group=q_train, eval_set=[(X_test, y_test)],<del>eval_group=[q_test], eval_at=[1, 3], early_stopping_rounds=5, verbose=False,<del>callbacks=[lgb.reset_parameter(learning_rate=lambda x: 0.95 ** x * 0.1)])<del>self.assertLessEqual(gbm.best_iteration_, 12)<del>self.assertGreater(gbm.best_score_['valid_0']['ndcg@1'], 0.6173)<del>self.assertGreater(gbm.best_score_['valid_0']['ndcg@3'], 0.6479)<add>eval_group=[q_test], eval_at=[1, 3], early_stopping_rounds=10, verbose=False,<add>callbacks=[lgb.reset_parameter(learning_rate=lambda x: max(0.01, 0.1 - 0.01 * x))])<add>self.assertLessEqual(gbm.best_iteration_, 25)<add>self.assertGreater(gbm.best_score_['valid_0']['ndcg@1'], 0.60)<add>self.assertGreater(gbm.best_score_['valid_0']['ndcg@3'], 0.60)<keep>def test_regression_with_custom_objective(self):<keep>def objective_ls(y_true, y_pred):", "output": "Can we make these asserts more strict/precise? I remember this test helped to spot the issue of inconsistent results on different platforms due to using `sort` instead of `stable_sort`."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>#include <impl/Kokkos_Tools.hpp><add><add>int main(int argc, char* argv[]) {<add>Kokkos::Tools::initialize(argc, argv);<add>Kokkos::Tools::pushRegion(<add>\"The unanimous Declaration of the thirteen united States of America, \"<add>\"When in the Course of human events, it becomes necessary for one people \"<add>\"to dissolve the political bands which have connected them with another, \"<add>\"and to assume among the powers of the earth, the separate and equal \"<add>\"station to which the Laws of Nature and of Nature's God entitle them, a \"<add>\"decent respect to the opinions of mankind requires that they should \"<add>\"declare the causes which impel them to the separation.\");<add>Kokkos::Tools::popRegion();<add>Kokkos::Tools::finalize();<add>}", "output": "Missing the license"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>def save(self):<keep>\"\"\"Save the key config file.\"\"\"<keep>log.destroy.debug(\"Saving key config to {}\".format(self._configfile))<del>with qtutils.savefile_open(self._configfile, encoding='utf-8') as f:<del>data = str(self)<del>f.write(data)<add><add>try:<add>with qtutils.savefile_open(self._configfile,<add>encoding='utf-8') as f:<add>data = str(self)<add>f.write(data)<add>except OSError as e:<add>message.error(\"Could not save key config: {}\".format(e))<keep>@cmdutils.register(instance='key-config', maxsplit=1, no_cmd_split=True,<keep>no_replace_variables=True)", "output": "`QtOSError` inherits `OSError`, so I don't think it's needed to list them both here."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// Swift class instances are actually pointers, but base class instances<keep>// are inlined at offset 0 in the class data. If we just let base classes<keep>// be dynamic, it would cause an infinite recursion. So we would usually<del>// disable it<del>// But if the base class is a generic type we still need to bind it, and<del>// that is<del>// a good job for dynamic types to perform<del>if (in_value.IsBaseClass()) {<del>CompilerType base_type(in_value.GetCompilerType());<del>if (SwiftASTContext::IsFullyRealized(base_type))<del>return false;<del>}<del>return true;<add>// disable it.<add>return !in_value.IsBaseClass();<keep>}<keep>return var_type.IsPossibleDynamicType(nullptr, false, false, true);<keep>}", "output": "Do you want to make this an assertion instead?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>return decodeStruct(d.s, dec)<keep>}<add><add>// RevisionOn returns whether or not we should write a revision value when we<add>// write a document. It could be either a map or a struct with a revision key or<add>// field named after revField.<add>func (d Document) RevisionOn(revField string) bool {<add>if d.m != nil {<add>_, ok := d.m[revField]<add>return ok<add>}<add>return d.fields.MatchFold(revField) != nil<add>}", "output": "I think this can be called `HasField`, because that's what it's doing. It really is independent of revision."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if (!orphanBlock.outputConnection) {<keep>throw 'Orphan block does not have an output connection.';<keep>}<del>// Attempt to reattach the orphan at the end of the newly inserted<del>// block.  Since this block may be a row, walk down to the end<del>// or to the first (and only) shadow block.<del>var connection = Blockly.Connection.lastConnectionInRow_(<del>childBlock, orphanBlock);<del>if (connection) {<del>orphanBlock.outputConnection.connect(connection);<del>orphanBlock = null;<del>}<keep>} else if (parentConnection.type == Blockly.NEXT_STATEMENT) {<keep>// Statement connections.<keep>// Statement blocks may be inserted into the middle of a stack.", "output": "This check/exception is a guard for the next few lines of code. It shouldn't be necessary now. In fact, I don't think you need the if (parentConnection.type == Blockly.INPUT_VALUE) branch at all."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>end<keep>def update_comment_format(key)<del>\"#{bullet}*#{property_name(key)}* was changed \" + former_value(key) + \"to #{new_value(key)}\"<add>if key !~ /id/<add>\"#{bullet}*#{property_name(key)}* was changed \" + former_value(key) + \"to #{new_value(key)}\"<add>else<add>\"#{bullet}*#{association_name(key)}* was changed \" + former_association_value(key) + \"to #{new_association_value(key)}\"<add>end<keep>end<keep>def bullet", "output": "maybe switch the order in order to make this a positive assertion instead of a negative one? i.e. `if key =~ /id/` first."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>{<keep>RunUI(() => importPeptideSearchDlg.ClickNextButtonNoCheck());<keep>}<del>// Modifications are already set up, so that page should get skipped.<add>// Skip Match Modifications page.<add>RunUI(() =><add>{<add>AssertEx.IsTrue(importPeptideSearchDlg.CurrentPage == ImportPeptideSearchDlg.Pages.match_modifications_page);<add>AssertEx.IsTrue(importPeptideSearchDlg.ClickNextButton());<add>});<keep>RunUI(() => importPeptideSearchDlg.FullScanSettingsControl.PrecursorCharges = new []{2,3,4,5});<keep>RunUI(() => importPeptideSearchDlg.FullScanSettingsControl.PrecursorMassAnalyzer = FullScanMassAnalyzerType.tof);<keep>RunUI(() => importPeptideSearchDlg.FullScanSettingsControl.IonMobilityFiltering.IsUseSpectralLibraryIonMobilities = useDriftTimes);", "output": "You should do: AssertEx.AreEqual(importPeptideSearchDlg.CurrentPage, ImportPeptideSearchDlg.Pages.match_modifications_page);"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>defaultServiceNameDetector struct{}<add><add>// noOp is a Detector that only provides an empty resource.  Used<add>// to disable automatic detection.<add>noOp struct{}<keep>)<keep>var (", "output": "Need to update the doc for `TelemetrySDK` and `Host` structs deleting references from removed functions."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>var (<keep>// runtimeMode tells which mode antctl is running against.<keep>runtimeMode string<add>inPod       bool<keep>)<keep>func init() {<del>if strings.HasPrefix(os.Getenv(\"POD_NAME\"), \"antrea-agent\") {<add>podName, found := os.LookupEnv(\"POD_NAME\")<add>inPod = found && (strings.HasPrefix(podName, \"antrea-agent\") || strings.HasPrefix(podName, \"antrea-controller\"))<add>if strings.HasPrefix(podName, \"antrea-agent\") {<keep>runtimeMode = ModeAgent<keep>} else {<keep>runtimeMode = ModeController", "output": "This will make other pods that run antctl will also connect its localhost? Maybe only do it when it's in antrea-agent and antrea-controller"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>has_many :approvals<keep>has_many :observations<add>has_many :observers, through: :observers, source: :user<keep>has_many :comments<keep># we do not use rolify gem (e.g.) but declare relationship like any other.", "output": "why this recursive relationship definition?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>r.dirtyIfaces.Add(ifaceName)<keep>}<add>func (r *RouteTable) QueueResync() {<add>r.logCxt.Info(\"Queueing a resync.\")<add>r.inSync = false<add>}<add><keep>func (r *RouteTable) Apply() error {<keep>if !r.inSync {<keep>links, err := r.dataplane.LinkList()", "output": "How soon after this will Apply() be called? It would be a shame if there was still a significant delay before a missing or superfluous route was corrected."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>type fakeStorage struct{}<del>func (fs fakeStorage) Store(issuer string, data interface{}) error  { return nil }<del>func (fs fakeStorage) Delete(issuer string, data interface{}) error { return nil }<del>func (fs fakeStorage) Close() error                                 { return nil }<add>func (fs fakeStorage) Store(issuer string, data interface{}) error                         { return nil }<add>func (fs fakeStorage) Delete(issuer string, data interface{}) error                        { return nil }<add>func (fs fakeStorage) Close() error                                                        { return nil }<add>func (fs fakeStorage) StoreSession(bucketName string, key string, value interface{}) error { return nil }<add>func (fs fakeStorage) GetAll(issuer string, data interface{}) error                        { return nil }", "output": "Repeating big interface in many places shows smtg is wrong with design"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>def execute(options)<keep>if options[:mode] == 'plan' || options[:mode] == 'task'<keep>begin<add>if Gem.win_platform?<add># Windows 'fix' for openssl behaving strangely. Prevents very slow operation<add># of random_bytes later when establishing winrm connections from a Windows host.<add># See https://github.com/rails/rails/issues/25805 for background.<add>require 'openssl'<add>OpenSSL::Random.random_bytes(1)<add>end<add><keep>require_relative '../../vendored/require_vendored'<keep>rescue LoadError<keep>raise Bolt::CLIError, \"Puppet must be installed to execute tasks\"", "output": "Given this will 'pause' bolt for a few seconds on older rubies, perhaps emit a debug message saying \"Warming up OpenSSL\" or something to that effect"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>Usage     string<keep>Verbosity cli.Verbosity `short:\"v\" long:\"verbosity\" default:\"warning\" description:\"Verbosity of output (higher number = more output)\"`<keep>CacheDir  string        `short:\"d\" long:\"dir\" default:\"\" description:\"The directory to store cached artifacts in.\"`<del>Port      int           `short:\"p\" long:\"port\" description:\"The port to run the server on\"`<add>Port      int           `short:\"p\" long:\"port\" description:\"The port to run the server on\" default:\"8080\"`<keep>}{<keep>Usage: `<keep>HTTP cache implements a resource based http server that please can use as a cache. The cache supports storing files", "output": "not related to this change?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>var testLogger = new TestApplicationErrorLogger();<keep>var serviceContext = new TestServiceContext { Log = new TestKestrelTrace(testLogger) };<del>using (var server = new TestServer(httpContext =><add>using (var server = new TestServer(async httpContext =><keep>{<keep>httpContext.Response.ContentLength = 11;<del>httpContext.Response.Body.Write(Encoding.ASCII.GetBytes(\"hello,\"), 0, 6);<del>httpContext.Response.Body.Write(Encoding.ASCII.GetBytes(\" world\"), 0, 6);<del>return Task.CompletedTask;<add>await httpContext.Response.Body.WriteAsync(Encoding.ASCII.GetBytes(\"hello,\"), 0, 6);<add>await httpContext.Response.Body.WriteAsync(Encoding.ASCII.GetBytes(\" world\"), 0, 6);<keep>}, serviceContext))<keep>{<keep>using (var connection = server.CreateConnection())", "output": "This test is specifically checking behavior on sync I/O (note there are tests with Write in the name, and other tests with WriteAsync). Enable sync I/O here."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>exp.numDataSetsSent = exp.numDataSetsSent + 1<keep>if flowexporter.IsConnectionDying(&record.Conn) {<del>// If the connection is in dying state or connection is not in conntrack table,<del>// we will delete the flow records from records map.<del>klog.V(2).Infof(\"Deleting the inactive flow records with key: %v from record map\", key)<del>if err := exp.flowRecords.DeleteFlowRecordWithoutLock(key); err != nil {<del>return err<del>}<del>if err := exp.conntrackConnStore.SetExportDone(key); err != nil {<del>return err<del>}<add>// If the connection is in dying state or connection is not in conntrack<add>// table, we set the DyingAndDoneExport flag to do the deletion later.<add>record.DyingAndDoneExport = true<add>exp.flowRecords.AddFlowRecordWithoutLock(&key, &record)<keep>} else {<keep>exp.flowRecords.ValidateAndUpdateStats(key, record)<keep>}", "output": "as a future improvement, maybe we should just change `ForAllFlowRecordsDo` so that `updateOrSendFlowRecord` uses a flow record pointer instead of a copy of stored flow record. This whole code is executed with the lock any way."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import org.apache.iceberg.StructLike;<keep>import org.apache.iceberg.relocated.com.google.common.base.Objects;<keep>import org.apache.iceberg.relocated.com.google.common.base.Preconditions;<del>import org.apache.iceberg.relocated.com.google.common.collect.Maps;<keep>import org.apache.iceberg.types.Types;<keep>import org.apache.iceberg.types.Types.StructType;<add>import org.apache.iceberg.util.CaseInsensitiveMap;<keep>public class GenericRecord implements Record, StructLike {<keep>private static final LoadingCache<StructType, Map<String, Integer>> NAME_MAP_CACHE =<keep>Caffeine.newBuilder()<keep>.weakKeys()<keep>.build(struct -> {<del>Map<String, Integer> idToPos = Maps.newHashMap();<add>Map<String, Integer> idToPos = new CaseInsensitiveMap<>();<keep>List<Types.NestedField> fields = struct.fields();<keep>for (int i = 0; i < fields.size(); i += 1) {<keep>idToPos.put(fields.get(i).name(), i);", "output": "Could we just use case insensitive strings as keys instead of creating a new map implementation? e.g. simply using a treemap with a comparator `Map<String, Integer> idToPos = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);` could work I think"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>this.IndexedDBStore.delete(fileID)<keep>})<del>this.core.on('core:success', (fileIDs) => {<add>this.core.on('core:complete', ({ successful }) => {<add>const fileIDs = successful.map((file) => file.id)<keep>this.deleteBlobs(fileIDs).then(() => {<del>this.core.log(`[GoldenRetriever] removed ${fileIDs.length} files that finished uploading`)<add>this.core.log(`RestoreFiles: removed ${successful.length} files that finished uploading`)<keep>})<keep>})", "output": "Unsure why this is `RestoreFiles` now vs `GoldenRetriever`, thought we deprecated the first?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if ipNet, ok := addr.(*net.IPNet); ok {<keep>if ipNet.IP.IsGlobalUnicast() {<keep>if ipNet.IP.To4() != nil {<add>if v4IPNet == nil {<add>v4IPNet = ipNet<add>}<add>} else if v6IPNet == nil {<keep>v6IPNet = ipNet<del>} else {<del>v4IPNet = ipNet<keep>}<keep>}<keep>}", "output": "Thanks for catching the bug. Here your change lets `v4IPNet` and `v6IPNet` take the first IPv4/IPv6 address in `addrList`. Maybe choose the last one also works and makes code simpler? What's your idea? @tnqn"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>.Executes(() =><keep>{<keep>// start by copying everything from the tracer home dir<del>CopyDirectoryRecursively(TracerHomeDirectory, DDTracerHomeDirectory, DirectoryExistsPolicy.Merge);<add>CopyDirectoryRecursively(TracerHomeDirectory, DDTracerHomeDirectory, DirectoryExistsPolicy.Merge, FileExistsPolicy.OverwriteIfNewer);<keep>if (IsWin)<keep>{", "output": "I think we should use `FileExistsPolicy.Overwrite` instead. Files _should_ always be newer, but in the unlikely case they wouldn't be, I'm afraid some files would be overwritten and other not, leading to inconsistencies that will be hard to figure out."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return<keep>sess_manager.save_autosave()<add>self.load_finished.emit(ok)<add><add>if not self.title():<add>self.title_changed.emit(self.url().toDisplayString())<add>self.zoom.reapply()<add><add>def _update_load_status(self, ok: bool) -> None:<add>\"\"\"Update the load status after a page finished loading.\"\"\"<keep>if ok and not self._has_ssl_errors:<keep>if self.url().scheme() == 'https':<keep>self._set_load_status(usertypes.LoadStatus.success_https)", "output": "Right now it's a bit unclear that this needs to be called explicitly by the implementing class. If, for example, there's another backend, it won't get this update unless we add the same function as webkit. Could you either add a note to this docstring explaining that this needs to be called, or find some way to automatically trigger this so the webkit override isn't needed (and some override passed on webengine)."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// SendSessionStats heartbeats that session is still active + session upload and download amounts<keep>func (client *ClientFake) SendSessionStats(sessionId session.SessionID, sessionStats dto.SessionStats, signer identity.Signer) (err error) {<del>log.Info(mysteriumAPILogPrefix, \"Session stats sent: \", sessionId)<add>log.Info(mysteriumAPILogPrefix, \"SessionDto stats sent: \", sessionId)<keep>return nil<keep>}", "output": "Is it correct that `SessionDto` should be here?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// 9) Add 'ipToTask' map to state file<keep>// 10) Add 'healthCheckType' field in 'apicontainer.Container'<keep>// 11)<del>//  a) Add 'PrivateDNSName' field to 'api.ENI'<del>//  b)Remove `AppliedStatus` field form 'apicontainer.Container'<add>//   a) Add 'PrivateDNSName' field to 'api.ENI'<add>//   b)Remove `AppliedStatus` field form 'apicontainer.Container'<keep>// 12) Deprecate 'TransitionDependencySet' and add new 'TransitionDependenciesMap' in 'apicontainer.Container'<keep>// 13) Add 'resources' field to 'api.task.task'<del>ECSDataVersion = 13<add>// 14) Add 'V3EndpointID' field to 'Container' struct<add>ECSDataVersion = 14<keep>// ecsDataFile specifies the filename in the ECS_DATADIR<keep>ecsDataFile = \"ecs_agent_data.json\"", "output": "Are you sure `v3EndpointIDToContainerName` and `v3EndpointIDToTask` are saved in the state file, can you verify that?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<del>//snippet-sourcedescription:[DeleteAccessKey.java demonstrates how to delete an access key from an AWS Identity and Access Management (IAM) user.]<add>//snippet-sourcedescription:[DeleteAccessKey.java demonstrates how to delete an access key from an AWS Identity and Access Management (AWS IAM) user.]<keep>//snippet-keyword:[AWS SDK for Java v2]<keep>//snippet-keyword:[Code Sample]<keep>//snippet-service:[AWS IAM]", "output": "AWS Identity and Access Management (IAM)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return compressible_types;<keep>}<del>h2o_iovec_t h2o_build_destination(h2o_req_t *req, const char *prefix, size_t prefix_len)<add>h2o_iovec_t h2o_build_destination(h2o_req_t *req, const char *prefix, size_t prefix_len, int escape)<keep>{<keep>h2o_iovec_t parts[4];<keep>size_t num_parts = 0;", "output": "How about renaming `escape` to `use_path_normalized` or something to better indicate that it is a selection between `path` and `path_normalized`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>}<del>func NewVaultServiceAccountRole(namespace string) *rbacv1.ClusterRole {<add>func NewVaultServiceAccountRole(namespace, serviceAccountName string) *rbacv1.ClusterRole {<keep>return &rbacv1.ClusterRole{<keep>ObjectMeta: metav1.ObjectMeta{<del>Name: fmt.Sprintf(\"auth-delegator:%s:vault\", namespace),<add>Name: fmt.Sprintf(\"auth-delegator:%s:%s\", namespace, serviceAccountName),<keep>},<keep>Rules: []rbacv1.PolicyRule{<keep>{", "output": "question: what is happening here?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>*     when the driver has changed focus to the specified window.<keep>*/<keep>window(nameOrHandle) {<add>let paramName = this.driver_.getExecutor().w3c ? 'handle' : 'name';<keep>return this.driver_.schedule(<keep>new command.Command(command.Name.SWITCH_TO_WINDOW).<del>setParameter('name', nameOrHandle),<add>setParameter(paramName, nameOrHandle),<keep>'WebDriver.switchTo().window(' + nameOrHandle + ')');<keep>}", "output": "I'd rather just send the parameter twice than break encapsulation here. There's already precedence with webelement IDs"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"fmt\"<keep>\"io\"<keep>\"os\"<add>\"strconv\"<keep>\"sync\"<keep>)<del>var out io.Writer = os.Stdout<del><keep>// LogLevel of quic-go<keep>type LogLevel uint8<keep>const (<add>logEnv = \"QUIC_GO_LOG_LEVEL\"<add><keep>// LogLevelDebug enables debug logs (e.g. packet contents)<keep>LogLevelDebug LogLevel = iota<keep>// LogLevelInfo enables info logs (e.g. packets)", "output": "Or `QUIC_LOG_LEVEL`. Which one do you prefer?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>package openvpn<keep>import (<add>\"bufio\"<add>\"bytes\"<keep>\"errors\"<add>log \"github.com/cihub/seelog\"<add>\"io\"<add>\"net/textproto\"<keep>\"os/exec\"<keep>\"strconv\"<keep>\"syscall\"", "output": "\"Openvpn check\" we could move this to separate prefix."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>var dialAddr = quic.DialAddr<add>var methodHEAD = \"HEAD\"<keep>// client is a HTTP2 client doing QUIC requests<keep>type client struct {", "output": "You can use `http.MethodHead` here."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if err := o.Validate(); err != nil {<keep>return nil, err<keep>}<add>marketAddr := blockchain.MarketAddr().Hex()<add>askPlansKey := marketAddr + \"/ask_plans\"<keep>s := &Salesman{<keep>options:         o,<del>askPlanStorage:  state.NewKeyedStorage(\"ask_plans\", o.storage),<add>askPlanStorage:  state.NewKeyedStorage(askPlansKey, o.storage),<keep>askPlanCGroups:  map[string]cgroups.CGroup{},<keep>deals:           map[string]*sonm.Deal{},<keep>orders:          map[string]*sonm.Order{},", "output": "Why to introduce this intermediate variable?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// DecodeValues decodes an array of abi values from the given buffer, using the<keep>// provided type information.<keep>func DecodeValues(data []byte, types []Type) ([]*Value, error) {<add>if len(types) > 0 && len(data) == 0 {<add>return nil, fmt.Errorf(\"expected %d parameters, but got 0\", len(types))<add>}<add><keep>if len(data) == 0 {<keep>return nil, nil<keep>}", "output": "This was necessary due to a bug uncovered in testing. If an actor method which requires params is called without any params at all, not returning an error here causes a panic."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// Ping is periodically sent to report its realtime status/stats to control-plane.<keep>// The received stats will be pushed to the metrics collector.<add>// Note: This service is deprecated, use ReportStat instead.<keep>func (a *PipedAPI) Ping(ctx context.Context, req *pipedservice.PingRequest) (*pipedservice.PingResponse, error) {<keep>return &pipedservice.PingResponse{}, nil<keep>// return nil, status.Error(codes.Unimplemented, \"\")<keep>}<add>// ReportStat is periodically sent to report its realtime status/stats to control-plane.<add>// The received stats will be pushed to the metrics collector.<add>func (a *PipedAPI) ReportStat(ctx context.Context, req *pipedservice.ReportStatRequest) (*pipedservice.ReportStatResponse, error) {<add>return &pipedservice.ReportStatResponse{}, nil<add>// return nil, status.Error(codes.Unimplemented, \"\")<add>}<add><keep>// ReportPipedMeta is sent by piped while starting up to report its metadata<keep>// such as configured cloud providers.<keep>func (a *PipedAPI) ReportPipedMeta(ctx context.Context, req *pipedservice.ReportPipedMetaRequest) (*pipedservice.ReportPipedMetaResponse, error) {", "output": "`ctx` is unused in ReportStat"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>Knp\\Bundle\\MenuBundle\\KnpMenuBundle::class => ['all' => true],<keep>Translation\\Bundle\\TranslationBundle::class => ['all' => true],<keep>Symfony\\WebpackEncoreBundle\\WebpackEncoreBundle::class => ['all' => true],<add>Translation\\PlatformAdapter\\Loco\\Bridge\\Symfony\\TranslationAdapterLocoBundle::class => ['all' => true],<add>Http\\HttplugBundle\\HttplugBundle::class => ['all' => true],<keep>];", "output": "only dev and local"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>public void OnNext(KeyValuePair<string, object> value)<keep>{<add>if (Sdk.SuppressInstrumentation)<add>{<add>return;<add>}<add><keep>if (!this.handler.SupportsNullActivity && Activity.Current == null)<keep>{<keep>InstrumentationEventSource.Log.NullActivity(value.Key);", "output": "Probably a good optimization to have this, but I don't think it's strictly required. For \"legacy\" Activity flows we pass them through an ActivitySource for sampling. So the logic below should also catch these?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>*/<keep>void collect(int doc) throws IOException;<add>/*<add>* optionally returns an iterator over competitive documents<add>*/<add>default DocIdSetIterator iterator() {<add>return null;<add>}<add><keep>}", "output": "maybe give it a more descriptive name, e.g. `competitiveFilter`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// Copy does copying the repository to the given destination.<keep>func (r *repo) Copy(dest string) (Repo, error) {<del>cmd := exec.Command(\"cp\", \"-rf\", r.dir, dest)<add>cmd := copyCommand(r.dir, dest)<keep>out, err := cmd.CombinedOutput()<keep>if err != nil {<keep>return nil, formatCommandError(err, out)", "output": "@nghialv btw, perhaps was this method originally created for copying the repo root to the given `dest` as a subdirectory?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>file_object.seek(0)<keep>return ''.join(map(lambda s: s.decode('utf-8'), file_object.readlines()))<add>def build_tracking_url(self, logs_output):<add>return logs_output<add><keep>def run(self):<keep>args = list(map(str, self.program_args()))", "output": "Sorry for going back and forth. Adding docstring here would be very helpful for others to understand the need of this method."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>package com.fsck.k9.activity;<add><keep>import android.content.BroadcastReceiver;<keep>import android.content.Context;<keep>import android.content.Intent;", "output": "Unnecessary new line"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>}<del>func (manager *connectionManager) Connect(id identity.Identity, nodeKey string) error {<add>func (manager *connectionManager) Connect(myId identity.Identity, nodeKey string) error {<keep>manager.status = statusConnecting()<add>providerId := identity.FromAddress(nodeKey)<add><keep>proposals, err := manager.mysteriumClient.FindProposals(nodeKey)<keep>if err != nil {<keep>manager.status = statusError(err)", "output": "shouldn't we name abbreviations up-cased? `myId` -> `myID`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>options = null;<keep>}<add>if (this.schema.discriminatorMapping && fields) {<add>fields = fields + ' ' + this.schema.options.discriminatorKey;<add>}<add><keep>// get the raw mongodb collection object<keep>var mq = new Query({}, options, this, this.collection);<keep>mq.select(fields);", "output": "fields may be an object."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>package iface<add><add>type DaemonAPI interface{}", "output": "~Why are putting all these APIs in their own ~packages~ files? So many more ~directories~ files, to what end? Why not just have them all be a part of the same API file and all live alongside each other so you can easily see them?~ Edit: nevermind, probably works best in separate files."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return false;<keep>}<del>int len = struct.size();<del>if (len != that.struct.size()) {<del>return false;<del>}<del><keep>return comparator.compare(this.struct, that.struct) == 0;<keep>}", "output": "Was this removed to ignore the extra columns coming from the file projection?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>const (<keep>ProtocolHeartbeat ProtocolTag = iota<del>ProtocolOverlayControlMsg<add>ProtocolConnectionEstablished<add>ProtocolFragmentationReceived<add>ProtocolPMTUVerified<keep>ProtocolGossip<keep>ProtocolGossipUnicast<keep>ProtocolGossipBroadcast<add>ProtocolOverlayControlMsg<keep>)<keep>type ProtocolMsg struct {", "output": "When we undo this for 1.3, do we not need to leave these three entries intact to avoid renumbering of the subsequent constants? If so perhaps the changes to this file should be pulled into a separate initial commit so we can just `git revert` the remainder..."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>boolean validType = false;<keep>boolean validUrl = !TextUtils.isEmpty(url);<del>if (type == null) {<add>if(SyndTypeUtils.enclosureTypeValid(type)) {<add>validType = true;<add>} else {<keep>type = SyndTypeUtils.getMimeTypeFromUrl(url);<keep>}", "output": "~~I think lines 65-67 should be moved into this else clause after `type = ...` Else, it is a bit confusing why we check the enclose type validity a second time~~ Nevermind, will do some refactoring, myself. But thanks for \"fixing\" this!"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>this.extraGnArgs = {}<keep>this.extraNinjaOpts = []<keep>this.braveSafetyNetApiKey = getNPMConfig(['brave_safetynet_api_key']) || ''<add>this.androidKeystorePath = getNPMConfig(['android_keystore_path']) || ''<add>this.androidKeyAlias = getNPMConfig(['android_key_alias']) || ''<add>this.androidKeystorePassword = getNPMConfig(['android_keystore_password']) || ''<add>this.androidKeyPassword = getNPMConfig(['android_key_password']) || ''<keep>}<keep>Config.prototype.buildArgs = function () {", "output": "shouldn't this be `android_keystore_name`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import org.apache.solr.request.SolrQueryRequest;<keep>import org.apache.solr.response.transform.DocTransformer;<keep>import org.apache.solr.response.transform.TransformerFactory;<del>import org.bouncycastle.util.Strings;<keep>import org.junit.After;<keep>import org.junit.BeforeClass;<keep>import org.junit.Test;", "output": "Test used to use old bouncycastle dependency which isn't needed anymore from Hadoop. Switched to use builtin Java split."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return this;<keep>}<del>public void maxParallelism(int parallelism) {<add>public RewriteDataFilesAction maxParallelism(int parallelism) {<keep>Preconditions.checkArgument(parallelism > 0, \"Invalid max parallelism %d\", parallelism);<keep>this.maxParallelism = parallelism;<add>return this;<keep>}<keep>}", "output": "Would it make sense to also add `setMaxParallelism` in addition to this to match the Flink API?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>utils.Eth1SyncServiceEnable,<keep>utils.Eth1CanonicalTransactionChainDeployHeightFlag,<keep>utils.Eth1L1CrossDomainMessengerAddressFlag,<add>utils.Eth1L1FeeWalletAddressFlag,<keep>utils.Eth1ETHGatewayAddressFlag,<keep>utils.Eth1ChainIdFlag,<keep>utils.RollupClientHttpFlag,", "output": "Nit: unified names between geth and contracts"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>from django.test import TestCase<add>from graphite.worker_pool.pool import stop_pool<add><add><add>class BaseTestCase(TestCase):<add><add>def tearDown(self):<add>stop_pool()", "output": "nit: you could have named it just \"TestCase\" (if django's TestCase was imported differently)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>apis \"github.com/openebs/maya/pkg/apis/openebs.io/v1alpha1\"<keep>clientset \"github.com/openebs/maya/pkg/client/generated/clientset/versioned\"<keep>\"github.com/openebs/maya/pkg/debug\"<del>merrors \"github.com/openebs/maya/pkg/errors/v1alpha1\"<keep>pkg_errors \"github.com/pkg/errors\"<keep>corev1 \"k8s.io/api/core/v1\"<keep>\"k8s.io/apimachinery/pkg/api/errors\"", "output": "change pkg_errors to errors. Keep it consistent across all the files."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>def __mul__(self, n):<keep>return self._fix()*n<del>class RandBin(RandString):<add>class RandBin(RandString, object):<keep>def __init__(self, size=None):<del>RandString.__init__(self, size, \"\".join(map(chr, range(256))))<add>super(RandBin, self).__init__(size=size, chars=b\"\".join(chb(c) for c in range(256)))<add>def _fix(self):<add>s = b\"\"<add>for _ in range(self.size):<add>s += chb(random.choice(self.chars))<add>return s<keep>class RandTermString(RandString):", "output": "I think a \"string\" in Scapy's spirit (if such a thing exists) is actually a `bytes` object in Python 3 (see `Str*Field`s). So maybe `RandString._fix()` should return a `bytes` object. What do you think?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>#include <ifaddrs.h><keep>#include <arpa/inet.h><add>DEFINE_string(local_ip, \"\", \"local ip\");<add><keep>namespace nebula {<keep>namespace network {", "output": "I don't think this belongs here. If the application can take a local_ip as input, the application should take care of it, not in this common library"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>'choose_file' => 'Datei auswählen',<keep>'close' => 'Schließen',<keep>'create' => 'Erstellen',<del>'create_and_add_another' => 'Erstellen und weiter hinzufügen',<add>'create_and_add_another' => 'Erstellen und weitere hinzufügen',<keep>'create_and_continue' => 'Erstellen und weiter bearbeiten',<keep>'save' => 'Speichern',<keep>'save_and_continue' => 'Speichern und weiter bearbeiten',", "output": "I think this is more of a semantic difference than a typo - `weiter hinzufgen` is like `continue adding` whereas `weitere hinzufgen` is like `add more`. I think it makes sense to change it though  "}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>from datetime import datetime<keep>from listenbrainz.utils import escape, convert_to_unix_timestamp<add>from flask import current_app<keep>def flatten_dict(d, seperator='', parent_key=''):<keep>\"\"\"", "output": "this seems extraneous."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>}<keep>}<add>/**<add>* Add tab icons<add>*<add>* @param array $icons<add>* @return void<add>*/<add>public function addTabIcons(array $icons)<add>{<add>$this->allTabs->primary->icons = $icons;<add>$this->allTabs->secondary->icons = $icons;<add>$this->allTabs->outside->icons = $icons;<add>}<keep>/**<keep>* Add tab fields.", "output": "@Samuell1 Will assigning the same icons array to all the tabs result in, for example, a primary tab called \"Colours\" and secondary tab called \"Colours\" having the same icon?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>SQLALCHEMY_DATABASE_URI = os.environ['SQLALCHEMY_DATABASE_URI']<keep>REGISTRY_URL = os.environ['REGISTRY_URL']<del>CATALOG_HOST = os.environ['CATALOG_HOST']<del>CATALOG_URL = 'https://%s' % CATALOG_HOST<add>CATALOG_URL = os.environ.get('CATALOG_URL')<add>if not CATALOG_URL.startswith(\"https\"):<add>print(\"WARNING: INSECURE CONNECTION TO CATALOG\")<add># require verbose environment variable to be defined<add>assert os.environ['ALLOW_INSECURE_CATALOG_ACCESS']<keep>PACKAGE_BUCKET_NAME = os.environ['PACKAGE_BUCKET_NAME']", "output": "This should now use `[]`, so it crashes if the var is missing"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>using Nethermind.Core;<add><add>namespace Nethermind.Blockchain.Filters.Topics<add>{<add>public abstract class TopicsFilterBase<add>{<add>public abstract bool Accepts(LogEntry entry);<add><add>public abstract bool Accepts(ref LogEntryStructRef entry);<add><add>public abstract bool Matches(Bloom bloom);<add><add>public abstract bool Matches(ref BloomStructRef bloom);<add>}<add>}", "output": "would rename to TopicsFilter and original one to SequenceTopicsFilter"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>});<keep>/// <summary><del>/// Gets or sets a hook to exclude calls based on domain or other per-request criterion.<add>/// Gets or sets a Filter function to filter instrumentation for requests on a per request basis.<add>/// The functions gets the HttpContext, and should return a boolean.<add>/// If functions returns true, the request is collected.<add>/// If functions returns false, the request is filtered out.<add>/// If filter throws exception, then this is considered as no filter being configured.<add>/// and requested is collected.<keep>/// </summary><del>internal Predicate<HttpContext> RequestFilter { get; set; }<add>public Func<HttpContext, bool> Filter { get; set; }<keep>}<keep>}", "output": "This line doesn't seem to be right?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># :type exception: BaseException<keep>exception = None<keep>try:<del>modules = [self.provisioning, self.aggregator] + self.reporters<add>modules = [self.aggregator, self.provisioning] + self.reporters<keep>modules += self.services<keep>for module in modules:<keep>try:", "output": "Why change this?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>optional: ['es6.spec.symbols'],<keep>includePolyfill: true<keep>},<add>'ember-service-worker': {<add>rootUrl: '/ghost/'<add>},<add>'esw-cache-fallback': {<add>patterns: [<add>'/ghost/api/(.+)'<add>],<add>},<keep>outputPaths: {<keep>app: {<keep>js: assetLocation('ghost.js')", "output": "Would this break things if Ghost is run in a subdirectory or no?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// Address is the interface that defines methods to manage Filecoin addresses and wallets.<keep>type Address interface {<keep>Addrs() Addrs<del>Import(ctx context.Context, f files.Directory) ([]address.Address, error)<add>Import(ctx context.Context, f files.File) ([]address.Address, error)<keep>Export(ctx context.Context, addrs []address.Address) ([]*types.KeyInfo, error)<keep>}", "output": "Aside: this is a confusing name for an interface that contains multiple addresses."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import org.junit.Test;<keep>import net.sourceforge.pmd.PMD;<del>import net.sourceforge.pmd.lang.java.ast.JavaParserConstants;<add>import net.sourceforge.pmd.lang.java.ast.JavaTokenKinds;<keep>public class JavaTokensTokenizerTest {", "output": "Do we need to internalize net.sourceforge.pmd.lang.java.ast.JavaParserConstants on master, so that we can rename it?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># These values specify the destination directory for ddev ssh and the<keep># directory in which commands passed into ddev exec are run.<del># omit_containers: [\"dba\", \"ddev-ssh-agent\"]<del># would omit the dba (phpMyAdmin) and ddev-ssh-agent containers. Currently<del># only those two containers can be omitted here.<del># Note that these containers can also be omitted globally in the<del># ~/.ddev/global_config.yaml or with the \"ddev config global\" command.<add># omit_containers: [\"db\", dba\", \"ddev-ssh-agent\"]<add># Currently only these containers are supported. Some containers can also be<add># omitted globally in the ~/.ddev/global_config.yaml. Note that if you omit<add># the \"db\" container, several standard features of ddev that access the<add># database container will be unusuable.<keep># nfs_mount_enabled: false<keep># Great performance improvement but requires host configuration first.", "output": "Sorry, typo s/unusuable/unusable/"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>public function __sleep()<keep>{<keep>$properties = get_object_vars($this);<del>// avoid serialization if the site object<del>unset($properties['site']);<add>// avoid serialization if the site and logger object<add>unset($properties['site'], $properties['logger']);<keep>return array_keys($properties);<keep>}<del>}<add>}", "output": "Maybe you can correct the typo \"if\" too :)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>/// <summary><keep>/// Build TracerProvider with Resource, Sampler, Processors and Instrumentation.<keep>/// </summary><del>internal class TracerProviderBuilderSdk : TracerProviderBuilder<add>public class TracerProviderBuilderSdk : TracerProviderBuilder<keep>{<keep>private readonly List<InstrumentationFactory> instrumentationFactories = new List<InstrumentationFactory>();<keep>private readonly List<BaseProcessor<Activity>> processors = new List<BaseProcessor<Activity>>();", "output": "This is good and something that I think opens a lot of possibilities. I think what would be even better is to change up `TracerProviderSdk` to take factories for the processors just like it already does for the instrumentations. Should probably use use a factory for the sampler. If we made those 2 changes then we could actually split this all up into the config and the build phase and we could use the factory methods in the hosting version to call into the IServiceProvider to get those instances."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>_syncPeerPool = syncPeerPool ?? throw new ArgumentNullException(nameof(syncPeerPool));<keep>_syncConfig = syncConfig ?? throw new ArgumentNullException(nameof(syncConfig));<keep>_logger = logManager.GetClassLogger() ?? throw new ArgumentNullException(nameof(logManager));<del><add><keep>Current = SyncMode.NotStarted;<keep>}<keep>public SyncMode Current { get; private set; }<keep>public bool IsParallel => Current == SyncMode.FastBlocks || Current == SyncMode.StateNodes;<del><add><keep>public void Update()<keep>{<keep>if (_syncPeerPool.PeerCount == 0)", "output": "We need to switch from BeamSync to FullSync when we download all the needed headers, blocks, receipts and state"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>#include <wlr/render/matrix.h><keep>#include <wlr/render/gles2.h><keep>#include <wlr/render.h><del>#include \"backend/drm.h\"<del>#include \"backend/drm-util.h\"<add>#include \"backend/drm/drm.h\"<add>#include \"backend/drm/util.h\"<keep>bool wlr_drm_check_features(struct wlr_drm_backend *backend) {<del>extern const struct wlr_drm_interface legacy_iface;<del>extern const struct wlr_drm_interface atomic_iface;<add>extern const struct wlr_drm_interface iface_legacy;<add>extern const struct wlr_drm_interface iface_atomic;<keep>if (drmSetClientCap(backend->fd, DRM_CLIENT_CAP_UNIVERSAL_PLANES, 1)) {<keep>wlr_log(L_ERROR, \"DRM universal planes unsupported\");", "output": "And the old names for these variables made more sense imo."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return rate;<keep>}<del>// We don't want to rate limit messages by default when in debug mode<del>return GlobalSettings.Source.DebugEnabled ? 0 : DefaultLogMessageRateLimit;<add>// By default, we don't rate limit log messages;<add>return 0;<keep>}<keep>private static string GetLogDirectory()", "output": "Was `DefaultLogMessageRateLimit` not configurable anywhere?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if (StringUtils.isBlank(jsonTypeDTO.getId())) {<keep>if (!StringUtils.isBlank(jsonTypeDTO.getName())) {<del>typeDTOBuilder.withId(jsonTypeDTO.getName().replaceAll(\"[^a-zA-Z0-9]\", \"\"));<add>typeDTOBuilder.withId(jsonTypeDTO.getName().replaceAll(\"[^a-zA-Z0-9_]\", \"\"));<keep>} else {<del>typeDTOBuilder.withId(jsonTypeDTO.getName().replaceAll(\"[^a-zA-Z0-9]\", \"\"));<add>typeDTOBuilder.withId(jsonTypeDTO.getName().replaceAll(\"[^a-zA-Z0-9_]\", \"\"));<keep>}<keep>}", "output": "I suggest, that we move the regex (`[^a-zA-Z0-9_]`) to a separate constant field, because we're using it in multiple places and I think it's quite prone to misspellings."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>var type = clientModel.ModelTypes.First();<del>Assert.Equal(\"code\", type.Properties[0].Name);<del>Assert.Equal(\"message\", type.Properties[1].Name);<add>Assert.Equal(\"errorCode\", type.Properties[0].Name);<add>Assert.Equal(\"errorMessage\", type.Properties[1].Name);<keep>Assert.Equal(\"parentError\", type.Properties[2].Name);<keep>}", "output": "@NiklasGustafsson - I had to make these changes for the x-ms-client-name extension tests for java and python. The tests were expecting wire format instead of the client name. Hence modified them appropriately. Let me know what you think ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>apis \"github.com/openebs/maya/pkg/apis/openebs.io/v1alpha1\"<keep>clientset \"github.com/openebs/maya/pkg/client/generated/clientset/versioned\"<keep>\"github.com/openebs/maya/pkg/debug\"<del>merrors \"github.com/openebs/maya/pkg/errors/v1alpha1\"<del>pkg_errors \"github.com/pkg/errors\"<add>errors \"github.com/pkg/errors\"<keep>corev1 \"k8s.io/api/core/v1\"<keep>\"k8s.io/apimachinery/pkg/api/errors\"<keep>metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"", "output": "other declaration of errors (from `typecheck`)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>tmb, ctx := tomb.WithContext(ctx)<keep>saver := &saveFail{<del>idx: repository.NewIndex(),<add>idx: repository.NewMasterIndex(),<keep>}<keep>b := NewBlobSaver(ctx, tmb, saver, uint(runtime.NumCPU()))", "output": "Is there a need to replace the Index with a MasterIndex?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>public void testTelemetryEnabledAsCamundaAdmin() {<keep>// given<add>disableAuthorization();<add>managementService.enableTelemetry(true);<add>enableAuthorization();<keep>identityService.setAuthentication(userId, Collections.singletonList(Groups.CAMUNDA_ADMIN));<keep>// when<del>managementService.enableTelemetry(true);<add>managementService.enableTelemetry(false);<keep>// then<keep>String telemetryPropertyValue = TelemetryHelper.fetchConfigurationProperty(processEngineConfiguration).getValue();<del>assertThat(Boolean.parseBoolean(telemetryPropertyValue)).isTrue();<add>assertThat(Boolean.parseBoolean(telemetryPropertyValue)).isFalse();<keep>}<keep>}", "output": "Not directly related to the topic of this ticket: I think this API design is a bit confusing. To disable delemetry, I would write `managementService.enableTelemetry(false)` which is not intuitive to read. Maybe `toggleTelemetry` instead of `enableTelemetry` is more clear."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>package io.protostuff.runtime.model;<add>import com.google.protobuf.CodedOutputStream;<add><keep>public final class ModelProtobuf {<keep>private ModelProtobuf() {<keep>}", "output": "this file is model generated by protobuf, just for compatible test it's better not change it."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import java.util.List;<del>public class ASTAnnotationTypeDeclaration extends AbstractJavaAccessTypeNode implements ASTAnyTypeDeclaration {<add>public class ASTAnnotationTypeDeclaration extends ASTAnyTypeDeclaration {<del>private JavaQualifiedName qualifiedName;<keep>public ASTAnnotationTypeDeclaration(int id) {<keep>super(id);", "output": "this is a breaking API change. Do we really need to do it in 6.2.0? Can't we just deprecate the methods?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>*/<keep>public function edit(SliderItemData $sliderItemData)<keep>{<add>$this->domainId = $sliderItemData->domainId;<keep>$this->name = $sliderItemData->name;<keep>$this->link = $sliderItemData->link;<keep>$this->hidden = $sliderItemData->hidden;", "output": "I noticed (SonarCloud noticed actually) that the implementation of `::edit` method is the same as `__construct` is. Does it make sense to call the `edit` method from the constructor?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>/// As a result, the target framework moniker and the binary compatibility flags are initialized correctly.<keep>/// </summary><keep>/// <remarks><del>/// The above logic is further specialised, depending on the kind of the currnent AppDomain and where the app is hosted:<add>/// The above logic is further specialized, depending on the kind of the current AppDomain and where the app is hosted:<keep>/// <br /><keep>/// * On non-default AD:<keep>///   we do not wait.", "output": "> specialised This isn't a typo in my neck of the woods  "}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>{<keep>Id = d.ItemSpec,<keep>Version = d.GetVersion(),<del>TargetFramework = d.GetTargetFramework()<add>TargetFramework = d.GetTargetFramework(),<add>Include = d.GetValueList(\"Include\"),<add>Exclude = d.GetValueList(\"Exclude\")<keep>};<keep>return (from dependency in dependencies", "output": "Do we actually use Include anywhere yet or is this just for completion?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"task_per_line\":               \"join produces inconsistent/racy results when table schemas do not match (https://github.com/influxdata/flux/issues/855)\",<keep>\"rowfn_with_import\":           \"imported libraries are not visible in user-defined functions (https://github.com/influxdata/flux/issues/1000)\",<keep>\"string_trim\":                 \"cannot reference a package function from within a row function\",<add>\"integral_columns\":            \"aggregates changed to operate on just a single columnm.\",<keep>}<keep>var querier = querytest.NewQuerier()", "output": "Should we update integral to operate on a single column as well?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>else {<keep>// If the node's VNode had a ref function, invoke it with null here.<keep>// (this is part of the React spec, and smart for unsetting references)<del>if (node[ATTR_KEY]!=null) applyRef(node[ATTR_KEY].ref, null);<add>if (node[ATTR_KEY]!=null) {<add>applyRef(node[ATTR_KEY].ref, null);<add>delete node[ATTR_KEY].ref;<add>}<keep>if (unmountOnly===false || node[ATTR_KEY]==null) {<keep>removeNode(node);", "output": "This just always calls refs. I think we need to either hoist ref invocation back out of `setProperty()` (it used to happen during rendering), or wait for component recycling to go away."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>@Override<keep>public final float score() { return score; }<add>@Override<add>public float smoothingScore(int docId) throws IOException {<add>return 0;<add>}<add><keep>@Override<keep>public int docID() {<keep>return doc;", "output": "Hmm, should we also cache the `smoothingScore` for this hit? Or, if we will keep it at returning `0`, couldn't we remove this impl and inherit the default from `Scorable`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>o.ErrorRefs[i].Shape.IsError = true<keep>}<keep>}<add><add>// TODO put this somewhere better<add>for _, s := range a.Shapes {<add>switch s.Type {<add>case \"list\":<add>s.MemberRef.Shape.UsedInList = true<add>case \"map\":<add>s.ValueRef.Shape.UsedInMap = true<add>}<add>}<keep>}<keep>// A referenceResolver provides a way to resolve shape references to", "output": "Is this TODO still valid? Or are we going to put this somewhere else later?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if (nextBlock) {<keep>var nextHeightWidth = nextBlock.getHeightWidth();<keep>height += nextHeightWidth.height;<add>height -= Blockly.BlockSvg.NOTCH_HEIGHT; // Exclude height of connected notch.<keep>width = Math.max(width, nextHeightWidth.width);<keep>}<keep>return {height: height, width: width};", "output": "This isn't new, but getHeightWidth is now defined in block_svg.js, block_render_svg_horizontal.js, and block_render_svg_vertical.js. One of these should be unnecessary."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>log.info(\"Will start replication from leader with poll interval: {}\", pollIntervalStr );<del>NamedList<Object> slaveConfig = new NamedList<>();<del>slaveConfig.add(\"fetchFromLeader\", Boolean.TRUE);<del>slaveConfig.add(ReplicationHandler.SKIP_COMMIT_ON_MASTER_VERSION_ZERO, switchTransactionLog);<del>slaveConfig.add(\"pollInterval\", pollIntervalStr);<add>NamedList<Object> secondaryConfig = new NamedList<>();<add>secondaryConfig.add(\"fetchFromLeader\", Boolean.TRUE);<add>secondaryConfig.add(ReplicationHandler.SKIP_COMMIT_ON_MASTER_VERSION_ZERO, switchTransactionLog);<add>secondaryConfig.add(\"pollInterval\", pollIntervalStr);<keep>NamedList<Object> replicationConfig = new NamedList<>();<del>replicationConfig.add(\"slave\", slaveConfig);<add>replicationConfig.add(\"secondary\", secondaryConfig);<keep>String lastCommitVersion = getCommitVersion(core);<keep>if (lastCommitVersion != null) {", "output": "Note that this is in the context of SolrCloud, so \"secondary\" doesn't apply and should be instead follower"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>var aria = 'aria-hidden';<add>if (node && node.hasAttribute(aria)) {<add>return false;<add>}<add><add>return true;", "output": "Just do: `return node.hasAttribute('aria-hidden')`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>inDockerfilePath: \"\",<keep>setupMocks: func(m initSvcMocks) {<del>m.mockMftReader.EXPECT().ReadWorkloadManifest(wantedSvcName).Return(nil, &workspace.ErrFileNotExists{FileName: wantedSvcName})<add>m.mockMftReader.EXPECT().ReadWorkloadManifest(wantedSvcName).Return(nil, &workspace.ErrWorkspaceNotFound{})<keep>m.mocktopicSel.EXPECT().Topics(<keep>gomock.Eq(svcInitPublisherPrompt),<keep>gomock.Eq(svcInitPublisherHelpPrompt),", "output": "maybe we should keep one test case for ErrFileNotExists and update only one file for ErrWorkspaceNotFound?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if opts.SystemAccount != _EMPTY_ {<keep>// Lock may be acquired in lookupAccount, so release to call lookupAccount.<keep>s.mu.Unlock()<del>_, err := s.lookupAccount(opts.SystemAccount)<add>acc, err := s.lookupAccount(opts.SystemAccount)<keep>s.mu.Lock()<add>if err == nil && s.sys != nil && acc != s.sys.account {<add>// sys.account.clients (including internal client)/respmap/etc... are transferred separately<add>s.sys.account = acc<add>s.mu.Unlock()<add>// acquires server lock separately<add>s.addSystemAccountExports(acc)<add>// can't hold the lock as go routine reading it may be waiting for lock as well<add>s.sys.resetCh <- struct{}{}<add>s.mu.Lock()<add>}<keep>if err != nil {<keep>return fmt.Errorf(\"error resolving system account: %v\", err)<keep>}", "output": "That's fine though, meaning that you can send to this channel under the server lock. The internalSendLoop will pick up the change when the server lock is released (if loop is blocked trying to grab the server lock). Even the way you do it here (releasing the lock, sending, then reacquiring) does not guarantee that the internalSendLoop will have time to refresh in that interval."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>await driver.get(fileServer.Pages.basicAuth)<keep>let source = await driver.getPageSource()<keep>assert.strictEqual(source.includes('Access granted!'), true)<del>await server.stop()<keep>})<keep>})", "output": "Is this not required?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>*/<keep>String TARGET_FILE_SIZE_BYTES = \"target-file-size-bytes\";<add>/**<add>* If the compaction should commit rewritten data files using the sequence number at compaction start time instead<add>* of optimistically incrementing the latest sequence number.<add>* <p><add>* This avoids commit conflicts with updates that add newer equality deletes at a higher sequence number.<add>* <p><add>* Defaults to false.<add>*/<add>String USE_STARTING_SEQUENCE_NUMBER = \"use-starting-sequence-number\";<add>boolean USE_STARTING_SEQUENCE_NUMBER_DEFAULT = false;<add><keep>/**<keep>* Choose BINPACK as a strategy for this rewrite operation<keep>* @return this for method chaining", "output": "Is there a reason why we wouldn't use this as the default?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>raise cmdexc.CommandError(\"Can't move tab to position {}!\".format(<keep>new_idx + 1))<del>tab = self._current_widget()<keep>cur_idx = self._current_index()<del>icon = self._tabbed_browser.tabIcon(cur_idx)<del>label = self._tabbed_browser.page_title(cur_idx)<keep>cmdutils.check_overflow(cur_idx, 'int')<keep>cmdutils.check_overflow(new_idx, 'int')<keep>self._tabbed_browser.setUpdatesEnabled(False)<keep>try:<keep>color = self._tabbed_browser.tab_indicator_color(cur_idx)<del>self._tabbed_browser.removeTab(cur_idx)<del>self._tabbed_browser.insertTab(new_idx, tab, icon, label)<add>self._tabbed_browser.tabBar().moveTab(cur_idx, new_idx)<keep>self._set_current_index(new_idx)<keep>self._tabbed_browser.set_tab_indicator_color(new_idx, color)<keep>finally:", "output": "You can most likely remove that (and the try/finally) too, as we shouldn't have any flickering from removing/inserting tabs anymore now."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>mediaAdapter.notifyItemChanged(toggleSelectPhoto(m));<keep>editMode = true;<keep>}<add>else {<add>selectAllPhotosUpToFav(getImagePosition(m.getPath()));<add>}<keep>} else selectAllPhotosUpTo(getImagePosition(m.getPath()), mediaAdapter);<keep>return true;<keep>}", "output": "@angmas1 just make one more change here too. Move the else line to the line above it, where the if block ends and remove the braces like in line 280."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import java.util.Optional;<keep>import java.util.Set;<keep>import java.util.concurrent.TimeoutException;<add>import java.util.function.BiConsumer;<add>import java.util.function.Consumer;<keep>import com.google.common.collect.Lists;<keep>import com.google.common.collect.Maps;", "output": "Are these imports needed (BiConsumer and Consumer)? If they are unused imports, then precommit will fail."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>}<add>public void OKDialog()<add>{<add>DialogResult = DialogResult.OK;<add>}<add><keep>private void cbShowText_CheckedChanged(object sender, System.EventArgs e)<keep>{<keep>LineText.Visible = cbShowText.Checked;", "output": "We usually use OkDialog()"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"\"\"<keep>def __init__(self, executable_path, port=0, service_args=None,<del>log_path=None, env=None, start_error_message=None):<add>log_path=None, env=None, start_error_message=None, create_no_window=False):<keep>\"\"\"<keep>Creates a new instance of the Service", "output": "This would be better served as a method/property that is set when people don't want to a window."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>using System;<add><add>namespace Microsoft.AspNetCore.Server.Kestrel.Internal.Http<add>{<add>public interface IHttpStartLineHandler<add>{<add>void OnStartLine(HttpMethod method, HttpVersion version, Span<byte> target, Span<byte> path, Span<byte> query, Span<byte> customMethod);<add>}<add>}", "output": "\"Request line\" here too."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>require 'steps/user_steps'<keep>require 'steps/approval_steps'<add># mimic production env for view+mail<add>ENV[\"DISABLE_SANDBOX_WARNING\"] = 'true'<add><keep># Requires supporting ruby files with custom matchers and macros, etc, in<keep># spec/support/ and its subdirectories. Files matching `spec/**/*_spec.rb` are<keep># run as spec files by default. This means that files in spec/support that end", "output": "Minor: Hmmm...is it worth setting this explicitly for the tests that it affects?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>[]string{\"controller\", \"method\", \"resource\", \"remote\", \"status\"},<keep>)<keep>metricKubeClientRequestSeconds = prometheus.NewHistogramVec(prometheus.HistogramOpts{<del>Name: \"hive_kube_client_request_seconds\",<del>Help: \"Length of time for kubernetes client requests.\",<add>Name:    \"hive_kube_client_request_seconds\",<add>Help:    \"Length of time for kubernetes client requests.\",<add>Buckets: []float64{0.05, 0.1, 0.5, 1, 5, 10, 30, 60, 120},<keep>},<keep>[]string{\"controller\", \"method\", \"resource\", \"remote\", \"status\"},<keep>)", "output": "what is the effect of changing these buckets in existing data that is available in the monitoring system? if there are any existing dashboards that use previous histogram buckets they are probably going to be wrong ot invalid? also any reason why we chose these specific values?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>public function getMediumFormatsAction($id): FOSRestView<keep>{<keep>$media = $this->getMedium($id);<add>$mediaContext = $media->getContext();<keep>$formats = [MediaProviderInterface::FORMAT_REFERENCE];<del>$formats = array_merge($formats, array_keys($this->mediaPool->getFormatNamesByContext($media->getContext())));<add><add>if (null !== $mediaContext) {<add>$formats = array_merge($formats, array_keys($this->mediaPool->getFormatNamesByContext($mediaContext)));<add>}<keep>$provider = $this->mediaPool->getProvider($media->getProviderName());", "output": "Shouldn't we throw an exception if the context is null instead ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>except ImportError:<keep>GRAPHVIZ_INSTALLED = False<add>\"\"\"datatable\"\"\"<add>try:<add>from datatable import DataTable<add>DT_INSTALLED = True<add>except ImportError:<add>DT_INSTALLED = False<add><add>class DataTable(object):<add>\"\"\"Dummy class for DataTable.\"\"\"<add><add>pass<add><add><keep>\"\"\"sklearn\"\"\"<keep>try:<keep>from sklearn.base import BaseEstimator", "output": "@guolinke Don't you mind to rename this variable to `DATATABLE_INSTALLED`, for the consistency with other variables (for example, there are `PANDAS_INSTALLED` but not `PD_INSTALLED`). Also, `DT` is a little bit confusing: sometimes `dt` is used for `datetime`."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>package block<keep>import (<add>\"github.com/iotexproject/iotex-core/pkg/log\"<add>\"go.uber.org/zap\"<keep>\"google.golang.org/protobuf/proto\"<keep>\"github.com/iotexproject/iotex-proto/golang/iotextypes\"", "output": "move this line together to after line 16, group internal packages together"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return ProviderType<keep>}<del>func (p *Provider) RunQuery(ctx context.Context, query string, queryRange metrics.QueryRange, evaluator metrics.Evaluator) (bool, string, error) {<add>// Evaluate queries the range query endpoint and checks if values in all data points are within the expected range.<add>// For the range query endpoint, see: https://prometheus.io/docs/prometheus/latest/querying/api/#range-queries<add>func (p *Provider) Evaluate(ctx context.Context, query string, queryRange metrics.QueryRange, evaluator metrics.Evaluator) (bool, string, error) {<keep>if err := queryRange.Validate(); err != nil {<keep>return false, \"\", err<keep>}", "output": "So `queryRange.Step` will be ignored?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>import path from 'path';<add>import execa from 'execa';<add>import {<add>displayErrorMessage<add>} from '../../scripts/utils/console.mjs';<add><add>((async function() {<add>try {<add>await execa('npm', ['run', 'swap-package-links'], {<add>cwd: path.resolve(process.cwd(), '..'),<add>stdio: 'inherit'<add>});<add><add>} catch (error) {<add>displayErrorMessage('Error running the script.');<add>process.exit(error.exitCode);<add>}<add>})());", "output": "I'm not sure if there are any links to swap for Handosntable package. Should this be a top lvl script?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>`\\n\\n${getOwnerStack(vnode)}`<keep>);<keep>} else if (type != null && typeof type === 'object') {<del>if (type._lastDomChild !== undefined && type._dom !== undefined) {<add>if (type._lastDomChildSibling !== undefined && type._dom !== undefined) {<keep>throw new Error(<keep>`Invalid type passed to createElement(): ${type}\\n\\n` +<keep>'Did you accidentally pass a JSX literal as JSX twice?\\n\\n' +", "output": "Hmm I think I might've messed up this condition here... Need to look more at it"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>)<keep>var (<del>supportedPolicies = make(map[string]func() Policy)<add>supportedPolicies = make(map[string]func(string) Policy)<keep>)<keep>type staticUpstream struct {", "output": "Or maybe `func(args ...string) Policy` to make it dynamic in case of any future policy that may require more than one args."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>CHECK_SEMANTIC_VALUE(\"\\\"\\\\\\\\\\\\\\110 \\\"\", TokenType::STRING, \"\\\\H \"),<keep>CHECK_SEMANTIC_VALUE(\"\\\"\\\\\\\\\\\\\\\\110 \\\"\", TokenType::STRING, \"\\\\\\\\110 \"),<keep>CHECK_SEMANTIC_VALUE(\"\\\"\\\\\\\\\\\\\\\\\\110 \\\"\", TokenType::STRING, \"\\\\\\\\H \"),<add><add><add>CHECK_SEMANTIC_VALUE(\"\\\"己所不欲，勿施于人\\\"\", TokenType::STRING, \"己所不欲，勿施于人\"),<keep>};<keep>#undef CHECK_SEMANTIC_TYPE<keep>#undef CHECK_SEMANTIC_VALUE", "output": "before the fix, does this sentence make service crash? My point is can you re-produce the problem. I'm not sure the bug is due to non-asiic code"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return err<keep>}<del>if !gopts.JSON && parentSnapshotID != nil {<del>p.V(\"using parent snapshot %v\\n\", parentSnapshotID.Str())<add>if !gopts.JSON {<add>if parentSnapshotID != nil {<add>p.P(\"using parent snapshot %v\\n\", parentSnapshotID.Str())<add>} else {<add>p.P(\"no parent snapshot found, will read all files\\n\")<add>}<keep>}<keep>selectByNameFilter := func(item string) bool {", "output": "I suggest \"no parent snapshot found, will read all data\\n\"."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>this.colour_ = colour;<keep>if (this.sourceBlock_) {<del>this.sourceBlock_.setColour(<del>colour,<del>this.sourceBlock_.getColourSecondary(),<del>this.sourceBlock_.getColourTertiary()<del>);<add>// Set the primary, secondary and tertiary colour to this value.<add>this.sourceBlock_.setColour(colour, colour, colour);<keep>}<keep>};", "output": "Would you explain why here please? E.g. from the PR description > the renderer expects to be able to use the secondary color as the fill for a shadow."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"context\"<keep>\"encoding/hex\"<keep>\"math/big\"<add>\"net\"<add>\"strconv\"<del>\"github.com/golang/protobuf/jsonpb\"<keep>\"github.com/golang/protobuf/proto\"<del>peerstore \"github.com/libp2p/go-libp2p-peerstore\"<keep>\"github.com/pkg/errors\"<keep>\"github.com/prometheus/client_golang/prometheus\"<keep>\"go.uber.org/zap\"<add>\"google.golang.org/grpc\"<add>\"google.golang.org/grpc/reflection\"<keep>\"github.com/iotexproject/iotex-core/action\"<keep>\"github.com/iotexproject/iotex-core/actpool\"", "output": "File is not `goimports`-ed (from `goimports`)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>class ProgressBarsController < ApplicationController<add><add>def show<add>_trail = Trail.find(params[:trail_id])<add>@trail = TrailWithProgress.new(_trail, user: current_user)<add>render layout: false<add>end<add>end", "output": "Extra empty line detected at class body beginning."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// https://dev.mysql.com/doc/refman/8.0/en/time.html<keep>public class TimeType extends DataType {<add>public static final TimeType TIME = new TimeType(MySQLType.TypeDuration);<keep>public static final MySQLType[] subTypes = new MySQLType[] {MySQLType.TypeDuration};<keep>protected static final long NANOSECOND = 1;<keep>protected static final long MICROSECOND = 1000 * NANOSECOND;", "output": "why do we create a time type here?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>xsurface->fullscreen = 0;<keep>xcb_atom_t *atom = xcb_get_property_value(reply);<keep>for (uint32_t i = 0; i < reply->value_len; i++) {<del>if (atom[i] == xwm->atoms[_NET_WM_STATE_FULLSCREEN])<add>if (atom[i] == xwm->atoms[_NET_WM_STATE_FULLSCREEN]) {<keep>xsurface->fullscreen = true;<del>if (atom[i] == xwm->atoms[_NET_WM_STATE_MAXIMIZED_VERT])<add>}<add>if (atom[i] == xwm->atoms[_NET_WM_STATE_MAXIMIZED_VERT]) {<keep>xsurface->maximized_vert = true;<del>if (atom[i] == xwm->atoms[_NET_WM_STATE_MAXIMIZED_HORZ])<add>}<add>if (atom[i] == xwm->atoms[_NET_WM_STATE_MAXIMIZED_HORZ]) {<keep>xsurface->maximized_horz = true;<add>}<keep>}<keep>}", "output": "Can you replace these by `else if` please?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>user (domain.spotify.Spotify): the same user with updated tokens<keep>\"\"\"<keep>auth = get_spotify_oauth()<del>new_token = auth.refresh_access_token(spotify_user.refresh_token)<add><add>retries = 5<add>new_token = None<add>while retries > 0:<add>new_token = auth.refresh_access_token(spotify_user.refresh_token)<add>if new_token is not None:<add>break<add>retries -= 1<add>if new_token is None:<add>raise SpotifyAPIError('Could not refresh API Token for Spotify user')<add><keep>access_token = new_token['access_token']<keep>refresh_token = new_token['refresh_token']<keep>expires_at = new_token['expires_at']", "output": "either make this a config or a constant we can define at the top. Burying this in the code is no good."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>decoder := xml.NewDecoder(r.HTTPResponse.Body)<keep>err := xmlutil.UnmarshalXML(r.Data, decoder, \"\")<keep>if err != nil {<del>r.Error = awserr.New(\"SerializationError\", \"failed decoding EC2 Query response\", err)<add>r.Error = awserr.NewRequestFailure(<add>awserr.New(\"SerializationError\", \"failed decoding EC2 Query response\", err),<add>r.HTTPResponse.StatusCode,<add>\"\",<add>)<keep>return<keep>}<keep>}", "output": "Need to populate the `RequestID` field for these errors. This can be obtained from r.RequestID i think, but need to make sure. The `r.RequestID` should of been populated from the `UnmarshalMeta` handler list."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># wait for backend port to be opened<keep>wait_for_port_open(PORT_DYNAMODB_BACKEND, http_path=\"/\", expect_success=False, sleep_time=1)<keep># check DynamoDB<del>out = aws_stack.connect_to_service(\"dynamodb\").list_tables()<add>endpoint_url = f\"http://127.0.0.1:{PORT_DYNAMODB_BACKEND}\"<add>out = aws_stack.connect_to_service(\"dynamodb\", endpoint_url=endpoint_url).list_tables()<keep>except Exception as e:<keep>if print_error:<keep>LOGGER.error(\"DynamoDB health check failed: %s %s\" % (e, traceback.format_exc()))", "output": "nit: If we want to squeeze out a few more milliseconds from the startup, we may actually be able to remove this line (`wait_for_port_open(PORT_DYNAMODB_BACKEND, http_path=\"/\", ...` should already be sufficient to ensure that the service is up and responding to HTTP requests). Thoughts?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>private CircuitBreakerManager initCircuitBreakerManager() {<del>CircuitBreakerManager circuitBreakerManager = CircuitBreakerManager.build(solrConfig);<add>final PluginInfo info = solrConfig.getPluginInfo(CircuitBreakerManager.class.getName());<add>CircuitBreakerManager circuitBreakerManager = CircuitBreakerManager.build(info.initArgs);<keep>return circuitBreakerManager;<keep>}", "output": "Make `CircuitBreakerManager` implement `PluginInfoInitialized`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>package de.danoeh.antennapod.core.storage;<add><add>import android.support.annotation.NonNull;<add><add>import de.danoeh.antennapod.core.feed.FeedFile;<add><add>public interface FeedFileDownloadStatusRequesterInterface {<add>/**<add>* @return {@code true} if the named feedfile is in the downloads list<add>*/<add>boolean isDownloadingFile(@NonNull FeedFile item);<add><add>}", "output": "Could this be done by mocking objects instead? I feel like this is changing too much of the actual logic just for the tests."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>require 'spec_helper'<keep>describe '#create' do<del>it 'sets the payment_method on Purchase to free' do<add>it 'sets the payment_method on Purchase to subscription' do<keep>user = create(:user, :with_subscription)<keep>create_subscriber_purchase(create(:book_product), user)<del>user.purchases.last.payment_method.should == 'free'<add>user.purchases.last.payment_method.should eq 'free'<add>user.purchases.last[:payment_method].should eq 'subscription'<keep>end<keep>it 'sets the comments on the purchase if provided' do", "output": "I'm confused as to how these are both passing."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>HashBlake2b(data []byte) [32]byte<keep>ComputeUnsealedSectorCID(ctx context.Context, proof abi.RegisteredProof, pieces []abi.PieceInfo) (cid.Cid, error)<keep>VerifySeal(ctx context.Context, info abi.SealVerifyInfo) error<del>VerifyPoSt(ctx context.Context, info abi.PoStVerifyInfo) error<del>VerifyConsensusFault(ctx context.Context, h1, h2, extra []byte, head block.TipSetKey, view SyscallsStateView, earliest abi.ChainEpoch) (*specsruntime.ConsensusFault, error)<add>VerifyWinningPoSt(ctx context.Context, info abi.WinningPoStVerifyInfo) error<add>VerifyPoSt(ctx context.Context, info abi.WindowPoStVerifyInfo) error<add>VerifyConsensusFault(ctx context.Context, h1, h2, extra []byte, head block.TipSetKey, view SyscallsStateView) (*specsruntime.ConsensusFault, error)<keep>}<keep>type syscalls struct {", "output": "Either I'm missing something or specs actors should remove this call cc @anorth"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// and add the test data to it<keep>var htmlpath = file.originalPath.replace(extRegex, '.html');<keep>var html = fs.readFileSync(htmlpath, 'utf-8');<del>var test = JSON.parse(content);<add>try {<add>var test = JSON.parse(content);<add>} catch (e) {<add>throw new Error('Unable to parse content of ' + file.originalPath)<add>}<keep>test.content = html;<keep>var result = template.replace('{}; /*tests*/', JSON.stringify(test));", "output": "Encountered this because I had a stray comma. Figured I'd tweak it a bit."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<del><div id=\"ncr-layout\"><add><div id=\"gsa18f-layout\"><keep><table class=\"w-container main-container\" width='800'><keep><tr><keep><td>", "output": "Just verifying: this change doesn't break the 18f layout, right?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>Thread.currentThread().interrupt();<keep>throw new WebDriverException(\"Timed out waiting for driver server to stop.\", e);<keep>} finally {<del>executorService.shutdownNow();<add>executorService.shutdown();<keep>}<keep>} else {", "output": "For the command executor, which in turn, uses the HTTP client to talk to the WebDriver, the client might have high-timeout values set, so the shutdown can take a long time if we wait for it to complete, especially if multiple-long running threads are there. I think it might be a good idea in general to couple the shutdown() with `awaitTermination()` with a timeout, if the ongoing tasks do not complete within that timeout then call `shutdownNow()`. What do you think?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>{<keep>/* Be careful: we can't directly de-ref any ptrs b/c they can be >4GB */<keep>LDR_MODULE_64 mod;<del>if (!get_ldr_module_64(name, NULL, &mod))<add>if (!get_ldr_module_64(name, 0, &mod))<keep>return NULL;<keep>return mod.BaseAddress;<keep>}", "output": "NULL change, could you move that out too?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>ASTMethodDeclaration node = acu.findDescendantsOfType(ASTMethodDeclaration.class).get(0);<keep>Scope s = node.getScope();<keep>Map<NameDeclaration, List<NameOccurrence>> m = s.getDeclarations();<del>for (Iterator<NameDeclaration> i = m.keySet().iterator(); i.hasNext();) {<del>NameDeclaration d = i.next();<del>assertEquals(\"buz\", d.getImage());<del>assertEquals(\"ArrayList\", ((TypedNameDeclaration) d).getTypeImage());<del>List<NameOccurrence> u = m.get(d);<add>for (Map.Entry<NameDeclaration, List<NameOccurrence>> entry : m.entrySet()) {<add>assertEquals(\"buz\", entry.getKey().getImage());<add>assertEquals(\"ArrayList\", ((TypedNameDeclaration) entry.getKey()).getTypeImage());<add>List<NameOccurrence> u = m.get(entry.getKey());<keep>assertEquals(1, u.size());<keep>NameOccurrence o = u.get(0);<keep>int beginLine = o.getLocation().getBeginLine();", "output": "This is wrong, should be `entry.getValue()`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>def display_search_ui?<keep>current_user && current_user.client_model && !client_disabled?<keep>end<add><keep>end", "output": "looks like you added newlines after blocks in a few files - I generally like newlines before/after multi-line blocks _except_ when the end the block is directly nested inside another block (eg: two `end`s next to each other) what do you think?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>throw new Error('No readPreference was provided or inherited.');<keep>}<del>return readPreference;<add>return typeof readPreference === 'string' ? new ReadPreference(readPreference) : readPreference;<keep>}<keep>/**", "output": "is this something we've been missing this whole time?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>private CsrfTokenRepository csrfTokenRepository = new HttpSessionCsrfTokenRepository();<keep>private RequestMatcher requireCsrfProtectionMatcher = CsrfFilter.DEFAULT_CSRF_MATCHER;<keep>private List<RequestMatcher> ignoredCsrfProtectionMatchers = new ArrayList<RequestMatcher>();<add>private String cookieName;<add>private String cookiePath;<keep>/**<keep>* Creates a new instance", "output": "The formatting is a little off here."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>RestProducerInvocation restProducerInvocation = new RestProducerInvocation();<keep>context.put(RestConst.REST_PRODUCER_INVOCATION, restProducerInvocation);<add>restProducerInvocation.setAfterCreateInvocationHandler(<add>invocation -> context.put(RestConst.REST_INVOCATION_CONTEXT, invocation));<keep>restProducerInvocation.invoke(transport, requestEx, responseEx, httpServerFilters);<keep>}<keep>}", "output": "both edge and normal need to set this, so set it to be default action?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>using System.Collections.Generic;<keep>using Nethermind.Core;<add>using Nethermind.Core.Crypto;<keep>namespace Nethermind.Consensus<keep>{<keep>public interface IPendingTxSelector<keep>{<del>IEnumerable<Transaction> SelectTransactions(long gasLimit);<add>IEnumerable<Transaction> SelectTransactions(Keccak stateRoot, long gasLimit);<keep>}<keep>}", "output": "stateRoot or maybe ParentHeader would make more sense from API point of view?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>ip = ''<keep>if File.file?(@vagrant_file) #we should have a vagrant file available to us for reading<keep>f = File.read(@vagrant_file)<del>m = /#{hostname}.*?ip:\\s*('|\")\\s*([^'\"]+)('|\")/m.match(f)<add>m = /'#{hostname}'.*?ip:\\s*('|\")\\s*([^'\"]+)('|\")/m.match(f)<keep>if m<keep>ip = m[2]<keep>@logger.debug(\"Determined existing vagrant box #{hostname} ip to be: #{ip} \")", "output": "Seems like this might need to allow for `\"`s to be used here?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>namespace Fixtures.Azure.SwaggerBatSubscriptionIdApiVersion<add>{<add>using System;<add>using System.Collections;<add>using System.Collections.Generic;<add>using System.Threading;<add>using System.Threading.Tasks;<add>using Microsoft.Rest;<add>using Microsoft.Azure;<add>using Models;<add><add>public static partial class MicrosoftAzureTestUrlExtensions<add>{<add>}<add>}", "output": "We should file a bug for this - we don't need the extensions class if there are no operations on the client"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return sys.stdin.read()<add>def _load_reporter_by_class(reporter_class: str) -> type:<add>qname = reporter_class<add>module_part = astroid.modutils.get_module_part(qname)<add>module = astroid.modutils.load_module_from_name(module_part)<add>class_name = qname.split(\".\")[-1]<add>return getattr(module, class_name)<add><add><keep># Python Linter class #########################################################<keep>MSGS = {", "output": "I checked the tests coverage and strangely it look like those three lines are not covered (?!). Do you have the same result on your side ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>end<keep>rescue Exception => teardown_exception<add>begin<add>if !host.is_pe?<add>dump_puppet_log(host)<add>end<add>rescue Exception => dumping_exception<add>logger.error(\"Raised during attempt to dump puppet logs: #{dumping_exception}\")<add>end<add><keep>if original_exception<keep>logger.error(\"Raised during attempt to teardown with_puppet_running_on: #{teardown_exception}\\n---\\n\")<keep>raise original_exception", "output": "We'd lose the data here from the original teardown_exception and only get the dump_exception - I fear that that could make the actual error difficult to track if it cascades."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"google.golang.org/grpc/status\"<keep>)<del>type peerTrackerAttestor struct {<add>type PeerTrackerAttestor struct {<keep>Attestor attestor.Attestor<keep>}<del>func (a peerTrackerAttestor) Attest(ctx context.Context) ([]*common.Selector, error) {<add>func (a PeerTrackerAttestor) Attest(ctx context.Context) ([]*common.Selector, error) {<keep>watcher, ok := peertracker.WatcherFromContext(ctx)<keep>if !ok {<keep>return nil, status.Error(codes.Internal, \"peer tracker watcher missing from context\")", "output": "This requires updating the name in the `endpoints` tests, please run `make test`."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"sync\"<keep>\"time\"<add>\"github.com/aws/amazon-ecs-agent/agent/containerresource\"<add>\"github.com/aws/amazon-ecs-agent/agent/containerresource/containerstatus\"<add><keep>apicontainerstatus \"github.com/aws/amazon-ecs-agent/agent/api/container/status\"<del>apierrors \"github.com/aws/amazon-ecs-agent/agent/api/errors\"<add>apierrors \"github.com/aws/amazon-ecs-agent/agent/apierrors\"<keep>\"github.com/aws/amazon-ecs-agent/agent/credentials\"<keep>resourcestatus \"github.com/aws/amazon-ecs-agent/agent/taskresource/status\"", "output": "not blocking: can we remove extra lines here?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>nxp.ClockIpLpi2c2.Enable(false) //<keep>nxp.ClockIpLpi2c3.Enable(false) //<keep>nxp.DivIpLpi2c.Div(0)           // divide LPI2C_CLK_PODF (DIV1)<del>nxp.MuxIpLpi2c.Mux(0)           // LPI2C select PLL3_SW_60M<add>nxp.MuxIpLpi2c.Mux(1)           // LPI2C select OSC<keep>nxp.ClockIpCan1.Enable(false)  // disable CAN<keep>nxp.ClockIpCan2.Enable(false)  //", "output": "ClockIpLpi2c4.Enable() is required. The same change is required for enablePeripheralClocks()."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return []market.ServiceProposal{}, nil<keep>}<add>// Countries returns proposals per country matching the filter.<add>func (r *Repository) Countries(filter *proposal.Filter) (map[string]int, error) {<add>return nil, nil<add>}<add><keep>// Start begins proposals synchronization to storage.<keep>func (r *Repository) Start() error {<keep>return nil", "output": "just looks like you should return an **empty map** with nil error"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>memset(fpga_perf, 0, sizeof(fpga_perf_counter));<add>//check if its being run as root or not<add>uid_t uid = getuid();<add>if (uid != 0) {<add>fpga_perf->previlege = false;<add>return FPGA_OK;<add>} else {<add>fpga_perf->previlege = true;<add>}<add><keep>ret = get_fpga_sbdf(token, &segment, &bus, &device, &function);<keep>if (ret != FPGA_OK) {<keep>OPAE_ERR(\"Failed to get sbdf\");", "output": "Hi Ramya, rather than checking here in the perf counter library, we should add the privilege check in the host_exerciser app."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>'tenacity>=5.1.1',<keep>'tqdm>=4.32',<keep>'requests_futures==1.0.0',<add>'jsonschema==3.*',<keep>],<keep>extras_require={<keep>'pyarrow': [", "output": "are we not asking for trouble here by not pinning this? or does 3.* imply all of the draft versions we'd try to validate?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>@BindView(R.id.listNutrientLevels) ListView lv;<keep>@BindView(R.id.textServingSize) TextView serving;<keep>@BindView(R.id.textCarbonFootprint) TextView carbonFootprint;<add>@BindView(R.id.txtNoDataString)TextView noTextString;<keep>private CustomTabActivityHelper customTabActivityHelper;<keep>private Uri nutritionScoreUri;", "output": "missing space before `TextView`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># may not be available on the system<keep>\"QSslSocket: cannot resolve SSLv3_client_method\",<keep>\"QSslSocket: cannot resolve SSLv3_server_method\",<add># When enabling debugging with QtWebEngine<add>\"Remote debugging server started successfully. Try pointing a \"<add>\"Chromium-based browser to \",<keep>]<keep>if sys.platform == 'darwin':<keep>suppressed_msgs += [", "output": "You somehow got a change from `master` into your branch again, in e6d2167085688264e5ee6a81cfd2a7a8f10ded13. While it's not something terribly bad (as it will be fine after merging), it's kind of confusing, and I have no idea how it happens :laughing: Are you trying to update changes from `master` while working on your branch somehow? How do you do that?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>};<keep>/**<del>* Whether this field references any Blockly variables.  If true it may need to<del>* be handled differently during serialization and deserialization.  Subclasses<del>* may override this.<del>* @return {boolean} True if this field has any variable references.<add>* Overrides referencesVariables(), indicating this field refers to a variable.<add>* @return {boolean} True.<keep>* @package<add>* @override<keep>*/<keep>Blockly.FieldVariable.prototype.referencesVariables = function() {<keep>return true;", "output": "Changed per review in Blockly."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// TimeOffset defines the delta time of injected program<keep>TimeOffset TimeOffset `json:\"timeOffset\"`<add>// ClockIds defines all affected clock id<add>// All available options are [\"CLOCK_REALTIME\",\"CLOCK_MONOTONIC\",\"CLOCK_PROCESS_CPUTIME_ID\",\"CLOCK_THREAD_CPUTIME_ID\",\"CLOCK_MONOTONIC_RAW\",\"CLOCK_REALTIME_COARSE\",\"CLOCK_MONOTONIC_COARSE\",\"CLOCK_BOOTTIME\",\"CLOCK_REALTIME_ALARM\",\"CLOCK_BOOTTIME_ALARM\"]<add>// Default value is [\"CLOCK_REALTIME\"]<add>ClockIds []string `json:\"clockIds,omitempty\"`<add><keep>// Duration represents the duration of the chaos action<keep>Duration *string `json:\"duration\"`", "output": "this line is so long, split it to multi lines."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>{<keep>public const int Iterations = 4000000;<del>public static volatile object VolatileObject;<del><keep>[MethodImpl(MethodImplOptions.NoInlining)]<del>private static void Escape(object obj)<del>{<del>VolatileObject = obj;<del>}<add>private static void Escape(object _) { }<keep>[Benchmark(Description = nameof(Regula))]<keep>public bool Test()", "output": "should we have a common `Escape()` method that can be used everywhere?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>* size for tabular files.<keep>*/<keep>public static String getDownloadSize(DatasetVersion dsv, boolean original) {<add>return FileSizeChecker.bytesToHumanReadable(getDownloadSizeNumeric(dsv, original));<add>}<add><add>public static Long getDownloadSizeNumeric(DatasetVersion dsv, boolean original) {<keep>long bytes = 0l;<keep>for (FileMetadata fileMetadata : dsv.getFileMetadatas()) {<keep>DataFile dataFile = fileMetadata.getDataFile();", "output": "we can just have this method call the next, passing in the file metadatas (deduplication of logic)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>GlobalOpts: NewGlobalOpts(),<keep>}<keep>cmd := &cobra.Command{<del>Hidden: true, //TODO remove when ready for production!<keep>Use:    \"show\",<keep>Short:  \"Shows info about a deployed environment.\",<keep>Long:   \"Shows info about a deployed environment, including region, account ID, and services.\",", "output": "Are there any other templates where this command needs to be added, or were those issues specific to storage requiring us to enable a new command group?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return hosts;<keep>}<add>std::string NetworkUtils::toHosts(const std::vector<HostAddr>& hosts) {<add>std::string hostsString = \"\";<add>for (auto& host : hosts) {<add>std::string addrStr = network::NetworkUtils::ipFromHostAddr(host);<add>int32_t port = network::NetworkUtils::portFromHostAddr(host);<add>hostsString += folly::stringPrintf(\"%s:%d, \", addrStr.c_str(), port);<add>}<add>if (!hostsString.empty()) {<add>hostsString.resize(hostsString.size() - 2);<add>}<add>return hostsString;<add>}<add><keep>std::string NetworkUtils::ipFromHostAddr(const HostAddr& host) {<keep>return intToIPv4(host.first);<keep>}", "output": "concatHosts may be a better func name to explain this?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep><%= f.label :additional_info, 'Please include any additional information you feel we need to correctly execute the purchase' %><keep><%= f.text_area :additional_info, class: 'form-control' %><keep></div><del><%= f.submit class: 'form-button' %><add><% unless ENV['DISABLE_SANDBOX_WARNING'] == 'true' %><add><%= f.submit value: 'Submit test request for approval', class: 'form-button' %><add><% else %><add><%= f.submit class: 'form-button' %><add><% end %><keep><% if @model_instance.persisted? %><keep><%= link_to 'Discard Changes', proposal_url(@model_instance.proposal) %><keep><% end %>", "output": "Since we have the same logic in both forms, can we make a shared partial/helper for it?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>package azkaban.imagemgmt.utils;<add><add>public interface ImageMgmtConstants {<add>public static final String IMAGE_TYPE = \"imageType\";<add>public static final String IMAGE_VERSION = \"imageVersion\";<add><add>}", "output": "Can you please move this interface as class in common Constants file in az-core module?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>dst.Spec.NetworkSpec.VPC.AvailabilityZoneSelection = restored.Spec.NetworkSpec.VPC.AvailabilityZoneSelection<keep>}<add>dst.Spec.NetworkSpec.SecurityGroupOverrides = restored.Spec.NetworkSpec.SecurityGroupOverrides<add>dst.Spec.NetworkSpec.TagSecurityGroups = restored.Spec.NetworkSpec.TagSecurityGroups<add><keep>return nil<keep>}", "output": "I think we might need some special handling for `Spec.ControlPlaneLoadBalancer.SecurityGroups`, it looks like we are currently only handling the case that `Spec.ControlPlaneLoadBalancer` is nil."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>/// <summary><del>///   Looks up a localized string similar to Non-HTTPS/HTTP schemes have limited support.<add>///   Looks up a localized string similar to Azure Resource Management only supports HTTPS scheme..<keep>/// </summary><keep>public static string SupportedSchemesWarningMessage {<keep>get {", "output": "nit: I'm assuming you have verified this is what the error message should read like"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// +build !linux !cgo !seccomp<keep>package patchbpf<del><del>import (<del>\"errors\"<del><del>\"github.com/opencontainers/runc/libcontainer/configs\"<del><del>libseccomp \"github.com/seccomp/libseccomp-golang\"<del>)<del><del>func PatchAndLoad(config *configs.Seccomp, filter *libseccomp.ScmpFilter) error {<del>if config != nil {<del>return errors.New(\"cannot patch and load seccomp filter without runc seccomp support\")<del>}<del>return nil<del>}", "output": "perhaps file can be removed altogether (trying to avoid an empty package for these build tags)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// List open with filtering<keep>resp, err2 := s.VisibilityMgr.ListOpenWorkflowExecutionsByType(&visibility.ListWorkflowExecutionsByTypeRequest{<del>ListWorkflowExecutionsRequest: visibility.ListWorkflowExecutionsRequest{<add>ListWorkflowExecutionsRequest: &visibility.ListWorkflowExecutionsRequest{<keep>NamespaceID:       testNamespaceUUID,<keep>PageSize:          2,<keep>EarliestStartTime: startTime,", "output": "ListWorkflowExecutionsRequest <- this can be nil?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import py.path  # pylint: disable=no-name-in-module<keep>import helpers.stubs as stubsmod<add>from helpers.utils import CallbackChecker<keep>from qutebrowser.config import config, configdata, configtypes, configexc<keep>from qutebrowser.utils import objreg, standarddir<keep>from qutebrowser.browser.webkit import cookies<keep>from qutebrowser.misc import savemanager, sql<keep>from qutebrowser.keyinput import modeman<del>from PyQt5.QtCore import pyqtSignal, QEvent, QSize, Qt, QObject<add>from PyQt5.QtCore import QEvent, QSize, Qt<keep>from PyQt5.QtGui import QKeyEvent<keep>from PyQt5.QtWidgets import QWidget, QHBoxLayout, QVBoxLayout<keep>from PyQt5.QtNetwork import QNetworkCookieJar", "output": "Please import modules and not classes (except for Qt stuff)."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>from .affine_grid_generator import affine_grid<keep>from .context_block import ContextBlock<keep>from .dcn import (DeformConv, DeformConvPack, DeformRoIPooling,<keep>DeformRoIPoolingPack, ModulatedDeformConv,<keep>ModulatedDeformConvPack, ModulatedDeformRoIPoolingPack,<keep>deform_conv, deform_roi_pooling, modulated_deform_conv)<add>from .grid_sampler import grid_sample<keep>from .masked_conv import MaskedConv2d<keep>from .nms import nms, soft_nms<keep>from .roi_align import RoIAlign, roi_align", "output": "`affine_grid` and `grid_sample` are currently unused. We may remove it from `ops/__init__.py` to speedup the loading of mmdet."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>const { useHandsontable } = require('./use-handsontable');<add>const { getDependencies } = require('./dependencies');<add>const { register } = require('./register');<add><add>if (module) {<add>module.exports = {<add>useHandsontable,<add>instanceRegister: register,<add>getDependencies,<add>applyToWindow: () => {<add>/* eslint-disable no-restricted-globals */<add>if ((typeof window !== 'undefined')) {<add>window.useHandsontable = useHandsontable;<add>window.instanceRegister = register;<add>}<add>/* eslint-enable no-restricted-globals */<add>}<add>};<add>}", "output": "We have Vue application at our disposal, and have examples container implemented as component. Shouldn't helpers be imported instead being global? Not the best practice in Vue app I guess"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>EnablePprof bool<keep>DNS01CheckRetryPeriod time.Duration<add><add>// Annotations copied Certificate -> CertificateRequest,<add>// CertificateRequest -> Order. Slice of string literals that are<add>// treated as prefixes for annotation keys.<add>CopiedAnnotations []string<keep>}<keep>const (", "output": "What about Secrets, are we not also trying to cover those?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if ($cart !== null) {<keep>$this->cartWatcherFacade->checkCartModifications($cart);<add><add>if ($cart->isEmpty()) {<add>$this->deleteCart($cart);<add><add>return null;<add>}<keep>}<keep>return $cart;", "output": "i hope there is some magic where isEmpty or some cron can strip all non listable products from cart, but since we have the situation tested it should be OK and also we'll see during tests"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>def set_record_timestamp(self, collection_id, parent_id, record,<keep>modified_field=DEFAULT_MODIFIED_FIELD,<keep>last_modified=None):<del>timestamp = self._bump_timestamp(collection_id, parent_id, record,<del>modified_field,<del>last_modified=last_modified)<add>timestamp = self._bump_and_store_timestamp(collection_id, parent_id, record,<add>modified_field,<add>last_modified=last_modified)<keep>record[modified_field] = timestamp<keep>return record", "output": "If the `MemoryBasedStorage` relies on a `self._bump_and_store_timestamp()`, then every child class will have to implement it. So it should not be prefixed with `_`. And should raise `NotImplementedError` etc. :)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>FilterHolder<keep>filterHolder = servletContextHandler.addFilter(CrossOriginFilter.class, \"/*\", EnumSet<keep>.of(DispatcherType.REQUEST));<del>filterHolder.setInitParameter(\"allowedOrigins\", \"*\");<add>filterHolder.setInitParameter(\"allowedMethods\", \"GET,POST,PUT,DELETE,HEAD\");<keep>// Warning user<keep>LOG.warning(\"You have enabled CORS requests from any host. \"", "output": "Because the default value of allowedOrigins is * (all origins), so it isn't necessary to set again at all."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>return &tls.Config{<add>MinVersion: tls.VersionTLS12,<keep>GetConfigForClient: func(hello *tls.ClientHelloInfo) (*tls.Config, error) {<keep>// filter policies by SNI first, if possible, to speed things up<keep>// when there may be lots of policies", "output": "Why add this here?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>assert(surface->role == WLR_XDG_SURFACE_ROLE_TOPLEVEL);<keep>surface->toplevel->server_pending.maximized = maximized;<del>return schedule_xdg_surface_configure(surface);<add>return wlr_xdg_surface_schedule_configure(surface);<keep>}<keep>uint32_t wlr_xdg_toplevel_set_fullscreen(struct wlr_xdg_surface *surface,", "output": "This function is what **the compositor** calls when it wants to fullscreen a client, not what the client calls."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>error: err => console.log(err)<keep>},<keep>schema: [{<del>name: 'Dog',<del>primaryKey: '_id',<add>name: \"Dog\",<add>primaryKey: \"_id\",<keep>properties: {<del>_id: 'objectId?',<del>breed: 'string?',<del>name: 'string',<del>realm_id: 'string?',<add>_id: \"objectId?\",<add>breed: \"string?\",<add>name: \"string\",<add>realm_id: \"string?\",<keep>}<keep>}]<keep>};", "output": "Looks like this is for debugging? Maybe just remove."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import { render } from '../../../../../tests/js/test-utils';<keep>import { STORE_NAME } from '../datastore/constants';<del>const setupAdBlockerRegistry = async ( registry ) => {<del>await registry.dispatch( STORE_NAME ).receiveIsAdBlockerActive( true );<add>const setupAdBlockerRegistry = ( registry ) => {<add>registry.dispatch( STORE_NAME ).receiveSettings( {} );<add>registry.dispatch( STORE_NAME ).receiveIsAdBlockerActive( true );<keep>};<del>const setupNoAdBlockerRegistry = async ( registry ) => {<del>await registry.dispatch( STORE_NAME ).receiveIsAdBlockerActive( false );<add>const setupNoAdBlockerRegistry = ( registry ) => {<add>registry.dispatch( STORE_NAME ).receiveSettings( {} );<add>registry.dispatch( STORE_NAME ).receiveIsAdBlockerActive( false );<keep>};<keep>describe( 'AdBlockerWarning', () => {", "output": "This is something I added which resolved a few large errors in the output, although not related to the refactor here I don't think."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>stds = deltas.new_tensor(stds).unsqueeze(0)<keep>deltas = deltas.sub_(means).div_(stds)<del>return deltas<add>return deltas.cuda()<keep>def delta2bbox(rois,", "output": "Is this still necessary?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>autoStake  = true<keep>index      = uint64(10)<keep>senderKey  = identityset.PrivateKey(27)<add>zero       = \"0\"<add>negtive    = \"-10\"<keep>)<keep>func TestCreateStake(t *testing.T) {", "output": "again: it is a bad practice to have some global parameters with such common names for unit test purpose."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import graphql.schema.DataFetcher;<keep>import graphql.schema.DataFetchingEnvironment;<add><keep>import org.openqa.selenium.grid.distributor.Distributor;<keep>import org.openqa.selenium.internal.Require;", "output": "We can revert this to reduce the diff of the PR."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>bbox_head = self.bbox_head[stage]<keep>bbox_feats = bbox_roi_extractor(<keep>x[:len(bbox_roi_extractor.featmap_strides)], rois)<del>if self.with_semantic and 'bbox' in self.semantic_fusion:<add><add># bbox_feats.shape[0] > 0 is mean the number of proposal is not 0.<add>if self.with_semantic and 'bbox' in self.semantic_fusion and \\<add>bbox_feats.shape[0] > 0:<keep>bbox_semantic_feat = self.semantic_roi_extractor([semantic_feat],<keep>rois)<keep>if bbox_semantic_feat.shape[-2:] != bbox_feats.shape[-2:]:", "output": "\\`bbox_feats.shape[0] > 0\\` requires the number of proposal is not 0."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>case \"{dir}\":<keep>dir, _ := path.Split(r.request.URL.Path)<keep>return dir<add>case \"{user}\":<add>user, _ := r.request.Context().Value(RemoteUserCtxKey).(string)<add>if user == \"\" {<add>user = \"-\"<add>}<add>return user<keep>case \"{request}\":<keep>dump, err := httputil.DumpRequest(r.request, false)<keep>if err != nil {", "output": "I don't think we need an empty value here; any middleware that wants a default value for empty placeholders will pass in what that value should be."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>ctx, cancel := context.WithTimeout(ctx, pingTimeout)<keep>defer cancel()<add>start := time.Now()<add><keep>// check if the underlay is usable by doing a raw ping using libp2p<keep>if _, err = s.streamer.Ping(ctx, multiUnderlay); err != nil {<add>s.metrics.PingTime.Observe(float64(time.Since(start).Milliseconds()))<keep>s.metrics.UnreachablePeers.Inc()<keep>s.logger.Debugf(\"hive: peer %s: underlay %s not reachable\", hex.EncodeToString(newPeer.Overlay), multiUnderlay)<keep>return<keep>}<add>s.metrics.PingTime.Observe(float64(time.Since(start).Milliseconds()))<keep>bzzAddress := bzz.Address{<keep>Overlay:     swarm.NewAddress(newPeer.Overlay),", "output": "wouldn't it be useful to split this into an error metric for the timing?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>/** Runs searches for each segment separately, using the<del>*  provided Executor. NOTE:<add>*  provided Executor. The passed in Executor will also be<add>*  used by LRUQueryCache (if enabled) to perform asynchronous<add>*  query caching.<add>*  If a task is rejected by the host Executor, the failed task<add>*  will then be executed on the caller thread. This is done to<add>*  ensure that a query succeeds, albeit with a higher latency.<add>*  If a user wishes to modify the said behaviour, they can either<add>*  handle the exception in the provided Executor, or override<add>*  the said method in a custom extension of IndexSearcher.<add>*  NOTE:<keep>*  if you are using {@link NIOFSDirectory}, do not use<keep>*  the shutdownNow method of ExecutorService as this uses<keep>*  Thread.interrupt under-the-hood which can silently", "output": "it's unclear to me which method you are recommending overriding?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>'runnning locally.')<keep>flags.DEFINE_integer('max_admin_api_calls_per_day', 150000,<keep>'Admin SDK queries per day.')<add>flags.DEFINE_integer('max_results_admin_api', 500,<add>+                     'maxResult param for the Admin SDK list() method')<keep>class AdminDirectoryClient(_base_client.BaseClient):", "output": "nit: align the leftmost quotes"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>#include \"monster.h\"<keep>#include \"scheduler.h\"<keep>#include \"databasetasks.h\"<add>#include \"actions.h\"<add>#include \"movement.h\"<add>#include \"weapons.h\"<add>#include \"globalevent.h\"<add>#include \"events.h\"<keep>extern Chat* g_chat;<keep>extern Game g_game;", "output": "That's a huge load of new dependencies. I think it's better to create a reload function on ScriptManager and control with enum instead."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>torch.cuda.synchronize()<keep>time_backward += timer.since_last_check()<keep>bar.update()<del>print('\\nCARAFE time forward: {} ms/iter | time backward: {} ms/iter'.format(<del>(time_forward + 1e-3) * 1e3 / loop_num,<del>(time_backward + 1e-3) * 1e3 / loop_num))<add>print(f'\\nCARAFE time forward: {(time_forward + 1e-3) * 1e3 / loop_num} '<add>f'ms/iter | time backward: {(time_backward + 1e-3) * 1e3 / loop_num}'<add>' ms/iter')<keep>time_naive_forward = 0<keep>time_naive_backward = 0", "output": "Compute `(time_forward + 1e-3) * 1e3 / loop_num` ahead."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>$maxQueryCount = 0;<keep>$isSuccessful = true;<keep>$worstStatusCode = null;<add>$performanceTestSample = null;<keep>foreach ($performanceTestSamplesOfUrl as $performanceTestSample) {<keep>/* @var $performanceTestSample \\Tests\\ShopBundle\\Performance\\Page\\PerformanceTestSample */", "output": "wow :+1: , i do not even know how this test works."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return cb.Controller, nil<keep>}<del>// addSpc is the add event handler for spc.<add>// addSpc is the add event handler for spc<keep>func (c *Controller) addSpc(obj interface{}) {<keep>spc, ok := obj.(*apis.StoragePoolClaim)<keep>if !ok {<keep>runtime.HandleError(fmt.Errorf(\"Couldn't get spc object %#v\", obj))<keep>return<keep>}<add>if spc.Labels[string(apis.OpenEBSUpgradeKey)] == \"true\" {<add>glog.Infof(\"spc %s is not reconciled reason upgrade value: %s\", spc.Name, spc.Labels[string(apis.OpenEBSUpgradeKey)])<add>return<add>}<keep>glog.V(4).Infof(\"Queuing SPC %s for add event\", spc.Name)<keep>c.enqueueSpc(spc)<keep>}", "output": "This logic should be handled at informer handle functions i.e. AddFunc, UpdateFunc, DeleteFunc"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>'filtered',<keep>'sorted',<keep>'snapshot',<add>'subscribe',<keep>'isValid',<keep>'indexOf',<keep>'min',", "output": "Have we reached binding-level agreement on the `subscribe` terminology? My only concern is that it doesn't seem descriptive enough and may be confused with subscribing for notifications."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># Path to the pyspark program passed to spark-submit<keep>app = os.path.join(os.path.dirname(__file__), 'pyspark_runner.py')<del># Python only supports the client deploy mode, force it<del>deploy_mode = \"client\"<keep>@property<keep>def name(self):", "output": "Was this an intentional deletion? Why not just allow overwrite of `deploy_mode`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>}<add>// WithInstalledTimestamp adds the specified InstalledTimestamp to ClusterDeployment.Status<add>func WithInstalledTimestamp(timestamp metav1.Time) Option {<add>return func(clusterDeployment *hivev1.ClusterDeployment) {<add>clusterDeployment.Status.InstalledTimestamp = &timestamp<add>}<add>}<add><keep>func WithUnclaimedClusterPoolReference(namespace, poolName string) Option {<keep>return WithClusterPoolReference(namespace, poolName, \"\")<keep>}", "output": "Can we use the existing `InstalledTimestamp` function?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>@Override<keep>public InjectableStepsFactory stepsFactory() {<del>Map<String, Object> state = new HashMap<String, Object>();<add>Map<String, Object> state = new HashMap<>();<keep>return new InstanceStepsFactory(configuration(),<keep>new SharedSteps(state),", "output": "Isn't he diamond operator Java7+?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// A valid Certificate requires at least one of a CommonName, DNSName, or<keep>// URISAN to be valid.<keep>type CertificateSpec struct {<add>// Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).<add>// If specified, overrides any other name elements below.<add>// +optional<add>X509Name *X509DistinguishedName `json:\"x509Name,omitempty\"`<add><keep>// CommonName is a common name to be used on the Certificate.<keep>// The CommonName should have a length of 64 characters or fewer to avoid<keep>// generating invalid CSRs.", "output": "Can we rename this field to `Subject`? Looking around, it seems like 'subject' is the standard terminology for this stanza  "}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<del>import { createElement, createContext } from '../../';<add>import { createElement, createContext } from '../../src';<keep>import { expect } from 'chai';<del>/** @jsx createElement */<keep>/* eslint-env browser, mocha */<keep>describe('createContext', () => {", "output": "Oh interesting - does web-test-runner not resolve package.json files?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>#possible log levels are DEBUG, IO, DEBUGWARNING, INFO<keep>loggingLevel = string(default=\"INFO\")<keep>showWelcomeDialogAtStartup = boolean(default=true)<add>showSpeechViewerAtStartup = boolean(default=false)<keep># Speech settings<keep>[speech]", "output": "Perhaps move this option into a separate speechViewer section, as we are planning to also save position information as well."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>DataFile copy();<keep>/**<del>* @return a list of offsets for file blocks if applicable, null otherwise. When available, this<del>* information is used for planning scan tasks whose boundaries are determined by these offsets.<add>* @return List of offsets for blocks of a file, if applicable, null otherwise.<add>* When available, this information is used for planning scan tasks whose boundaries<add>* are determined by these offsets.It is important that the returned list is sorted<add>* in ascending order.<keep>*/<keep>List<Long> splitOffsets();<keep>}", "output": "Nit: missing a space. I think we should phrase the new content a little differently. \"It is important\" isn't very clear. I think it should be \"offsets will be returned in sorted order.\""}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>## Tools ##<keep>###########<add>def issubtype(x, t):<add>\"\"\"issubtype(C, B) -> bool<add><add>Return whether C is a class and if it is a subclass of class B.<add>When using a tuple as the second argument issubtype(X, (A, B, ...)),<add>is a shortcut for issubtype(X, A) or issubtype(X, B) or ... (etc.).<add>\"\"\"<add>return isinstance(x, type) and issubclass(x, t)<add><keep>def get_temp_file(keep=False, autoext=\"\"):<keep>\"\"\"Create a temporary file and return its name. When keep is False,<del>the file is deleted when scapy exits.<add>the file is deleted when scapy exits.<keep>\"\"\"<keep>fname = tempfile.NamedTemporaryFile(prefix=\"scapy\", suffix=autoext,", "output": "Docstring would be nice"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>addr := identityset.Address(28)<keep>_, err = accountutil.LoadOrCreateAccount(sm, addr.String())<keep>require.NoError(err)<del>stateDB := NewStateDBAdapter(sm, 0, !cfg.Genesis.IsAleutian(0),<del>cfg.Genesis.IsGreenland(0), cfg.Genesis.IsKamchatka(0),<del>cfg.Genesis.IsLordHowe(0), hash.ZeroHash256)<add>opt := []StateDBAdapterOption{NotFixTopicCopyBugOption()}<add>stateDB := NewStateDBAdapter(sm, 0, hash.ZeroHash256, opt...)<add><keep>contract := addr.Bytes()<keep>var evmContract common.Address<keep>copy(evmContract[:], contract[:])", "output": "`stateDB := NewStateDBAdapter(sm, 0, hash.ZeroHash256, NotFixTopicCopyBugOption())`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>public override Task<ExportResult> ExportAsync(<keep>IEnumerable<Activity> batch, CancellationToken cancellationToken)<keep>{<add>// Exporter code which can generate further<add>// telemetry should do so inside SuppressInstrumentation<add>// scope. This suppresses telemetry from<add>// exporter's own code to avoid live-loop situation.<keep>using var scope = Sdk.SuppressInstrumentation.Begin();<keep>foreach (var activity in batch)", "output": "Should we explain more here?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>gid       uint32<keep>pid       int32<keep>mtx       sync.Mutex<del>procfh    *os.File<add>procfh    int<keep>starttime string<keep>uid       uint32<keep>}", "output": "nit: `procfd` seems more appropriate now?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>func (d *ContianerRecordDecoder) DecodeContainerRecord(ctx context.Context, record *v1alpha1.Record) (decoded DecodedContainerRecord, err error) {<keep>var pod v1.Pod<del>podId, containerName := controller.ParseNamespacedNameContainer(record.Id)<add>podId, containerName, err := controller.ParseNamespacedNameContainer(record.Id)<add>if err != nil {<add>// TODO: organize the error in a better way<add>err = NewFailToFindContainer(pod.Namespace, pod.Name, containerName, err)<add>return<add>}<keep>err = d.Client.Get(ctx, podId, &pod)<keep>if err != nil {<keep>// TODO: organize the error in a better way", "output": "If it parses failed, both of the `containerName` and `podId` should be the empty strings, it's non-sense to define this error, I suggest just return it."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>self._sdf = sdf<keep>self._metadata = self._metadata.copy(column_fields=names)<add>@property<add>def dtypes(self):<add>\"\"\"Return the dtypes in the DataFrame.<add><add>This returns a Series with the data type of each column. The result's index is the original<add>DataFrame's columns. Columns with mixed types are stored with the object dtype.<add><add>:return: :class:`pd.Series` The data type of each column.<add>\"\"\"<add>return pd.Series([self[col].dtype for col in self._metadata.column_fields],<add>index=self._metadata.column_fields)<add><keep>@derived_from(pd.DataFrame, ua_args=['axis', 'level', 'numeric_only'])<keep>def count(self):<keep>return self._sdf.count()", "output": "can we add an example?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>};<keep>}<add><add>@Override<add>public void visit(QueryVisitor visitor) {<add>QueryVisitor v = visitor.getSubVisitor(Occur.FILTER, this);<add>if (v != null) {<add>query.visit(v);<add>}<add>}<keep>}", "output": "redundant null check?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>package testutils<add><add>import (<add>\"os\"<add>\"path\"<add>)<add><add>func TestDataFile(name string) string {<add>dir, _ := os.Getwd()<add><add>return path.Join(dir, \"testdata\", name)<add>}", "output": "Would it make sense to create an empty file here, perhaps in a tmp dir, instead of checking empty files into Git?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>{<keep>using (var response = await client.SendAsync(request).ConfigureAwait(false))<keep>{<del>if (response.StatusCode != HttpStatusCode.OK &&<del>response.StatusCode != HttpStatusCode.Accepted)<del>{<del>var statusCode = (int)response.StatusCode;<del>}<add>// disposing response<keep>}<keep>}", "output": "We can do away with assigning the response here too."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return append(getWindowsReplaceableVersions(), MinDockerAPIWindows)<keep>}<del>// getDefaultVersion returns agent's default version of the Docker API<add>// GetDefaultVersion returns agent's default version of the Docker API<keep>func getDefaultVersion() DockerVersion {<keep>return MinDockerAPIWindows<keep>}", "output": "Please revert this file."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"\"\" Testing for data_transfer.py \"\"\"<keep>### Python imports<add>from io import BytesIO<keep>import pathlib<keep>from unittest import mock<keep>### Third-party imports<keep>from botocore.stub import ANY<add>from botocore.exceptions import ReadTimeoutError<keep>import pandas as pd<keep>import pytest", "output": "This seems unused."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>/**<add>* Copyright @ 2018-present. All rights reserved by Vesoft Inc.<add>* Author: Fenglin Hou <dutor@vesoft-inc.com><add>*/<add>#include \"parser/AstTypes.h\"<add><add>namespace vesoft {<add><add><add><add>}", "output": "Please do not add author here"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>epType := tc.EpTypeHost<keep>if ifaceName == \"tunl0\" {<keep>epType = tc.EpTypeTunnel<add>} else if ifaceName == \"wireguard.cali\" {<add>epType = tc.EpTypeWireguard<keep>}<keep>ap := m.calculateTCAttachPoint(epType, polDirection, ifaceName)<keep>ap.HostIP = m.hostIP", "output": "nit: a switch perhaps?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>Type() semantic.MonoType<keep>}<add>// ITableObject serves as sort of a \"marker trait\" to allow us to check if a<add>// value is a TableObject without having to import TableObject which would be a<add>// cyclical import.<add>// Identical purpose to the interface in the interpreter package, but sadly we<add>// can't import it here because of yet another potential cycle.<add>type ITableObject interface {<add>TableObject()<add>}<add><keep>type Value interface {<keep>Typer<keep>IsNull() bool", "output": "Can we name this `TableObject`? I'm not a big fan of the `I` prefix for interfaces and that's not really used in Go. Is it also possible to have the method be unexported? I don't know if that's possible. If it's not, this is good. If it is possible, I'd prefer this method to be unexported."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>ta.Keyinfo[\"alfa\"].PriKey, 3, big.NewInt(10), []byte{}, testutil.TestGasLimit,<keep>big.NewInt(testutil.TestGasPriceInt64))<del>testTransferPb = testTransfer.Proto()<add>testTransferHash = testTransfer.Hash()<add>testTransferPb   = testTransfer.Proto()<keep>testExecution, _ = testutil.SignedExecution(ta.Addrinfo[\"bravo\"].String(),<keep>ta.Keyinfo[\"bravo\"].PriKey, 1, big.NewInt(0), testutil.TestGasLimit,<keep>big.NewInt(testutil.TestGasPriceInt64), []byte{})<del>testExecutionPb = testExecution.Proto()<add>testExecutionHash = testExecution.Hash()<add>testExecutionPb   = testExecution.Proto()<keep>testTransfer1, _ = testutil.SignedTransfer(ta.Addrinfo[\"charlie\"].String(), ta.Keyinfo[\"producer\"].PriKey, 1,<keep>big.NewInt(10), []byte{}, testutil.TestGasLimit, big.NewInt(testutil.TestGasPriceInt64))", "output": "`testExecutionPb` is a global variable (from `gochecknoglobals`)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"fmt\"<keep>\"testing\"<del>\"github.com/golang/protobuf/proto\"<add>legacyProto \"github.com/golang/protobuf/proto\" // nolint: staticcheck // deprecated library needed until WithDetails can take v2<keep>\"github.com/spiffe/spire/pkg/common/nodeutil\"<keep>\"github.com/spiffe/spire/proto/spire/common\"<keep>\"github.com/spiffe/spire/proto/spire/types\"<keep>\"github.com/stretchr/testify/require\"<keep>\"google.golang.org/grpc/codes\"<keep>\"google.golang.org/grpc/status\"<add>\"google.golang.org/protobuf/proto\"<keep>)<keep>func TestIsAgentBanned(t *testing.T) {", "output": "We may create an issue to track this so we don't forget?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// @ts-ignore<keep>const purest = require('purest')({ request })<keep>const logger = require('../logger')<del><add>const DRIVE_FILE_FIELDS = 'kind,id,name,mimeType,ownedByMe,permissions(role,emailAddress),size,modifiedTime,iconLink,thumbnailLink'<add>const DRIVE_FILES_FIELDS = `kind,nextPageToken,incompleteSearch,files(${DRIVE_FILE_FIELDS})`<keep>/**<keep>* @class<keep>* @implements {Provider}", "output": "why do we need to explicitly declare these fields?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>* External dependencies<keep>*/<keep>import PropTypes from 'prop-types';<add>import { useInView } from 'react-intersection-observer';<keep>/**<keep>* WordPress dependencies<keep>*/<del>import { useCallback } from '@wordpress/element';<add>import { useCallback, useEffect } from '@wordpress/element';<keep>import { __ } from '@wordpress/i18n';<keep>/**", "output": "I have concerns about using this in more places before #3278 - I'll take a look at that again shortly."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>},<keep>},<add>{<add>name: \"Add cluster region label\",<add>existing: []runtime.Object{<add>testClusterDeploymentWithoutRegionLabel(),<add>},<add>validate: func(c client.Client, t *testing.T) {<add>cd := getCD(c)<add>if assert.NotNil(t, cd, \"missing clusterdeployment\") {<add>assert.Equal(t, getClusterRegion(cd), cd.Labels[hivev1.HiveClusterRegionLabel], \"incorrect cluster region label\")<add>}<add>},<add>},<keep>{<keep>name: \"Ensure cluster metadata set from provision\",<keep>existing: []runtime.Object{", "output": "This expected value should probably be what you literally expect, otherwise there's a chance getClusterRegion is doing something wrong and the test wouldn't catch it because it's being run for both expected and actual."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>var fileSize uint64<keep>ta := s.createTag(w, r)<add>if ta == nil {<add>return<add>}<keep>// Add the tag to the context<keep>r = r.WithContext(context.WithValue(r.Context(), tags.TagsContextKey{}, ta))", "output": "I would skip this check or add an internal server error response."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>resolved_results, _, returncode = get_diff_results(<keep>[self._run_names[0]], [baseline_file_path], '--resolved', 'json',<del>[\"--url\", self._url])<add>[\"--url\", self._url,<add>\"--review-status\", \"unreviewed\", \"confirmed\", \"false_positive\"])<keep>print(resolved_results)<keep>self.assertTrue(resolved_results)", "output": "I don't see any test cases which would test that fix dates are set properly on review status changes / storage events. For this reason please create some more test cases and also check my scenarios above."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>{<keep>ulong mask = 0;<keep>ulong comp = 0;<del>for (var scan = 0; scan != count; ++scan)<add>for (var scan = 0; scan < count; scan++)<keep>{<keep>var ch = (byte)name[offset + count - scan - 1];<keep>var isAlpha = (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z');", "output": "@halter73 where is this file generated from?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>var indexes = steps.slice(1).map(function(step) {<del>var index = parseInt(step);<del>index += step != index.toString() ? HDPrivateKey.Hardened : 0;<add>var index = step ? +step : NaN;<add><add>var isHardened = isNaN(index) && step[step.length-1] == \"'\";<add>if (isHardened) {<add>index = (+(step.slice(0, -1))) + HDPrivateKey.Hardened;<add>}<add><keep>return index;<keep>});", "output": "This code is way too complicated for what it does. I don't want to be a PITA, but what can you consider rewriting it in a simpler way? I'm talking about the whole `_getDerivationIndexes` function"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>end<keep>end<add>describe \"#exit_early\" do<add>it \"returns the passed exit code\" do<add>expect(reporter.exit_early(42)).to eq(42)<add>end<add><add>it \"reports zero examples\" do<add>allow(reporter).to receive(:report)<add>reporter.exit_early(42)<add>expect(reporter).to have_received(:report).with(0)<add>end<add>end<add><keep>describe \"#report\" do<keep>it \"supports one arg (count)\" do<keep>reporter.report(1) {}", "output": "Nearly there! This should assert on the output, take the result of \"start\" and \"finish\" as an example :)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>Integer.MAX_VALUE - 2, \"_pos\", Types.LongType.get(), \"Ordinal position of a row in the source data file\");<keep>public static final NestedField IS_DELETED = NestedField.required(<keep>Integer.MAX_VALUE - 3, \"_deleted\", Types.BooleanType.get(), \"Whether the row has been deleted\");<add>public static final NestedField SPEC_ID = NestedField.required(<add>Integer.MAX_VALUE - 4, \"_spec_id\", Types.IntegerType.get(), \"Spec ID to which a row belongs to\");<add>// the partition column type is not static and depends on all specs in the table<add>public static final int PARTITION_COLUMN_ID = Integer.MAX_VALUE - 5;<add>public static final String PARTITION_COLUMN_NAME = \"_partition\";<add>public static final String PARTITION_COLUMN_DOC = \"Partition to which a row belongs to\";<keep>// IDs Integer.MAX_VALUE - (101-200) are used for reserved columns<keep>public static final NestedField DELETE_FILE_PATH = NestedField.required(", "output": "Nit: no need for \"to\" at the end of the doc because it already uses \"to which\"."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>_, err := fakeKubeClient.CoreV1().Pods(\"openebs\").Create(podObjet)<keep>if err != nil {<del>glog.Errorf(\"Fake pod object could not be created:\", err)<add>glog.Error(\"Fake pod object could not be created:\", err)<keep>}<keep>}<keep>}", "output": "No formatting directives, `glog.Error` will do just fine."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>current_linear_approval?(cart, user)<keep>end<add># Todo: Move this to an NCR specific template?<add>def display_restart?(cart, user)<add>cart.ncr? && user == cart.requester && (cart.pending? || cart.rejected?)<add>end<add><keep>def parallel_approval_is_pending?(cart, user)<keep>return false unless cart.parallel?<keep>if approval = Approval.find_by(cart_id: cart.id, user_id: user.id)", "output": "Minor: you can access `current_user` in here directly - don't need to pass it in. Unless you prefer passing it explicitly?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>log \"github.com/sirupsen/logrus\"<add>librarygocontroller \"github.com/openshift/library-go/pkg/controller\"<add><keep>corev1 \"k8s.io/api/core/v1\"<keep>apierrors \"k8s.io/apimachinery/pkg/api/errors\"<add>metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"<keep>\"k8s.io/apimachinery/pkg/runtime\"<keep>\"k8s.io/client-go/util/flowcontrol\"<keep>\"k8s.io/client-go/util/workqueue\"<add>\"k8s.io/utils/pointer\"<keep>\"sigs.k8s.io/controller-runtime/pkg/client\"<keep>\"sigs.k8s.io/controller-runtime/pkg/controller\"", "output": "nit: just for consistency we can move this import block down. Right above openshift/hive imports"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// NATProviderPinger pings provider and optionally hands off connection to consumer proxy.<keep>type NATProviderPinger interface {<del>PingProvider(ip string, providerPort, consumerPort, proxyPort int, stop <-chan struct{}) error<add>PingProvider(ip string, cPorts, pPorts []int, proxyPort int) (*net.UDPConn, error)<keep>}<keep>// NATPinger is responsible for pinging nat holes", "output": "Not sure if it's a good idea to remove stop channel. If user cancels connection how will you stop pinger?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>inferences = self._multiStepCompute(rawInput=inputRecord)<keep># For temporal classification. Not used, and might not work anymore<keep>elif self._isClassificationModel():<del>inferences = self._classificationCompute()<del><del>results.inferences.update(inferences)<del><del>inferences = self._anomalyCompute()<add>inferences = self._classifcationCompute()<add>else:<add>inferences = self._anomalyCompute()<add><keep>results.inferences.update(inferences)<keep># -----------------------------------------------------------------------", "output": "`classification` is misspelled"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>// Ok, ready to start pulling.<keep>err := conn.Receive(ctx, func(ctx context.Context, m *pubsub.Message) {<del>logger.Info(\"got an event!\")<keep>msg := &Message{<keep>Attributes: m.Attributes,<keep>Data:       m.Data,", "output": "Instead of patching vendor, let's update the version of sdk-go to a more recent one that doesn't have this line."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>// package samples contains sample programs using the pubsub API.<add>package samples", "output": "Please add the Copyright header."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>config := &envConfig<add>if config.OnPrem.Enabled() {<add>if config.AWSRegion == \"\" {<add>return nil, errors.New(\"AWS_DEFAULT_REGION has to be set when running on-premises\")<add>}<add>// Use fake ec2 metadata client if on prem config is set.<add>ec2client = ec2.NewBlackholeEC2MetadataClient()<add>}<add><keep>if config.complete() {<keep>// No need to do file / network IO<keep>return config, nil", "output": "should we validate that AWSRegion has also been set here so that we don't get into the if-block that relies on the ec2 metadata client below?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>end<keep>def preferred_languages<del>@preferred_languages ||= Locale.list(languages)<add>Locale.list(languages)<keep>end<keep>def nearby(radius = NEARBY_RADIUS, num = NEARBY_USERS)", "output": "Rather than just getting rid of the memoization maybe we should use an `after_save` filter to set it to `nil` so that it will be recomputed on next read?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>break;<keep>}<keep>case Blockly.OUTPUT_VALUE: {<del>// Don't offer to connect an already connected left (male) value plug to<del>// an available right (female) value plug.<del>if (candidate.targetConnection || this.targetConnection) {<del>return false;<del>}<del>break;<add>// Can't drag an input to an output--you have to move the inferior block.<add>return false;<keep>}<keep>case Blockly.INPUT_VALUE: {<keep>// Offering to connect the left (male) of a value block to an already", "output": "Glad we fixed this as well. Blockly is going to be left as-is for this case, right?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if (strcmp(name, \"xwayland\") == 0) {<keep>if (strcasecmp(value, \"true\") == 0) {<keep>config->xwayland = true;<add>} else if (strcasecmp(value, \"lazy\") == 0) {<add>config->xwayland = true;<add>config->xwayland_lazy = true;<keep>} else if (strcasecmp(value, \"false\") == 0) {<keep>config->xwayland = false;<keep>} else {", "output": "I don't think this should enable xwayland, because it's convenient to toggle xwayland just by setting `xwayland` to `false`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>for (auto it = parser_.included_files_.begin();<keep>it != parser_.included_files_.end(); ++it) {<del>auto noext = flatbuffers::StripExtension(it->first);<add>auto noext = flatbuffers::StripExtension(it->second);<keep>auto basename = flatbuffers::StripPath(noext);<keep>if (basename != file_name_) {<keep>code_ += \"#include \\\"\" + parser_.opts.include_prefix +", "output": "This should now be made into `if (it->second.empty())` ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import android.webkit.URLUtil;<keep>import org.apache.commons.io.FileUtils;<add>import org.shredzone.flattr4j.model.User;<keep>import org.xml.sax.SAXException;<keep>import java.io.File;", "output": "This change (import org.shredzone.flatter4j.model.User;) does not seem relevant to this fix / commit."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>* A literal string.<keep>* <br/><code>\"Hello World!\"</code><keep>* <br/><code>\"\\\"\\n\"</code><add>* <br/><code>\"\\u2122\"</code><keep>* <br/><code>\"™\"</code><keep>* <br/><code>\"💩\"</code><keep>*", "output": "I am not sure what GitHub wants to tell me with this icon here :)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>end<keep>describe \"#its\" do<add><add>it \"should issue deprecation warning\" do<add>expect_deprecation_with_call_site(__FILE__, __LINE__+1, '\"its\" method')<add>RSpec::Core::ExampleGroup.its(nil) {}<add>end<add><keep>subject do<keep>Class.new do<keep>def initialize", "output": "It'd be nice to assert the right deprecation is being raised, just add a third argument of `/\"its\" method/`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>using System;<keep>using System.Diagnostics;<keep>using System.Numerics;<add>using System.Runtime.CompilerServices;<keep>using System.Threading;<keep>namespace Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure<keep>{<keep>public struct MemoryPoolIterator<keep>{<add>private static readonly ulong _powerOfTwoToHighByte = PowerOfTwoToHighByte();<keep>private static readonly int _vectorSpan = Vector<byte>.Count;<keep>private MemoryPoolBlock _block;", "output": "Why is this required to turn the static readonlies into jitted const? Is this a bug in the jitter?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>* references an outer class -- as its ancestor, return the declaration corresponding to the class name specified.<keep>*/<keep>protected Node findContainingTypeDeclOrObjectCreationExpr(Node node, String className) {<del>if (node instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration) node).getFullyQualifiedName().get().equals(className)) {<add>if (node instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration) node).getFullyQualifiedName().get().endsWith(className)) {<keep>return node;<keep>}<keep>if (node instanceof EnumDeclaration) {", "output": "I was thinking about this for #2928 too, which also uses `endsWith`... Presumably `SomeOtherObject` would match `endsWith(\"Object\")`, meaning that something more sophisticated like splitting it then iterating right to left would be needed in order to do this robustly?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>end<keep>def ruby_version<del>config[:rvm].to_s.gsub(/-(1[89]|2[01])mode$/, '-d\\1')<add>vers = config[:rvm].to_s.gsub(/-(1[89]|2[01])mode$/, '-d\\1')<add>force_187_p371 vers<keep>end<keep>def setup_rvm", "output": "Another nitpick: parens around the arg pretty please"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>stdout=devnull, stderr=subprocess.STDOUT)<keep>except (subprocess.CalledProcessError, OSError):<keep>return False<add>except FileNotFoundError as fnfe:<add>return False<keep>else:<keep>return r == 0", "output": "Could you simply add it to the previous clause ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>forceUpdateFollowPath = true;<keep>}<keep>} else {<add>stopEventWalk();<add><keep>if (listWalkDir.empty()) {<keep>onWalkComplete();<keep>}<del><del>stopEventWalk();<keep>}<keep>}", "output": "Walk should actually be completed (`onWalkCompleted`) after the event is stopped.   This also makes it possible for monster to walk by smaller paths."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>when 'file'<keep>{ flags: ACTION_OPTS + %w[tmpdir],<keep>banner: FILE_HELP }<add>when 'inventory'<add>{ flags: OPTIONS[:inventory] + OPTIONS[:global] + %w[format inventoryfile boltdir configfile],<add>banner: INVENTORY_HELP }<keep>when 'plan'<keep>case action<keep>when 'convert'", "output": "Add `--format` as an option. Does it make sense to have all display options available? Also need to add `--inventoryfile` and possibly the global_config_options."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add><?php<add><add>declare(strict_types=1);<add><add>namespace Bolt\\Storage\\Query\\Directive;<add><add>use Bolt\\Storage\\Query\\QueryInterface;<add><add>/**<add>*  Directive a raw output of the generated query.<add>*/<add>class PrintQueryDirective<add>{<add>public function __invoke(QueryInterface $query): void<add>{<add>echo $query;<add>}<add>}", "output": "__toString() is not a part of QueryInterface"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return availableResources<keep>}<del>func (bt *backpressureTracker) getLimitInfo() (used int64, limit int64) {<del>return bt.used, bt.limit<add>func (bt *backpressureTracker) getLimitInfo() (used int64, limit float64) {<add>return bt.used, bt.currLimit()<keep>}<keep>type backpressureTrackerStatus struct {", "output": "Would it be too complicated to refactor `currLimit` to be an `int64`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"golang.org/x/net/context\"<keep>)<add>const (<add>numRekeyWorkers = 8<add>)<add><keep>type rekeyQueueEntry struct {<keep>id tlf.ID<keep>ch chan error", "output": "Any particular reason for 8? I feel like we could probably handle more..."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// FanoutName is the name used for the fanout container.<keep>FanoutName = \"fanout\"<keep>// RetryName is the name used for the retry container.<del>RetryName          = \"retry\"<del>BrokerCellLabelKey = \"brokerCell\"<add>RetryName             = \"retry\"<add>BrokerCellLabelKey    = \"brokerCell\"<add>BrokerSystemNamespace = \"cloud-run-events\"<keep>)<keep>var (", "output": "I don't think this is necessary since `CommonLabels` is a public func and every component name is also public constant."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return grpc.WithUserAgent(userAgentString(api))<keep>}<add>// AzureUserAgentPrefix returns a prefix that is used to set Azure SDK User-Agent to help with diagnostics.<add>func AzureUserAgentPrefix() string {<add>return fmt.Sprintf(\"%s/%s\", prefix, version)<add>}<add><keep>func userAgentString(api string) string {<keep>return fmt.Sprintf(\"%s/%s/%s\", prefix, api, version)<keep>}", "output": "For GCP we included the API name (see below) so you can distinguish between uses other than `blob` once they exist, WDYT?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>@SuppressWarnings(\"deprecation\")<keep>public class PhimpMe extends AppCompatActivity implements BottomNavigationView.OnNavigationItemSelectedListener //, android.view.GestureDetector.OnGestureListener<keep>{<del>public static Context ctx;<add>public static Context ctx ;<keep>public static File DataDirectory;<keep>public static final String PREFS_NAME = \"PhimpMePrefs\";<keep>public static final String DATABASE_NAME = \"PhimpMe\";", "output": "Remove the trailing white space"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>ExplicitBitVect bv(2048);<keep>AvalonTools::getAvalonFP(\"c1cocc1\", true, bv, 2048, false, true, 0x006FFF);<keep>BOOST_LOG(rdInfoLog) << \"c1cocc1 \" << bv.getNumOnBits() << std::endl;<del>TEST_ASSERT(bv.getNumOnBits() == 53);<add>TEST_ASSERT(bv.getNumOnBits() == 48);<keep>}<keep>{<keep>ExplicitBitVect bv(2048);<keep>AvalonTools::getAvalonFP(\"C1=COC=C1\", true, bv, 2048, false, true,<keep>0x006FFF);<keep>BOOST_LOG(rdInfoLog) << \"C1=COC=C1 \" << bv.getNumOnBits() << std::endl;<del>TEST_ASSERT(bv.getNumOnBits() == 53);<add>TEST_ASSERT(bv.getNumOnBits() == 48);<keep>}<keep>BOOST_LOG(rdInfoLog) << \"done\" << std::endl;", "output": "I believe that all the changes in this file are not valid for v1.2 of the Avalon toolkit."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>workingDir = workspaceRootDirectory;<keep>}<del>GeneralCommandLine commandLine = new GeneralCommandLine(runner.executableToDebug.getPath());<add>GeneralCommandLine commandLine = new GeneralCommandLine(runner.executableToDebug.getPath())<add>.withWorkDirectory(workingDir);<keep>commandLine.addParameters(handlerState.getExeFlagsState().getFlagsForExternalProcesses());<keep>commandLine.addParameters(handlerState.getTestArgs());", "output": "This was properly set above as `<target>.runfiles/<workspace_name>` (with a fallback to workspace root dir) but never used past this line."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import android.content.SharedPreferences;<keep>import android.content.res.Configuration;<keep>import android.database.DataSetObserver;<add>import android.graphics.Color;<keep>import android.os.Build;<keep>import android.os.Bundle;<keep>import android.os.Handler;", "output": "Please remove the unused imports :)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>public enum DatabasePreviewType {<keep>NONE(\"none\", PreviewType.NONE),<keep>TEXT(\"text\", PreviewType.TEXT),<del>ENCRYPTED(\"encrypted\", PreviewType.ENCRYPTED);<add>ENCRYPTED(\"encrypted\", PreviewType.ENCRYPTED),<add>FAILED_TO_LOAD(\"failedToLoad\", PreviewType.FAILED_TO_LOAD);<keep>private final String databaseValue;", "output": "Maybe just `FAILED`. We can't be sure loading was the thing that failed."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>}<keep>err = syscall.Exec(cmd, args, env)<del>return fmt.Errorf(\"Failed to exec %s: %s\", cmd, err)<add>if err != nil {<add>return fmt.Errorf(\"Failed to exec %s: %s\", cmd, err)<add>}<add>return nil<keep>}<keep>func rewriteEnvVars(env []string, from, to string) {", "output": "not sure how this got in master, but the linter is unhappy about it so I fixed it here"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if (target && cdpTargets.indexOf(target.toLowerCase()) === -1) {<keep>throw new error.InvalidArgumentError('invalid target value')<keep>}<add><add>if (debuggerAddress.match(/\\/se\\/cdp/)) {<add>if (debuggerAddress.match(\"ws:\\/\\/\", \"http:\\/\\/\")) {<add>return debuggerAddress.replace(\"ws:\\/\\/\", \"http:\\/\\/\")<add>}<add>return debuggerAddress<add>}<add><keep>const path = '/json/version'<keep>let request = new http.Request('GET', path)<keep>let client = new http.HttpClient('http://' + debuggerAddress)", "output": "if we are returning the `ws` here when passing in `se:cdp` we can just return it straight or do we have to make a request to get the `ws` address?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>func (w literalLoggable) GetValueAsInt64Slice(key string) []int64 { return w.int64s[key] }<keep>func (w literalLoggable) ReadSerialPortLogs() []string { return w.serials }<add><add>// SingleImageImportLoggable returns a Loggable that is pre-initialized with the metadata<add>// fields that are relevant when importing a single image file.<add>func SingleImageImportLoggable(fileFormat string, sourceSize, resultSize int64, serials []string) Loggable {<add>loggable := literalLoggable{<add>strings: map[string]string{importFileFormat: fileFormat},<add>int64s: map[string][]int64{<add>sourceSizeGb: {sourceSize},<add>targetSizeGb: {resultSize},<add>},<add>serials: serials,<add>}<add>return loggable<add>}", "output": "minor: can be in-lined in return"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return fmt.Errorf(\"lame duck grace period (%v) should be strictly lower than lame duck duration (%v)\",<keep>o.LameDuckGracePeriod, o.LameDuckDuration)<keep>}<add>if int64(o.MaxPayload) > o.MaxPending {<add>return fmt.Errorf(\"max_payload (%v) cannot be higher than max_pending (%v)\",<add>o.MaxPayload, o.MaxPending)<add>}<keep>// Check that the trust configuration is correct.<keep>if err := validateTrustedOperators(o); err != nil {<keep>return err", "output": "Should we add a warning for anything over say 8M? Just suggesting that is not recommended?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>public class BatchExportProcessor<T> : BaseExportProcessor<T><keep>where T : class<keep>{<add>public const int DefaultMaxQueueLength = 2048;<add>public const int DefaultScheduledDelayMilliseconds = 5000;<add>public const int DefaultTimeoutMilliseconds = 30000;<add>public const int DefaultMaxBatchSize = 512;<add><keep>private readonly CircularBuffer<T> circularBuffer;<keep>private readonly int scheduledDelayMilliseconds;<keep>private readonly int exporterTimeoutMilliseconds;", "output": "no need of pub;lic."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import (<keep>\"context\"<add>\"github.com/chaos-mesh/chaos-mesh/pkg/selector/generic\"<add><keep>\"go.uber.org/fx\"<keep>v1 \"k8s.io/api/core/v1\"<keep>\"sigs.k8s.io/controller-runtime/pkg/client\"", "output": "how about moving it under L26"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>await Promise.all( [<keep>expect( page ).toClick( '.googlesitekit-cta-link', { text: /set up analytics/i } ),<keep>page.waitForSelector( '.googlesitekit-setup-module--analytics' ),<del>page.waitForResponse( ( res ) => res.url().match( 'analytics/data' ) ),<add>page.waitForResponse( ( res ) => res.url().match( 'analytics/data/accounts-properties-profiles' ) ),<keep>] );<keep>}<del>const EXISTING_PROPERTY_ID = 'UA-00000001-1';<add>const existingTag = {<add>accountID: '999',<add>propertyID: 'UA-999-9',<add>};<keep>describe( 'setting up the Analytics module with no existing account and with an existing tag', () => {<keep>beforeAll( async () => {", "output": "I could've sworn I got a `403` myself when I got that response locally. Is `200` what the API would send back for a `permission: false` tag?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>}<del>public Task WriteAsync<T>(Func<PipeWriter, T, long> callback, T state)<add>public Task WriteAsync<T>(Func<PipeWriter, T, long> callback, T state, CancellationToken cancellationToken)<keep>{<keep>lock (_contextLock)<keep>{", "output": "This is only used for headers and therefore isn't used."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return this;<keep>}<del>public ScanBuilder select(String... columns) {<del>this.columns = ImmutableList.copyOf(columns);<add>public ScanBuilder select(String... selectColumns) {<add>this.columns = ImmutableList.copyOf(selectColumns);<keep>return this;<keep>}", "output": "What about `selectedColumns`? I believe it is frequently used throughout the project."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import graphql.schema.DataFetcher;<keep>import graphql.schema.DataFetchingEnvironment;<add><keep>import org.openqa.selenium.grid.distributor.Distributor;<keep>import org.openqa.selenium.internal.Require;", "output": "We can revert this to reduce the diff of the PR."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// Copy makes a deep copy of VolumeSpec<keep>func (s *VolumeSpec) Copy() *VolumeSpec {<keep>spec := *s<del>if s.VolumeLabels != nil {<del>spec.VolumeLabels = make(map[string]string)<del>for k, v := range s.VolumeLabels {<del>spec.VolumeLabels[k] = v<del>}<del>}<keep>if s.ReplicaSet != nil {<keep>spec.ReplicaSet = &ReplicaSet{Nodes: make([]string, len(s.ReplicaSet.Nodes))}<keep>copy(spec.ReplicaSet.Nodes, s.ReplicaSet.Nodes)", "output": "Migrate the spec.Labels to locator.Labels ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>for _, msg := range out.Messages {<keep>err := checksumsMatch(msg.Body, msg.MD5OfBody)<keep>if err != nil {<del>ids = append(ids, *msg.MessageId)<add>if msg.MessageId != nil {<add>ids = append(ids, *msg.MessageId)<add>}<keep>}<keep>}<keep>if len(ids) > 0 {", "output": "We probably want to log the fact that a `MessageId` was not present in the response. In addition the `RequestID` from `request.Request` should be included in the message so that the user is aware of the issue."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>describe AuthCallbacksController do<keep>context '#create' do<del>it 'redirects to the dashboard path without an auth origin' do<add>it 'redirects to the practice path without an auth origin' do<keep>request.env['omniauth.auth'] = OmniAuth.config.mock_auth[:github]<keep>request.env['omniauth.origin'] = nil<keep>get :create, provider: 'github'<del>should redirect_to(dashboard_url)<add>should redirect_to(practice_url)<keep>end<keep>end<keep>end", "output": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>if (AutoFireEnabled()) {<add>if (this->GetTarget() == this) {<add>this->MessageString(Chat::TooFarAway, TRY_ATTACKING_SOMEONE);<add>auto_fire = false;<add>}<keep>EQ::ItemInstance *ranged = GetInv().GetItem(EQ::invslot::slotRange);<keep>if (ranged)<keep>{", "output": "Shouldn't need this-> here."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>OwnerReferences: []metav1.OwnerReference{*metav1.NewControllerRef(ch, challengeGvk)},<keep>},<keep>Spec: corev1.PodSpec{<add>NodeSelector: map[string]string{<add>\"kubernetes.io/os\": \"linux\",<add>},<keep>RestartPolicy: corev1.RestartPolicyOnFailure,<keep>Containers: []corev1.Container{<keep>{", "output": "My only concern with changing the node selector here is that someone else _could_ have built their own images for other platforms and set them to be used using the flag override on the controller, which in turn this change would break. Perhaps not changing the selector for acmesolver pods makes most sense, and then working on actually having support for Windows? wdyt?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>timestamp = timestamp ? timestamp.toISOString().split('.')[0] : '';<keep>output.testSuites.push({<del>package:<del>suite.file.includes('functional') || suite.file.includes('integration')<del>? 'Functional'<del>: 'Unit',<add>package: suite.file.includes('integration') ? 'Functional' : 'Unit',<keep>id,<keep>name: className,<keep>timestamp,", "output": "This is a bit of a throwaway field in the xunit output, it doesn't impact anything on EVG, should we just name it `integration` now?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>package org.phoenicis.repository.repositoryTypes;<keep>import org.junit.Test;<del>import org.phoenicis.repository.repositoryTypes.NullRepository;<keep>import static org.junit.Assert.assertEquals;<keep>public class NullRepositoryTest {<keep>@Test<keep>public void testNullRepositoryTest() {<del>assertEquals(0, new NullRepository().fetchInstallableApplications().size());<add>assertEquals(null, new NullRepository().fetchInstallableApplications());<keep>}<keep>}", "output": "You may want to use assertNull"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>MAX_REQUEST_AREA:        <%= Settings.max_request_area.to_json %>,<keep>SERVER_PROTOCOL:         <%= Settings.server_protocol.to_json %>,<keep>SERVER_URL:              <%= Settings.server_url.to_json %>,<del>API_VERSION:             <%= Settings.api_version.to_json %>,<add>API_VERSION:             <%= Settings.api_versions.min_by(&:to_f).to_json %>,<keep>STATUS:                  <%= Settings.status.to_json %>,<keep>MAX_NOTE_REQUEST_AREA:   <%= Settings.max_note_request_area.to_json %>,<keep>OVERPASS_URL:            <%= Settings.overpass_url.to_json %>,", "output": "Why is this value set to \"min_by\", and what are the implications of it? Does `&:to_f` play nice with semver (e.g. 1.2.0)?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>proposalCh chan agreement.Message<keep>bundleCh   chan agreement.Message<del>net network.GossipNode<add>net           network.GossipNode<add>backgroundCtx context.Context<keep>}<keep>// WrapNetwork adapts a network.GossipNode into an agreement.Network.", "output": "What's the purpose of this `backgroundCtx` field?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// The test init properties file turns off being able to use $foreach.index (the implicit loop counter)<keep>// The foreach.vm template uses $!foreach.index, with ! suppressing the literal \"$foreach.index\" output<del>assertEquals(\"01\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocity\",VelocityResponseWriter.TEMPLATE,\"foreach\")));<del>assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithInitProps\",VelocityResponseWriter.TEMPLATE,\"foreach\")));<add>assertEquals(\"01\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocity\",VelocityResponseWriter.TEMPLATE,\"foreach\")).trim());<add>assertEquals(\"\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithInitProps\",VelocityResponseWriter.TEMPLATE,\"foreach\")).trim());<keep>// Turn off trusted configset, which disables the init properties<keep>h.getCoreContainer().getCoreDescriptor(h.coreName).setConfigSetTrusted(false);<keep>assertFalse(h.getCoreContainer().getCoreDescriptor(coreName).isConfigSetTrusted());<del>assertEquals(\"01\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithInitProps\",VelocityResponseWriter.TEMPLATE,\"foreach\")));<add>assertEquals(\"01\", h.query(req(\"q\",\"*:*\", \"wt\",\"velocityWithInitProps\",VelocityResponseWriter.TEMPLATE,\"foreach\")).trim());<keep>// set the harness back to the default of trusted<keep>h.getCoreContainer().getCoreDescriptor(h.coreName).setConfigSetTrusted(true);", "output": "For some reason these tests started failing due to an extra `NEWLINE` returned from `h.query()`. Have not tried to check whether this may be a problem for real templates or not, just fixed the failing tests. Anyone with an opinion here?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import static javaslang.collection.Comparators.naturalComparator;<keep>/**<del>* An {@link HashMap}-based implementation of {@link Multimap}<add>* An {@link TreeMap}-based implementation of {@link Multimap}<keep>*<keep>* @param <K> Key type<keep>* @param <V> Value type", "output": "'A' instead of 'An' here"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>switch startAttr.GetInitiator() {<keep>case enumspb.CONTINUE_AS_NEW_INITIATOR_RETRY:<keep>workflowBackoffType = enumsspb.WORKFLOW_BACKOFF_TYPE_RETRY<del>case enumspb.CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE,<del>enumspb.CONTINUE_AS_NEW_INITIATOR_WORKFLOW:<add>case enumspb.CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE, enumspb.CONTINUE_AS_NEW_INITIATOR_WORKFLOW:<keep>workflowBackoffType = enumsspb.WORKFLOW_BACKOFF_TYPE_CRON<add>case enumspb.CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED:<add>workflowBackoffType = enumsspb.WORKFLOW_BACKOFF_TYPE_UNSPECIFIED<keep>default:<keep>return serviceerror.NewInternal(fmt.Sprintf(\"unknown initiator: %v\", startAttr.GetInitiator()))<keep>}", "output": "I think this should never happen and should return an error also. Having `WorkflowBackoffTimerTask` with `UNSPECIFIED` type looks weird."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import (<keep>\"context\"<keep>\"fmt\"<add>\"github.com/iotexproject/iotex-address/address\"<keep>\"math/big\"<keep>\"math/rand\"<keep>\"testing\"", "output": "move to line 18 below"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>static void runlevel_io_cb (runlevel_t *r, const char *name,<keep>const char *msg, void *arg);<del>static int create_persistdir (attr_t *attrs, uint32_t rank);<keep>static int create_rundir (attr_t *attrs);<keep>static int create_broker_rundir (overlay_t *ov, void *arg);<keep>static int create_dummyattrs (flux_t *h, uint32_t rank, uint32_t size);", "output": "minor nit - add \"persist-filesystem\" and \"persist-directory\" into commit message, as its something people may search on (maybe applies to a few other commit messages)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if (headersSynced > 0)<keep>{<add>_blockTree.Flush();<keep>_syncReport.FullSyncBlocksDownloaded.Update(_blockTree.BestSuggestedHeader?.Number ?? 0);<keep>_syncReport.FullSyncBlocksKnown = bestPeer.HeadNumber;<keep>}", "output": "it introduces a lot of complexity to the state, can we flush straightaway or create a two level flush store where the questions are read form unflushed data?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>size_t sigsetsize)<keep>*/<keep>/* we also need access to the params in post_system_call */<add>uint errno_val = 0;<keep>dcontext->sys_param0 = sys_param(dcontext, 0);<keep>dcontext->sys_param1 = sys_param(dcontext, 1);<keep>dcontext->sys_param2 = sys_param(dcontext, 2);", "output": "I would avoid the term \"errno\" as it implies the glibc variable. Use error_code or status or something."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>// Check to see if we can reuse buffers.<del>if len(cnb) > 0 {<add>if len(cnb) > 0 && n >= int64(len(cnb[0])) {<keep>oldp := cnb[0][:0]<keep>if cap(oldp) >= int(c.out.sz) {<keep>// Replace primary or secondary if they are nil, reusing same buffer.", "output": "Seems len(cnb[0]) will be the length after the write since of the *v thing we saw no?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>BOOST_AUTO_TEST_CASE(valid_tile_urls)<keep>{<del>TileParameters reference_1{1, 2, 3};<del>auto result_1 = parseParameters<TileParameters>(\"tile(1,2,3).mvt\");<add>TileParameters reference_1{1, 2, 12};<add>auto result_1 = parseParameters<TileParameters>(\"tile(1,2,12).mvt\");<keep>BOOST_CHECK(result_1);<keep>BOOST_CHECK_EQUAL(reference_1.x, result_1->x);<keep>BOOST_CHECK_EQUAL(reference_1.y, result_1->y);", "output": "can we also check for smaller zoom levels returning valid error codes?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>'puppetbin'        => '/opt/puppet/bin/puppet',<keep>'puppetbindir'     => '/opt/puppet/bin',<keep>'puppetsbindir'    => '/opt/puppet/sbin',<del>'privatebindir'    => '/opt/puppetlabs/puppet/bin',<add>'privatebindir'    => '/opt/puppet/bin',<keep>'puppetvardir'     => '/var/opt/lib/pe-puppet',<keep>'hieradatadir'     => '/var/lib/hiera',<keep>'hieraconf'        => '/etc/puppetlabs/puppet/hiera.yaml',", "output": "This winds up flipping the desired values. Looks like I gave you a bum steer @kevpl"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// gh-2558: if we had to set a default and the value is not undefined,<keep>// we have to save as well<keep>all = all.concat(this.$__.activePaths.map('default', function(path) {<del>if (path === '_id' || !_this.getValue(path)) {<add>var pType = typeof _this.getValue(path);<add>if (path === '_id' || (!_this.getValue(path) && pType !== 'boolean')) {<keep>return;<keep>}<keep>return {", "output": "This check is a little odd, and will still mess up with empty strings `''` because empty string is falsy. Can we change this to `|| _this.getValue(path) == null`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>importedname = node.modname<keep>else:<keep>importedname = node.names[0][0].split('.')[0]<add>if node.as_string().startswith('from .'):<add>importedname = '.' + importedname<keep>self._imports_stack.append((node, importedname))<keep>@staticmethod", "output": "Check modname instead, but only if it's a ImportFrom."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>self.full_rules_path = rules_file_path.strip()<keep>self.snapshot_timestamp = snapshot_timestamp<del>def build_rule_book(self):<add>def build_rule_book(self, global_configs):<keep>\"\"\"Build RuleBook from the rules definition file.\"\"\"<keep>raise NotImplementedError('Implement in a child class.')", "output": "Sorry I'm confused. Why not kwarg this like the others?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>$htmlAttributes = $attributes;<keep>unset($htmlAttributes['type'], $htmlAttributes['size']);<add>$useLazyLoading = array_key_exists('lazy', $attributes) ? (bool)$attributes['lazy'] : true;<add>$isAttributeClassExistsAndNotEmpty = array_key_exists('class', $attributes) && $attributes['class'] !== '';<add>$htmlAttributes['class'] = sprintf(<add>'%s%s',<add>$useLazyLoading ? 'lazy' : '',<add>$isAttributeClassExistsAndNotEmpty ? ' ' . $attributes['class'] : ''<add>);<add><add>if ($useLazyLoading) {<add>$htmlAttributes['data-src'] = $htmlAttributes['src'];<add>$htmlAttributes['src'] = '';<add>}<add><keep>return $this->templating->render('@ShopsysFramework/Common/image.html.twig', [<keep>'attr' => $htmlAttributes,<keep>'additionalImagesData' => $additionalImagesData,", "output": "Is OK that we don't have some placeholder?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add>All unapproved FY15 credit card funding requests are being cancelled.<add>If the need still exists, please submit a new FY16 funding request.<add><add><%= url_for(controller: 'proposals', action: 'show', id: @proposal.id) %>", "output": "why isn't rubocop failing for single quotes?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>#<keep># @return [Driver]<keep>#<del># @see Selenium::WebDriver::Remote::Bridge<add># @see Selenium::WebDriver::Remote::OSSBridge<add># @see Selenium::WebDriver::Remote::W3CBridge<keep># @see Selenium::WebDriver::Firefox::Bridge<add># @see Selenium::WebDriver::Firefox::W3CBridge<keep># @see Selenium::WebDriver::IE::Bridge<keep># @see Selenium::WebDriver::Edge::Bridge<keep># @see Selenium::WebDriver::Chrome::Bridge", "output": "Maybe call it `WireBridge`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return 0;<keep>}<add>// Log warning only once, if not explicitly disabled<add>if (!configuration.isIgnoreIncrementalAnalysis() && LOG.isLoggable(Level.WARNING)) {<add>final String version = PMDVersion.isUnknown() || PMDVersion.isSnapshot() ? \"latest\" : \"pmd-\" + PMDVersion.VERSION;<add>LOG.warning(\"This analysis could be faster, please consider using Incremental Analysis: \"<add>+ \"https://pmd.github.io/\" + version + \"/pmd_userdocs_getting_started.html#incremental-analysis\");<add>}<add><keep>Set<Language> languages = getApplicableLanguages(configuration, ruleSets);<keep>List<DataSource> files = getApplicableFiles(configuration, languages);", "output": "this warning shouldn't be produced if we configured a cache either"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return s.(*session.Session), nil<keep>}<del>ns, err := session.NewSession(aws.NewConfig().WithRegion(region))<add>ns, err := session.NewSessionWithOptions(session.Options{<add>// Provide SDK Config options, such as Region.<add>Config: aws.Config{<add>Region: aws.String(region),<add>},<add>})<add><keep>if err != nil {<keep>return nil, err<keep>}", "output": "Just noticed, are we specifically missing the addition of `SharedConfigState: session.SharedConfigEnable` ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}, nil<keep>}<add>func (a *FakeWebAPI) EnablePiped(ctx context.Context, req *webservice.EnablePipedRequest) (*webservice.EnablePipedResponse, error) {<add>return nil, status.Error(codes.Unimplemented, \"\")<add>}<add><keep>func (a *FakeWebAPI) DisablePiped(ctx context.Context, req *webservice.DisablePipedRequest) (*webservice.DisablePipedResponse, error) {<keep>return nil, status.Error(codes.Unimplemented, \"\")<keep>}", "output": "`ctx` is unused in EnablePiped"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import (<keep>\"bytes\"<del>\"crypto/rand\"<keep>\"encoding/hex\"<keep>\"math\"<add>\"math/rand\"<keep>\"strings\"<keep>\"sync\"<keep>\"sync/atomic\"", "output": "Is it ok to use \"math/rand\" instead of \"crypto/rand\" here? Do we need to protect this ID somehow?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>private static readonly Lazy<bool> _enabled = new Lazy<bool>(<keep>() =><keep>{<add>#if NETSTANDARD2_0<add>// TODO: figure out configuration in .NET Standard 2.0<add>return true;<add>#else<keep>string setting = ConfigurationManager.AppSettings[\"Datadog.Tracing:Enabled\"];<keep>return !string.Equals(setting, bool.FalseString, StringComparison.InvariantCultureIgnoreCase);<add>#endif<keep>},<keep>LazyThreadSafetyMode.PublicationOnly);", "output": "What are the possibilities here? Since we plan on supporting .net standard 2.0 from day 1, we might as well tackle that now."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import os<keep>import codecs<del><add>from time import strftime<keep>from cliquet import utils as cliquet_utils<del><add>from kinto import __version__<keep>from kinto import logger<keep>HERE = os.path.abspath(os.path.dirname(__file__))", "output": "The spaces are actually legitimate here: in python, you: - first import standard library modules (hint: time is one) - then import 3rd party library modules - then import the modules from you project (here kinto). Between each block you need an empty line."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>namespace Experimental {<keep>bool HPX::m_hpx_initialized = false;<add>bool HPX::m_was_initialized = false;<add>bool HPX::m_was_finalized   = false;<add><keep>std::atomic<uint32_t> HPX::m_next_instance_id{1};<keep>#if defined(KOKKOS_ENABLE_HPX_ASYNC_DISPATCH)<keep>std::atomic<uint32_t> HPX::m_active_parallel_region_count{0};", "output": "Why do we need both `HPX::m_hpx_initialized` and `HPX:: m_was_initialized`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>namedTracer: make(map[string]*tracer),<keep>}<keep>tp.config.Store(&Config{<del>DefaultSampler:       ProbabilitySampler(defaultSamplingProbability),<add>DefaultSampler:       AlwaysSample(),<keep>IDGenerator:          defIDGenerator(),<keep>MaxAttributesPerSpan: DefaultMaxAttributesPerSpan,<keep>MaxEventsPerSpan:     DefaultMaxEventsPerSpan,", "output": "Could you also remove the `defaultSamplingProbability` constant from `sampling.go`? It seems to became unused with this change."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"os\"<keep>\"path/filepath\"<del>\"github.com/mitchellh/go-homedir\"<add>homedir \"github.com/mitchellh/go-homedir\"<keep>\"github.com/mysteriumnetwork/node/core/node\"<keep>\"github.com/urfave/cli\"<keep>)", "output": "Why this is needed?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>private Throwable rebuildServerError(Map<String, Object> rawErrorData, int responseStatus) {<del>if (!rawErrorData.containsKey(CLASS) && !rawErrorData.containsKey(STACK_TRACE)) {<add>if (rawErrorData.get(CLASS) == null || rawErrorData.get(STACK_TRACE) == null) {<keep>// Not enough information for us to try to rebuild an error.<keep>return null;<keep>}", "output": "Why && changed to || ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>shared_examples_for 'disables OpenSSH roaming' do<keep>let(:disable_ssh_roaming) { %(echo -e \"Host *\\n  UseRoaming no\\n\" | cat - $HOME/.ssh/config > $HOME/.ssh/config.tmp && mv $HOME/.ssh/config.tmp $HOME/.ssh/config) }<del>let(:sexp) { sexp_find(subject, [:if, \"$(sw_vers -productVersion | cut -d . -f 2) -lt 12\"]) }<add>let(:sexp) { sexp_find(subject, [:if, %(\"$(sw_vers -productVersion 2>/dev/null | cut -d . -f 2)\" -lt 12)]) }<keep>it 'disables OpenSSH roaming' do<del>sexp.should include_sexp [:cmd, disable_ssh_roaming]<add>expect(sexp).to include_sexp [:cmd, disable_ssh_roaming]<keep>end<keep>end", "output": "The use of `#should` was triggering an rspec depracation warning for me, which is why I switched this to the rspec 3 style."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep># @attr pending_examples [Array<RSpec::Core::Example>] the pending examples<keep># @attr load_time [Float] the number of seconds taken to boot RSpec<keep>#                         and load the spec files<add># @attr errors [Integer] the number of errors that have occurred processing<add>#                        the spec suite<keep>SummaryNotification = Struct.new(:duration, :examples, :failed_examples,<del>:pending_examples, :load_time)<add>:pending_examples, :load_time, :errors)<keep>class SummaryNotification<keep># @api<keep># @return [Fixnum] the number of examples run", "output": "The name `errors` is a bit mis-leading -- usually I'd expect a field called `errors` to be an array of errors but here it's just a count. And it's not a count of _all_ errors -- it's a count only of some errors."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>defer ops.mdWriterLock.Unlock(lState)<keep>// Now cause a paper prompt unlock via a folder access<del>errCh := make(chan error)<add>errCh := make(chan error, 1)<keep>go func() {<keep>_, err := GetRootNodeForTest(ctx, config2Dev2, name, false)<keep>select {", "output": "What's the theory on why this could fix the hang? It seems like the call to `GetRootNodeForTest` will always need to call into the crypto object before returning an error, and so it should block on that `c` receive, after which the test immediately drains `errCh`. So I don't quite see how buffering would help..."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>TLSCaCert      string        `json:\"-\"`<keep>TLSConfig      *tls.Config   `json:\"-\"`<keep>WriteDeadline  time.Duration `json:\"-\"`<add><add>CustomClientAuth Auth `json:\"-\"`<add>CustomRouterAuth Auth `json:\"-\"`<keep>}<keep>// Clone performs a deep copy of the Options struct, returning a new clone", "output": "Could we rename those to `CustomClientAuthentication` (same for Router) to remove ambiguity between Authentication and Authorization (permissions)?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>'Used when comparing an object to a literal, which is usually '<keep>'what you do not want to do, since you can compare to a different '<keep>'literal than what was expected altogether.'),<del>}<add>'R0124': ('Logical tautology in comparison - %s',<add>'logical-tautology',<add>'Used when something is compared against itself.',<add>),<add><add>}<keep>def _check_singleton_comparison(self, singleton, root_node, negative_check=False):<keep>if singleton.value is True:", "output": "Can we remove the argument from this message? A message will include a line number already that points to the place in the code that has the problem. I think we can remove it."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>bool nano::server_socket::limit_reached_for_incoming_subnetwork_connections (std::shared_ptr<nano::socket> const & new_connection)<keep>{<keep>debug_assert (strand.running_in_this_thread ());<del>if (node.flags.disable_max_peers_per_subnetwork)<add>if (node.flags.disable_max_peers_per_subnetwork || nano::transport::is_ipv4_or_v4_mapped_address (new_connection->remote.address ()))<keep>{<keep>// If the limit is disabled, then it is unreachable.<add>// If the address is IPv4 we don't check for a network limit, since its address space isn't big as IPv6 /64.<keep>return false;<keep>}<keep>auto const counted_connections = socket_functions::count_subnetwork_connections (<keep>connections_per_address,<del>nano::transport::mapped_from_v4_or_v6 (new_connection->remote.address ()),<add>new_connection->remote.address ().to_v6 (),<keep>node.network_params.network.ipv6_subnetwork_prefix_for_limiting);<keep>return counted_connections >= node.network_params.network.max_peers_per_subnetwork;<keep>}", "output": "I do not think we need to do a source code change to handle this. We could set the subnetwork to default to /32 (/128 for ipv6 ipv4-mapped)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>bq_data.append({<keep>'json': row,<del>'insertId': \"%s-%s\" % (listen['user_name'], listen['listened_at'])<add>'insertId': \"%s-%s-%s\" % (listen['user_name'], listen['listened_at'], listen['recording_msid'])<keep>})<keep>body = { 'rows' : bq_data }", "output": "@alastair, because the `insertId` for two listens with different metadata and same ts was the same, only one of them would get written into BQ. A question is what would be the ideal way to write tests for stuff like this, so that this doesn't break again?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add># RailsAdmin config file. Generated on May 30, 2012 16:34<add># See github.com/sferik/rails_admin for more informations<add><add>RailsAdmin.config do |config|<add>config.authenticate_with do<add>unless current_user<add>session[:return_to] = request.url<add>redirect_to \"/sign_in\", :alert => \"You must first log in or sign up before accessing this page.\"<add>end<add>end<add><add>config.authorize_with do<add>redirect_to \"/\", :alert => \"You are not authorized to access that page\" unless current_user.admin?<add>end<add><add>config.current_user_method { current_user }<add><add>config.main_app_name = ['Workshops', 'Admin']<add>end", "output": "Can this use the route helper instead?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>root.addServlet(new ServletHolder(new ExecutorServlet()), \"/executor\");<keep>root.addServlet(new ServletHolder(new JMXHttpServlet()), \"/jmx\");<keep>root.addServlet(new ServletHolder(new StatsServlet()), \"/stats\");<add>root.addServlet(new ServletHolder(new StatisticsServlet()), \"/stastics\");<keep>root.setAttribute(ServerConstants.AZKABAN_SERVLET_CONTEXT_KEY, this);", "output": "/DispatcherStatistics ? /statistics is a bit confusing with /stats"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>/**<keep>* process method<keep>*<del>* @param array Array of values, an array because of multivalued fields<add>* @param array $values of values, an array because of multivalued fields<keep>* @return array Modified array of values<keep>*/<keep>public function process(array $values);", "output": "Please add \"Array\" back, right now it's not a proper sentence."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"consider using the list, dict or set constructor. \"<keep>\"It is faster and simpler.\",<keep>),<add>\"R1722\": (<add>\"Consider using sys.exit()\",<add>\"consider-using-sys-exit\",<add>\"Instead of using exit() or quit(), consider using the sys.exit().\",<add>),<keep>}<keep>options = (<keep>(", "output": "I don't know if there are strict conventions about this, but I think the name of the warning should be the diagnosis, not the suggested course of action. In this case, that would mean changing the name of the warning to `interactive-exit` or something like that."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>vote_uniquer (block_uniquer),<keep>startup_time (std::chrono::steady_clock::now ())<keep>{<add>if (config.websocket_config.enabled)<add>{<add>websocket_server = std::make_shared<nano::websocket::listener> (*this, nano::tcp_endpoint (boost::asio::ip::address_v6::any (), config.websocket_config.port));<add>this->websocket_server->run ();<add>}<add><keep>wallets.observer = [this](bool active) {<keep>observers.wallet.notify (active);<keep>};", "output": "The bind address should be configurable."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>from dagster.seven import IS_WINDOWS, multiprocessing<keep>from dagster.seven.abc import Mapping<del>from .alert import make_email_on_pipeline_failure_sensor, make_email_on_run_failure_sensor<keep>from .merger import merge_dicts<keep>from .yaml_utils import load_yaml_from_glob_list, load_yaml_from_globs, load_yaml_from_path", "output": "I think we should keep these, o.w. our examples will be wrong (where we're importing from `dagster.utils`). Also, we might break folks who've imported following our docs."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import colander<keep>import venusian<keep>import six<add>from jsonpatch import JsonPatchException<add>from jsonpointer import JsonPointerException<keep>from pyramid import exceptions as pyramid_exceptions<keep>from pyramid.decorator import reify<keep>from pyramid.security import Everyone", "output": "I'd rather catch those to `utils.py` and raise a simple ValueError from them. From the resource point of view, these are details of implementation"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<del>﻿using Datadog.Trace.Logging;<add>using Datadog.Trace.Logging;<keep>namespace Datadog.Trace<keep>{<keep>internal class AsyncLocalScopeManager<keep>{<del>private static ILog _log = LogProvider.For<AsyncLocalScopeManager>();<add>private static readonly ILog _log = LogProvider.For<AsyncLocalScopeManager>();<del>private AsyncLocalCompat<Scope> _currentSpan = new AsyncLocalCompat<Scope>();<add>private readonly AsyncLocalCompat<Scope> _currentSpan = new AsyncLocalCompat<Scope>();<keep>public Scope Active => _currentSpan.Get();", "output": "We do this in lots of places I'm starting to notice...typically you'd avoid taking concrete dependencies, but we also avoid package dependencies as well which makes sense (i.e. not using an IoC, etc.). Any reason we don't implement some form of poor-man's DI and/or a simple factory instead of new-ing things up everywhere. This may be a simple example (as I'm guessing this is likely the only place this is ever or ever will be used), but separating them doesn't take any more time/effort either really."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return nil<keep>}<add>func (c testTLFJournalConfig) tlfIDGetter() tlfIDGetter {<add>return nil<add>}<add><keep>func (c testTLFJournalConfig) diskLimitTimeout() time.Duration {<keep>return c.dlTimeout<keep>}", "output": "Shouldn't this be a `libfs.nullIDGetter` (exported, of course)?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>or (role in (controlTypes.ROLE_TABLE, controlTypes.ROLE_TABLECELL, controlTypes.ROLE_TABLEROWHEADER, controlTypes.ROLE_TABLECOLUMNHEADER) and not formatConfig[\"reportTables\"])<keep>or (role in (controlTypes.ROLE_LIST, controlTypes.ROLE_LISTITEM) and controlTypes.STATE_READONLY in states and not formatConfig[\"reportLists\"])<keep>or (role in (controlTypes.ROLE_FRAME, controlTypes.ROLE_INTERNALFRAME) and not formatConfig[\"reportFrames\"])<add>or (role in (controlTypes.ROLE_DELETED_CONTENT,controlTypes.ROLE_INSERTED_CONTENT) and not formatConfig[\"reportRevisions\"])<keep>):<keep># This is just layout as far as the user is concerned.<keep>return self.PRESCAT_LAYOUT<keep>if (<del>role in (controlTypes.ROLE_LINK, controlTypes.ROLE_HEADING, controlTypes.ROLE_BUTTON, controlTypes.ROLE_RADIOBUTTON, controlTypes.ROLE_CHECKBOX, controlTypes.ROLE_GRAPHIC, controlTypes.ROLE_CHART, controlTypes.ROLE_MENUITEM, controlTypes.ROLE_TAB, controlTypes.ROLE_COMBOBOX, controlTypes.ROLE_SLIDER, controlTypes.ROLE_SPINBUTTON, controlTypes.ROLE_COMBOBOX, controlTypes.ROLE_PROGRESSBAR, controlTypes.ROLE_TOGGLEBUTTON, controlTypes.ROLE_MENUBUTTON, controlTypes.ROLE_TREEVIEW, controlTypes.ROLE_CHECKMENUITEM, controlTypes.ROLE_RADIOMENUITEM)<add>role in (controlTypes.ROLE_DELETED_CONTENT,controlTypes.ROLE_INSERTED_CONTENT,controlTypes.ROLE_LINK, controlTypes.ROLE_HEADING, controlTypes.ROLE_BUTTON, controlTypes.ROLE_RADIOBUTTON, controlTypes.ROLE_CHECKBOX, controlTypes.ROLE_GRAPHIC, controlTypes.ROLE_CHART, controlTypes.ROLE_MENUITEM, controlTypes.ROLE_TAB, controlTypes.ROLE_COMBOBOX, controlTypes.ROLE_SLIDER, controlTypes.ROLE_SPINBUTTON, controlTypes.ROLE_COMBOBOX, controlTypes.ROLE_PROGRESSBAR, controlTypes.ROLE_TOGGLEBUTTON, controlTypes.ROLE_MENUBUTTON, controlTypes.ROLE_TREEVIEW, controlTypes.ROLE_CHECKMENUITEM, controlTypes.ROLE_RADIOMENUITEM)<keep>or (role == controlTypes.ROLE_EDITABLETEXT and controlTypes.STATE_MULTILINE not in states and (controlTypes.STATE_READONLY not in states or controlTypes.STATE_FOCUSABLE in states))<keep>or (role == controlTypes.ROLE_LIST and controlTypes.STATE_READONLY not in states)<keep>):", "output": "Could you split this into multiple lines?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>ad.zone = disk[\"zone\"]<keep>// Register disk attachments.<del>errs = addErrs(errs, s.w.instances.w.disks.regAttach(ad.Source, ad.Instance, ad.Mode, s))<del><add>// If device name is not given explicitly, its device name will be the same as disk name.<add>deviceName := ad.Source<add>if ad.DeviceName != \"\" {<add>deviceName = ad.DeviceName<add>}<add>errs = addErrs(errs, s.w.instances.w.disks.regAttach(deviceName, ad.Source, ad.Instance, ad.Mode, s))<keep>}<keep>return errs<keep>}", "output": "ad.Source is disk name? Shouldn't the order of initialization be reversed here then? First set ad.DeviceName, if it's empty, set ad.Source? Or this is a different use case? This is the third place where this device/disk default logic is implemented, so another reason to move it to regAttach, if it's possible to be generalized."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>package com.fsck.k9.fragment;<del>import java.util.ArrayList;<del>import java.util.Collections;<del>import java.util.Comparator;<del>import java.util.EnumMap;<del>import java.util.HashMap;<del>import java.util.HashSet;<del>import java.util.List;<del>import java.util.Map;<del>import java.util.Map.Entry;<del>import java.util.Set;<del>import java.util.concurrent.Future;<del><keep>import android.app.Activity;<keep>import android.content.BroadcastReceiver;<keep>import android.content.Context;", "output": "Commit 676eeeab10884456a5f70ce708a8aa5116ecbaf7 contains a lot of unrelated code style changes. Please get rid of these."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import io.servicecomb.foundation.ssl.SSLOption;<keep>import io.servicecomb.foundation.ssl.SSLOptionFactory;<keep>import io.servicecomb.foundation.vertx.VertxTLSBuilder;<add>import io.servicecomb.transport.rest.vertx.accesslog.AccessLogConfiguration;<add>import io.servicecomb.transport.rest.vertx.accesslog.impl.AccessLogHandlerImpl;<add>import io.servicecomb.transport.rest.vertx.accesslog.parser.impl.DefaultAccessLogPatternParser;<keep>import io.vertx.core.AbstractVerticle;<keep>import io.vertx.core.Context;<keep>import io.vertx.core.Future;", "output": "import but not used so you did not resolve compile warnings?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>virtualNode.children.forEach(({ actualNode }) => {<keep>var nodeName = actualNode.nodeName.toUpperCase();<del>if (actualNode.nodeType === 1 && nodeName !== 'DT' && nodeName !== 'DD' && permitted.indexOf(nodeName) === -1) {<del>bad.push(actualNode);<add><add>if (actualNode.nodeType === 1 && permitted.indexOf(nodeName) === -1) {<add>var role = (actualNode.getAttribute('role') || '').toLowerCase();<add>if ((nodeName !== 'DT' && nodeName !== 'DD') || role) {<add>bad.push(actualNode);<add>}<keep>} else if (actualNode.nodeType === 3 && actualNode.nodeValue.trim() !== '') {<keep>hasNonEmptyTextNode = true;<keep>}", "output": "This should allow `role=definition` and `role=term`, possibly also `role=list`?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>methodViewBuilder.stubName(namer.getStubName(context.getTargetInterface()));<keep>methodViewBuilder.settingsGetterName(namer.getSettingsFunctionName(context.getMethod()));<keep>methodViewBuilder.callableName(context.getNamer().getCallableName(context.getMethod()));<add>methodViewBuilder.isRequestStreaming(context.getMethod().getRequestStreaming());<add>methodViewBuilder.isResponseStreaming(context.getMethod().getResponseStreaming());<keep>}<keep>private void setListMethodFields(", "output": "If you use an enum for the streaming type, you wouldn't need to add each boolean as a separate attribute."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>final long copied = Files.copy(from.toPath(), out);<keep>final long length = from.length();<keep>if (copied != length) {<del>throw new IOException(\"Could not transfer all bytes.\");<add>throw new IOException(\"Could not transfer all bytes of \" + from.toPath());<keep>}<keep>}<keep>}", "output": "seems reasonable to also want to include the 'to' location?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>//  - Some passes may create new functions, but only the functions defined in<keep>//    the lldb repl line should be serialized.<keep>if (swift_ast_ctx->UseSerialization()) {<add>// Run all the passes before differentiation before we serialize.<add>runSILMandatoryOptPreDiffPasses(*sil_module);<add>// Serialize the module now.<keep>auto expr_module_dir = swift_ast_ctx->GetReplExprModulesDir();<keep>assert(expr_module_dir != nullptr);<keep>llvm::SmallString<256> filename(expr_module_dir);", "output": "Does it work to run all the sil diagnostic passes before we serialize? That would be more consistent with what the normal compiler does in `FrontendTool.cpp : performCompileStepsPostSILGen()`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"Number of threads to use\")(<keep>\"core,k\",<keep>boost::program_options::value<double>(&contractor_config.core_factor)->default_value(1.0),<del>\"Percentage of the graph (in vertices) to contract [0..1]\")(<add>\"Percentage of the graph (in vertices) to contract [0..1]. Will always be 1.0\")(<keep>\"segment-speed-file\",<keep>boost::program_options::value<std::vector<std::string>>(<keep>&contractor_config.updater_config.segment_speed_lookup_paths)", "output": "would be `DEPRECATED Percentage of the graph (in vertices) to contract [0..1]` better?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>private static final String HIVE_LOCK_CHECK_MIN_WAIT_MS = \"iceberg.hive.lock-check-min-wait-ms\";<keep>private static final String HIVE_LOCK_CHECK_MAX_WAIT_MS = \"iceberg.hive.lock-check-max-wait-ms\";<keep>private static final String HIVE_TABLE_LEVEL_LOCK_EVICT_MS = \"iceberg.hive.table-level-lock-evict-ms\";<add>private static final String HIVE_ICEBERG_METADATA_REFRESH_MAX_RETRIES = \"hive.iceberg.metadata.refresh.max.retries\";<keep>private static final long HIVE_ACQUIRE_LOCK_TIMEOUT_MS_DEFAULT = 3 * 60 * 1000; // 3 minutes<keep>private static final long HIVE_LOCK_CHECK_MIN_WAIT_MS_DEFAULT = 50; // 50 milliseconds<keep>private static final long HIVE_LOCK_CHECK_MAX_WAIT_MS_DEFAULT = 5 * 1000; // 5 seconds<add>private static final int HIVE_ICEBERG_METADATA_REFRESH_MAX_RETRIES_DEFAULT = 2;<keep>private static final long HIVE_TABLE_LEVEL_LOCK_EVICT_MS_DEFAULT = TimeUnit.MINUTES.toMillis(10);<keep>private static final DynMethods.UnboundMethod ALTER_TABLE = DynMethods.builder(\"alter_table\")<keep>.impl(IMetaStoreClient.class, \"alter_table_with_environmentContext\",", "output": "Nit: Does this make more sense as `iceberg.hive.metadata...`? The rest of the configs seem to start with `iceberg.hive`."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>public static void Stress(int concurrency = 0)<keep>{<add>#if DEBUG<add>Console.WriteLine(\"***WARNING*** The current build is DEBUG which may affect timing!\\n\");<add>#endif<add><keep>if (concurrency < 0)<keep>{<keep>throw new ArgumentOutOfRangeException(nameof(concurrency), \"concurrency level should be a non-negative number.\");", "output": "Why do we need `\\n` if we already use `WriteLine`? (and `\\n` is not cross platform)"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>import java.nio.ByteBuffer;<keep>import java.time.Instant;<keep>import java.time.ZoneOffset;<add>import java.util.Arrays;<keep>import java.util.List;<keep>import java.util.Map;<del>import org.apache.flink.table.data.ArrayData;<del>import org.apache.flink.table.data.DecimalData;<del>import org.apache.flink.table.data.GenericRowData;<del>import org.apache.flink.table.data.MapData;<del>import org.apache.flink.table.data.RawValueData;<del>import org.apache.flink.table.data.RowData;<del>import org.apache.flink.table.data.StringData;<del>import org.apache.flink.table.data.TimestampData;<add><add>import org.apache.flink.table.data.*;<keep>import org.apache.iceberg.MetadataColumns;<keep>import org.apache.iceberg.Schema;<keep>import org.apache.iceberg.parquet.ParquetValueReader;", "output": "In iceberg, we usually don't use `*` to import package, it's more clear to import the specify package one by one."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if (opts->has_bool(\"verbose\") && opts->get_bool(\"verbose\")) {<keep>m_verbose = true;<keep>}<add><add>if (opts->has_string(\"use_tarball\")) {<add>m_dir = m_reader->get_local_file_dir();<add>}<add><add>if (m_comm->get_num_models() != 1) {<add>if (m_master) {<add>std::cerr << \"\\nFATAL ERROR: data store classes currently assume there is\\n\"<add><< \"a single model; please ask Dave Hysom to fix!\\n\\n\";<add>}<add>exit(9);<add>}<keep>}<keep>void generic_data_store::get_minibatch_index_vector() {", "output": "Will it still be an issue if all the models use the same data set?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"\"\"<keep>address = self.server_conn.address<keep>if address:<add>forbidden_hosts = [\"localhost\", \"127.0.0.1\", \"::1\"]<add><add>if self.config.options.listen_host:<add>forbidden_hosts.append(self.config.options.listen_host)<add><keep>self_connect = (<keep>address[1] == self.config.options.listen_port and<del>address[0] in (\"localhost\", \"127.0.0.1\", \"::1\")<add>address[0] in forbidden_hosts<keep>)<keep>if self_connect:<keep>raise exceptions.ProtocolException(", "output": "Could we not just always include `self.config.options.listen_host`? If that is empty, the `address[0]` check should also never be true."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>Queue<Tuple2<K, V>> newList = list;<keep>HashMap<K, V> newMap = map;<keep>if (containsKey(key)) {<del>newList = newList.filter(t -> !t._1.equals(key));<add>newList = newList.filter(t -> !Objects.equals(t._1, key));<keep>newMap = newMap.remove(key);<keep>}<keep>newList = newList.append(Tuple.of(key, value));", "output": "We called `t._1.equals(...)` where `t._1` potentially could be `null`."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>{<keep>public struct MemoryPoolIterator2<keep>{<add>private readonly static int _vectorSpan = Vector<byte>.Count;<add><keep>private MemoryPoolBlock2 _block;<keep>private int _index;", "output": "`Vector<byte>.Count` should Jit to const when intrinsic; not sure when `Vector.IsHardwareAccelerated == false` ; however we know `readonly static int` does Jit to const."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>Versions []string `json:\"versions\"`<keep>}<add>// Response to `GET /versions`<add>// swagger:response VersionsResponse<add>type versionsResponse struct {<add>//Versions Response<add>//in:body<add>Body *VersionsResponse<add>}<add><keep>// APIV1GETWalletsResponse is the response to `GET /v1/wallets`<keep>// friendly:ListWalletsResponse<keep>type APIV1GETWalletsResponse struct {", "output": "rename -> info ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>#include <wlr/types/wlr_tablet_v2.h><keep>#include <wlr/util/log.h><add>static const struct wlr_tablet_tool_v2_grab_interface default_tool_interface;<add><keep>static const struct wlr_surface_role tablet_tool_cursor_surface_role = {<keep>.name = \"wp_tablet_tool-cursor\",<keep>};", "output": "This variable name should probably contain `grab`"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>namespace Microsoft.Rest<keep>{<del>public class PlatformTaskEx<add>[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Naming\",<add>\"CA1711:IdentifiersShouldNotHaveIncorrectSuffix\",<add>Justification=\"We think with Ex is better than using 2\")]<add>public static class PlatformTaskEx<keep>{<del>//Per FxCop performance rule to prevent the compiler from generating a default constructor.<del>private PlatformTaskEx() { }<del><keep>public static Task FromResult(object result)<keep>{<keep>#if NET45", "output": "Well, it is providing a platform neutral way of calling Task or TaskEx. We could just call it PlatformTask."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>privacyParametersBuilder.setEnabled(true);<keep>privacyParametersBuilder.setEnclaveUrl(privacyUrl);<keep>if (privacyPublicKeyFile() != null) {<del>privacyParametersBuilder.setEnclavePublicKeyUsingFile(privacyPublicKeyFile());<add>try {<add>privacyParametersBuilder.setEnclavePublicKeyUsingFile(privacyPublicKeyFile());<add>} catch (final IOException e) {<add>throw new ParameterException(<add>commandLine, \"Problem with privacy-public-key-file: \" + e.getMessage(), e);<add>} catch (final IllegalArgumentException e) {<add>throw new ParameterException(<add>commandLine, \"Contents of privacy-public-key-file invalid: \" + e.getMessage(), e);<add>}<keep>} else {<keep>throw new ParameterException(<keep>commandLine, \"Please specify Enclave public key file path to enable privacy\");", "output": "We probably don't need to print the msg with e.getMessage(). It will be printed by the logger since we are passing the exception as a parameter."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>// object<keep>func (agent *ecsAgent) initializeResourceFields() {<keep>agent.resourceFields = &taskresource.ResourceFields{<del>Control: cgroup.New(),<del>IOUtil:  ioutilwrapper.NewIOUtil(),<add>Control:      cgroup.New(),<add>IOUtil:       ioutilwrapper.NewIOUtil(),<add>Ctx:          agent.ctx,<add>DockerClient: agent.dockerClient,<keep>}<keep>}", "output": "Is it a concern that we initialize these fields irrespective of whether resources like cgroup/volumes are enabled or not?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if not title:<keep># Translators: The title for the dialog used to present general NVDA messages in browse mode.<keep>title = _(\"NVDA Message\")<del>isHtmlArgument = \"true\" if isHtml else \"false\"<del>dialogString = u\"{isHtml};{title};{message}\".format( isHtml = isHtmlArgument , title=title , message=message )<add>if not isHtml:<add>message = f\"<pre>{message.replace('<', '&lt;')}</pre>\"<add>dialogString = f\"{title};{message}\"<keep>dialogArguements = automation.VARIANT( dialogString )<keep>gui.mainFrame.prePopup()<keep>windll.mshtml.ShowHTMLDialogEx(", "output": "Please use something like html.escape() to ensure that the text is totally safe to include within html. &lt; is not enough."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>/**<keep>* Parses the bits of a valid property ID into an object of its components.<keep>*<add>* See: https://support.google.com/analytics/answer/7372977.<add>*<keep>* @since 1.8.0<keep>*<del>* @see {@link https://support.google.com/analytics/answer/7372977}<keep>* @param {string} propertyID Property ID to parse.<keep>* @return {(Object|undefined)} Object of property ID components if valid, otherwise false.<keep>*/", "output": "Why not use the JSdoc annotation as it did before?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>if tsf.TotalSize() > TransferSizeLimit {<keep>return errors.Wrap(action.ErrActPool, \"oversized data\")<keep>}<del>// Reject transfer of negative amount<del>if tsf.Amount().Sign() < 0 {<del>return errors.Wrap(action.ErrBalance, \"negative value\")<del>}<del>// Reject transfer of negative gas price<del>if tsf.GasPrice().Sign() < 0 {<del>return errors.Wrap(action.ErrGasPrice, \"negative value\")<del>}<del>// check if recipient's address is valid<del>if _, err := address.FromString(tsf.Recipient()); err != nil {<del>return errors.Wrapf(err, \"error when validating recipient's address %s\", tsf.Recipient())<del>}<del>return nil<add><add>return tsf.SelfCheck()<keep>}", "output": "is this already called by actPool.validate()?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<add><?php<add><add>return [<add>/*<add>|--------------------------------------------------------------------------<add>| Exclusion list<add>|--------------------------------------------------------------------------<add>|<add>| This is a list of exclusions for words or phrases where the original<add>| form of the word has the same spelling in a given language.<add>|<add>*/<add><add>'Email',<add>];", "output": "The Email field is not translated into Russian, and into any other. It's kind of a \"standard\" word. Therefore, we may face the fact that you have to create files with exceptions for all languages. @caouecs, what do you say?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return co(function*() {<keep>const createdUser = yield User.create({ name: 'Hafez' });<del>let threw = false;<add><add>let err;<add><keep>try {<keep>yield User.bulkWrite([{<keep>updateOne: {", "output": "Better to just do `const err = yield User.bulkWrite(ops).then(() => null, err => err);` so you don't need to write out the whole `try/catch` block."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>return;<keep>}<del>server.command(cursor.ns, cursor.cmd, cursor.options, queryCallback);<add>const commandOptions = Object.assign({}, cursor.options, cursor.cursorState);<add>server.command(cursor.ns, cursor.cmd, commandOptions, queryCallback);<keep>});<keep>};", "output": "Does everything on cursorState belong in the command options?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>private static boolean mAnimations = true;<keep>private static boolean mConfirmDelete = false;<add>private static boolean mConfirmMenuDiscard = true;<keep>private static boolean mConfirmDeleteStarred = false;<keep>private static boolean mConfirmSpam = false;<keep>private static boolean mConfirmDeleteFromNotification = true;", "output": "The field name doesn't really capture what this option does. I think `mConfirmDiscardMessage` would be a better choice."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>private function doProcessConfig($backendConfig)<keep>{<keep>$configPasses = array(<del>new NormalizerConfigPass(),<add>new NormalizerConfigPass($this->container->get('easyadmin.controller_resolver')),<keep>new DesignConfigPass($this->container->get('twig'), $this->container->getParameter('kernel.debug')),<keep>new MenuConfigPass(),<keep>new ActionConfigPass(),", "output": "haven't been implemented the `__constructor` for `NormalizerConfigPass` ?"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>pMvBindContextForScope_ = pMvBindContext;<keep>}<del>void RelRoot::addOneRowAggregates(BindWA* bindWA)<add>NABoolean RelRoot::addOneRowAggregates(BindWA* bindWA, NABoolean forceGroupByAgg)<keep>{<add>NABoolean GroupByAggNodeAdded = FALSE;<keep>RelExpr * childOfRoot = child(0);<keep>GroupByAgg *aggNode = NULL;<keep>// If the One Row Subquery is already enforced by a scalar aggregate", "output": "A small nit: This variable should start with a lower case letter."}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>$quoted_remove_var_id = preg_quote($remove_var_id);<keep>foreach ($clause->possibilities as $var_id => $_) {<del>if (preg_match('/' . $quoted_remove_var_id . '[\\]\\[\\-]/', $var_id)) {<add>if (preg_match('/' . preg_quote($quoted_remove_var_id, '/') . '[\\]\\[\\-]/', $var_id)) {<keep>break 2;<keep>}<keep>}", "output": "I was seeing `Warning: preg_match(): Unknown modifier 'a' in /path/to/project/vendor/vimeo/psalm/src/Psalm/Context.php on line 480` here"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>super(uppy, opts)<keep>this.provider = opts.provider<keep>this.id = this.provider<del>this.authProvider = opts.authProvider || this.provider<keep>this.name = this.opts.name || _getName(this.id)<keep>this.pluginId = this.opts.pluginId<keep>this.tokenKey = `companion-${this.pluginId}-auth-token`", "output": "I realised that this is not used anywhere"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>}<keep>}<add>synchronized Set<String> getFieldNames() {<add>return Set.copyOf(nameToNumber.keySet());<add>}<add><keep>synchronized void clear() {<keep>numberToName.clear();<keep>nameToNumber.clear();", "output": "we should not resurrect this method that we just removed"}
{"instruction": "You are a powerful code reviewer model. Your job is to suggest review comment in natural language. You are given a question, and context regarding a diff hunk or code change in programming language. You must output appropriate, contextual review comment for that code change.", "input": "<keep>\"github.com/spf13/cobra\"<keep>)<add>var (<add>snapshotListCommandHelpText = `<add>Usage: mayactl snapshot list [options]<add><add>$ mayactl snapshot list --volname <vol><add><add>This command displays status of available snapshot.<add>`<add>)<add><keep>// NewCmdSnapshotCreate creates a snapshot of OpenEBS Volume<keep>func NewCmdSnapshotList() *cobra.Command {<keep>options := CmdSnaphotCreateOptions{}", "output": "This command displays available snapshots on a volume."}
